// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gg18/struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gg18_2fstruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gg18_2fstruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "crypto-curve/proto_gen/curve_point.pb.switch.h"
#include "crypto-paillier/proto_gen/paillier.pb.switch.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gg18_2fstruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gg18_2fstruct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gg18_2fstruct_2eproto;
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg18 {
class Party;
struct PartyDefaultTypeInternal;
extern PartyDefaultTypeInternal _Party_default_instance_;
class SignKey;
struct SignKeyDefaultTypeInternal;
extern SignKeyDefaultTypeInternal _SignKey_default_instance_;
}  // namespace gg18
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> ::safeheron::proto::multi_party_ecdsa::gg18::Party* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::gg18::Party>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::gg18::SignKey* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::gg18::SignKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg18 {

// ===================================================================

class Party final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.gg18.Party) */ {
 public:
  inline Party() : Party(nullptr) {}
  ~Party() override;
  explicit PROTOBUF_CONSTEXPR Party(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Party(const Party& from);
  Party(Party&& from) noexcept
    : Party() {
    *this = ::std::move(from);
  }

  inline Party& operator=(const Party& from) {
    CopyFrom(from);
    return *this;
  }
  inline Party& operator=(Party&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Party& default_instance() {
    return *internal_default_instance();
  }
  static inline const Party* internal_default_instance() {
    return reinterpret_cast<const Party*>(
               &_Party_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Party& a, Party& b) {
    a.Swap(&b);
  }
  inline void Swap(Party* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Party* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Party* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Party>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Party& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Party& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Party* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.gg18.Party";
  }
  protected:
  explicit Party(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kIndexFieldNumber = 3,
    kXFieldNumber = 8,
    kNTildeFieldNumber = 10,
    kPFieldNumber = 11,
    kQFieldNumber = 12,
    kH1FieldNumber = 13,
    kH2FieldNumber = 14,
    kAlphaFieldNumber = 15,
    kBetaFieldNumber = 16,
    kPailPrivFieldNumber = 6,
    kPailPubFieldNumber = 7,
    kGXFieldNumber = 9,
  };
  // string party_id = 1;
  void clear_party_id();
  const std::string& party_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_party_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_party_id();
  PROTOBUF_NODISCARD std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string index = 3;
  void clear_index();
  const std::string& index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index();
  PROTOBUF_NODISCARD std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string x = 8;
  void clear_x();
  const std::string& x() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x();
  PROTOBUF_NODISCARD std::string* release_x();
  void set_allocated_x(std::string* x);
  private:
  const std::string& _internal_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x(const std::string& value);
  std::string* _internal_mutable_x();
  public:

  // string N_tilde = 10;
  void clear_n_tilde();
  const std::string& n_tilde() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_n_tilde(ArgT0&& arg0, ArgT... args);
  std::string* mutable_n_tilde();
  PROTOBUF_NODISCARD std::string* release_n_tilde();
  void set_allocated_n_tilde(std::string* n_tilde);
  private:
  const std::string& _internal_n_tilde() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_n_tilde(const std::string& value);
  std::string* _internal_mutable_n_tilde();
  public:

  // string p = 11;
  void clear_p();
  const std::string& p() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_p(ArgT0&& arg0, ArgT... args);
  std::string* mutable_p();
  PROTOBUF_NODISCARD std::string* release_p();
  void set_allocated_p(std::string* p);
  private:
  const std::string& _internal_p() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_p(const std::string& value);
  std::string* _internal_mutable_p();
  public:

  // string q = 12;
  void clear_q();
  const std::string& q() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_q(ArgT0&& arg0, ArgT... args);
  std::string* mutable_q();
  PROTOBUF_NODISCARD std::string* release_q();
  void set_allocated_q(std::string* q);
  private:
  const std::string& _internal_q() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_q(const std::string& value);
  std::string* _internal_mutable_q();
  public:

  // string h1 = 13;
  void clear_h1();
  const std::string& h1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_h1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_h1();
  PROTOBUF_NODISCARD std::string* release_h1();
  void set_allocated_h1(std::string* h1);
  private:
  const std::string& _internal_h1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_h1(const std::string& value);
  std::string* _internal_mutable_h1();
  public:

  // string h2 = 14;
  void clear_h2();
  const std::string& h2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_h2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_h2();
  PROTOBUF_NODISCARD std::string* release_h2();
  void set_allocated_h2(std::string* h2);
  private:
  const std::string& _internal_h2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_h2(const std::string& value);
  std::string* _internal_mutable_h2();
  public:

  // string alpha = 15;
  void clear_alpha();
  const std::string& alpha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alpha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alpha();
  PROTOBUF_NODISCARD std::string* release_alpha();
  void set_allocated_alpha(std::string* alpha);
  private:
  const std::string& _internal_alpha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alpha(const std::string& value);
  std::string* _internal_mutable_alpha();
  public:

  // string beta = 16;
  void clear_beta();
  const std::string& beta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_beta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_beta();
  PROTOBUF_NODISCARD std::string* release_beta();
  void set_allocated_beta(std::string* beta);
  private:
  const std::string& _internal_beta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_beta(const std::string& value);
  std::string* _internal_mutable_beta();
  public:

  // .safeheron.proto.PailPriv pail_priv = 6;
  bool has_pail_priv() const;
  private:
  bool _internal_has_pail_priv() const;
  public:
  void clear_pail_priv();
  const ::safeheron::proto::PailPriv& pail_priv() const;
  PROTOBUF_NODISCARD ::safeheron::proto::PailPriv* release_pail_priv();
  ::safeheron::proto::PailPriv* mutable_pail_priv();
  void set_allocated_pail_priv(::safeheron::proto::PailPriv* pail_priv);
  private:
  const ::safeheron::proto::PailPriv& _internal_pail_priv() const;
  ::safeheron::proto::PailPriv* _internal_mutable_pail_priv();
  public:
  void unsafe_arena_set_allocated_pail_priv(
      ::safeheron::proto::PailPriv* pail_priv);
  ::safeheron::proto::PailPriv* unsafe_arena_release_pail_priv();

  // .safeheron.proto.PailPub pail_pub = 7;
  bool has_pail_pub() const;
  private:
  bool _internal_has_pail_pub() const;
  public:
  void clear_pail_pub();
  const ::safeheron::proto::PailPub& pail_pub() const;
  PROTOBUF_NODISCARD ::safeheron::proto::PailPub* release_pail_pub();
  ::safeheron::proto::PailPub* mutable_pail_pub();
  void set_allocated_pail_pub(::safeheron::proto::PailPub* pail_pub);
  private:
  const ::safeheron::proto::PailPub& _internal_pail_pub() const;
  ::safeheron::proto::PailPub* _internal_mutable_pail_pub();
  public:
  void unsafe_arena_set_allocated_pail_pub(
      ::safeheron::proto::PailPub* pail_pub);
  ::safeheron::proto::PailPub* unsafe_arena_release_pail_pub();

  // .safeheron.proto.CurvePoint g_x = 9;
  bool has_g_x() const;
  private:
  bool _internal_has_g_x() const;
  public:
  void clear_g_x();
  const ::safeheron::proto::CurvePoint& g_x() const;
  PROTOBUF_NODISCARD ::safeheron::proto::CurvePoint* release_g_x();
  ::safeheron::proto::CurvePoint* mutable_g_x();
  void set_allocated_g_x(::safeheron::proto::CurvePoint* g_x);
  private:
  const ::safeheron::proto::CurvePoint& _internal_g_x() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_g_x();
  public:
  void unsafe_arena_set_allocated_g_x(
      ::safeheron::proto::CurvePoint* g_x);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_g_x();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.gg18.Party)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr n_tilde_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr q_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr h1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr h2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alpha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr beta_;
  ::safeheron::proto::PailPriv* pail_priv_;
  ::safeheron::proto::PailPub* pail_pub_;
  ::safeheron::proto::CurvePoint* g_x_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gg18_2fstruct_2eproto;
};
// -------------------------------------------------------------------

class SignKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.gg18.SignKey) */ {
 public:
  inline SignKey() : SignKey(nullptr) {}
  ~SignKey() override;
  explicit PROTOBUF_CONSTEXPR SignKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignKey(const SignKey& from);
  SignKey(SignKey&& from) noexcept
    : SignKey() {
    *this = ::std::move(from);
  }

  inline SignKey& operator=(const SignKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignKey& operator=(SignKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignKey* internal_default_instance() {
    return reinterpret_cast<const SignKey*>(
               &_SignKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignKey& a, SignKey& b) {
    a.Swap(&b);
  }
  inline void Swap(SignKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SignKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.gg18.SignKey";
  }
  protected:
  explicit SignKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemotePartiesFieldNumber = 6,
    kWorkspaceIdFieldNumber = 1,
    kLocalPartyFieldNumber = 5,
    kGXFieldNumber = 7,
    kThresholdFieldNumber = 2,
    kNPartiesFieldNumber = 3,
  };
  // repeated .safeheron.proto.multi_party_ecdsa.gg18.Party remote_parties = 6;
  int remote_parties_size() const;
  private:
  int _internal_remote_parties_size() const;
  public:
  void clear_remote_parties();
  ::safeheron::proto::multi_party_ecdsa::gg18::Party* mutable_remote_parties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::gg18::Party >*
      mutable_remote_parties();
  private:
  const ::safeheron::proto::multi_party_ecdsa::gg18::Party& _internal_remote_parties(int index) const;
  ::safeheron::proto::multi_party_ecdsa::gg18::Party* _internal_add_remote_parties();
  public:
  const ::safeheron::proto::multi_party_ecdsa::gg18::Party& remote_parties(int index) const;
  ::safeheron::proto::multi_party_ecdsa::gg18::Party* add_remote_parties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::gg18::Party >&
      remote_parties() const;

  // string workspace_id = 1;
  void clear_workspace_id();
  const std::string& workspace_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workspace_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workspace_id();
  PROTOBUF_NODISCARD std::string* release_workspace_id();
  void set_allocated_workspace_id(std::string* workspace_id);
  private:
  const std::string& _internal_workspace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workspace_id(const std::string& value);
  std::string* _internal_mutable_workspace_id();
  public:

  // .safeheron.proto.multi_party_ecdsa.gg18.Party local_party = 5;
  bool has_local_party() const;
  private:
  bool _internal_has_local_party() const;
  public:
  void clear_local_party();
  const ::safeheron::proto::multi_party_ecdsa::gg18::Party& local_party() const;
  PROTOBUF_NODISCARD ::safeheron::proto::multi_party_ecdsa::gg18::Party* release_local_party();
  ::safeheron::proto::multi_party_ecdsa::gg18::Party* mutable_local_party();
  void set_allocated_local_party(::safeheron::proto::multi_party_ecdsa::gg18::Party* local_party);
  private:
  const ::safeheron::proto::multi_party_ecdsa::gg18::Party& _internal_local_party() const;
  ::safeheron::proto::multi_party_ecdsa::gg18::Party* _internal_mutable_local_party();
  public:
  void unsafe_arena_set_allocated_local_party(
      ::safeheron::proto::multi_party_ecdsa::gg18::Party* local_party);
  ::safeheron::proto::multi_party_ecdsa::gg18::Party* unsafe_arena_release_local_party();

  // .safeheron.proto.CurvePoint g_x = 7;
  bool has_g_x() const;
  private:
  bool _internal_has_g_x() const;
  public:
  void clear_g_x();
  const ::safeheron::proto::CurvePoint& g_x() const;
  PROTOBUF_NODISCARD ::safeheron::proto::CurvePoint* release_g_x();
  ::safeheron::proto::CurvePoint* mutable_g_x();
  void set_allocated_g_x(::safeheron::proto::CurvePoint* g_x);
  private:
  const ::safeheron::proto::CurvePoint& _internal_g_x() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_g_x();
  public:
  void unsafe_arena_set_allocated_g_x(
      ::safeheron::proto::CurvePoint* g_x);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_g_x();

  // int32 threshold = 2;
  void clear_threshold();
  int32_t threshold() const;
  void set_threshold(int32_t value);
  private:
  int32_t _internal_threshold() const;
  void _internal_set_threshold(int32_t value);
  public:

  // int32 n_parties = 3;
  void clear_n_parties();
  int32_t n_parties() const;
  void set_n_parties(int32_t value);
  private:
  int32_t _internal_n_parties() const;
  void _internal_set_n_parties(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.gg18.SignKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::gg18::Party > remote_parties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workspace_id_;
  ::safeheron::proto::multi_party_ecdsa::gg18::Party* local_party_;
  ::safeheron::proto::CurvePoint* g_x_;
  int32_t threshold_;
  int32_t n_parties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gg18_2fstruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Party

// string party_id = 1;
inline void Party::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& Party::party_id() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.Party.party_id)
  return _internal_party_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Party::set_party_id(ArgT0&& arg0, ArgT... args) {
 
 party_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.Party.party_id)
}
inline std::string* Party::mutable_party_id() {
  std::string* _s = _internal_mutable_party_id();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.Party.party_id)
  return _s;
}
inline const std::string& Party::_internal_party_id() const {
  return party_id_.Get();
}
inline void Party::_internal_set_party_id(const std::string& value) {
  
  party_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Party::_internal_mutable_party_id() {
  
  return party_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Party::release_party_id() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.Party.party_id)
  return party_id_.Release();
}
inline void Party::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {
    
  } else {
    
  }
  party_id_.SetAllocated(party_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (party_id_.IsDefault()) {
    party_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.party_id)
}

// string index = 3;
inline void Party::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Party::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.Party.index)
  return _internal_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Party::set_index(ArgT0&& arg0, ArgT... args) {
 
 index_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.Party.index)
}
inline std::string* Party::mutable_index() {
  std::string* _s = _internal_mutable_index();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.Party.index)
  return _s;
}
inline const std::string& Party::_internal_index() const {
  return index_.Get();
}
inline void Party::_internal_set_index(const std::string& value) {
  
  index_.Set(value, GetArenaForAllocation());
}
inline std::string* Party::_internal_mutable_index() {
  
  return index_.Mutable(GetArenaForAllocation());
}
inline std::string* Party::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.Party.index)
  return index_.Release();
}
inline void Party::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(index, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (index_.IsDefault()) {
    index_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.index)
}

// .safeheron.proto.PailPriv pail_priv = 6;
inline bool Party::_internal_has_pail_priv() const {
  return this != internal_default_instance() && pail_priv_ != nullptr;
}
inline bool Party::has_pail_priv() const {
  return _internal_has_pail_priv();
}
inline const ::safeheron::proto::PailPriv& Party::_internal_pail_priv() const {
  const ::safeheron::proto::PailPriv* p = pail_priv_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::PailPriv&>(
      ::safeheron::proto::_PailPriv_default_instance_);
}
inline const ::safeheron::proto::PailPriv& Party::pail_priv() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.Party.pail_priv)
  return _internal_pail_priv();
}
inline void Party::unsafe_arena_set_allocated_pail_priv(
    ::safeheron::proto::PailPriv* pail_priv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_priv_);
  }
  pail_priv_ = pail_priv;
  if (pail_priv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.pail_priv)
}
inline ::safeheron::proto::PailPriv* Party::release_pail_priv() {
  
  ::safeheron::proto::PailPriv* temp = pail_priv_;
  pail_priv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::PailPriv* Party::unsafe_arena_release_pail_priv() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.Party.pail_priv)
  
  ::safeheron::proto::PailPriv* temp = pail_priv_;
  pail_priv_ = nullptr;
  return temp;
}
inline ::safeheron::proto::PailPriv* Party::_internal_mutable_pail_priv() {
  
  if (pail_priv_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::PailPriv>(GetArenaForAllocation());
    pail_priv_ = p;
  }
  return pail_priv_;
}
inline ::safeheron::proto::PailPriv* Party::mutable_pail_priv() {
  ::safeheron::proto::PailPriv* _msg = _internal_mutable_pail_priv();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.Party.pail_priv)
  return _msg;
}
inline void Party::set_allocated_pail_priv(::safeheron::proto::PailPriv* pail_priv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_priv_);
  }
  if (pail_priv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_priv));
    if (message_arena != submessage_arena) {
      pail_priv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pail_priv, submessage_arena);
    }
    
  } else {
    
  }
  pail_priv_ = pail_priv;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.pail_priv)
}

// .safeheron.proto.PailPub pail_pub = 7;
inline bool Party::_internal_has_pail_pub() const {
  return this != internal_default_instance() && pail_pub_ != nullptr;
}
inline bool Party::has_pail_pub() const {
  return _internal_has_pail_pub();
}
inline const ::safeheron::proto::PailPub& Party::_internal_pail_pub() const {
  const ::safeheron::proto::PailPub* p = pail_pub_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::PailPub&>(
      ::safeheron::proto::_PailPub_default_instance_);
}
inline const ::safeheron::proto::PailPub& Party::pail_pub() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.Party.pail_pub)
  return _internal_pail_pub();
}
inline void Party::unsafe_arena_set_allocated_pail_pub(
    ::safeheron::proto::PailPub* pail_pub) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_pub_);
  }
  pail_pub_ = pail_pub;
  if (pail_pub) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.pail_pub)
}
inline ::safeheron::proto::PailPub* Party::release_pail_pub() {
  
  ::safeheron::proto::PailPub* temp = pail_pub_;
  pail_pub_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::PailPub* Party::unsafe_arena_release_pail_pub() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.Party.pail_pub)
  
  ::safeheron::proto::PailPub* temp = pail_pub_;
  pail_pub_ = nullptr;
  return temp;
}
inline ::safeheron::proto::PailPub* Party::_internal_mutable_pail_pub() {
  
  if (pail_pub_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::PailPub>(GetArenaForAllocation());
    pail_pub_ = p;
  }
  return pail_pub_;
}
inline ::safeheron::proto::PailPub* Party::mutable_pail_pub() {
  ::safeheron::proto::PailPub* _msg = _internal_mutable_pail_pub();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.Party.pail_pub)
  return _msg;
}
inline void Party::set_allocated_pail_pub(::safeheron::proto::PailPub* pail_pub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_pub_);
  }
  if (pail_pub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_pub));
    if (message_arena != submessage_arena) {
      pail_pub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pail_pub, submessage_arena);
    }
    
  } else {
    
  }
  pail_pub_ = pail_pub;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.pail_pub)
}

// string x = 8;
inline void Party::clear_x() {
  x_.ClearToEmpty();
}
inline const std::string& Party::x() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.Party.x)
  return _internal_x();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Party::set_x(ArgT0&& arg0, ArgT... args) {
 
 x_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.Party.x)
}
inline std::string* Party::mutable_x() {
  std::string* _s = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.Party.x)
  return _s;
}
inline const std::string& Party::_internal_x() const {
  return x_.Get();
}
inline void Party::_internal_set_x(const std::string& value) {
  
  x_.Set(value, GetArenaForAllocation());
}
inline std::string* Party::_internal_mutable_x() {
  
  return x_.Mutable(GetArenaForAllocation());
}
inline std::string* Party::release_x() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.Party.x)
  return x_.Release();
}
inline void Party::set_allocated_x(std::string* x) {
  if (x != nullptr) {
    
  } else {
    
  }
  x_.SetAllocated(x, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_.IsDefault()) {
    x_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.x)
}

// .safeheron.proto.CurvePoint g_x = 9;
inline bool Party::_internal_has_g_x() const {
  return this != internal_default_instance() && g_x_ != nullptr;
}
inline bool Party::has_g_x() const {
  return _internal_has_g_x();
}
inline const ::safeheron::proto::CurvePoint& Party::_internal_g_x() const {
  const ::safeheron::proto::CurvePoint* p = g_x_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Party::g_x() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.Party.g_x)
  return _internal_g_x();
}
inline void Party::unsafe_arena_set_allocated_g_x(
    ::safeheron::proto::CurvePoint* g_x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x_);
  }
  g_x_ = g_x;
  if (g_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.g_x)
}
inline ::safeheron::proto::CurvePoint* Party::release_g_x() {
  
  ::safeheron::proto::CurvePoint* temp = g_x_;
  g_x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::CurvePoint* Party::unsafe_arena_release_g_x() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.Party.g_x)
  
  ::safeheron::proto::CurvePoint* temp = g_x_;
  g_x_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Party::_internal_mutable_g_x() {
  
  if (g_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArenaForAllocation());
    g_x_ = p;
  }
  return g_x_;
}
inline ::safeheron::proto::CurvePoint* Party::mutable_g_x() {
  ::safeheron::proto::CurvePoint* _msg = _internal_mutable_g_x();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.Party.g_x)
  return _msg;
}
inline void Party::set_allocated_g_x(::safeheron::proto::CurvePoint* g_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x_);
  }
  if (g_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x));
    if (message_arena != submessage_arena) {
      g_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g_x, submessage_arena);
    }
    
  } else {
    
  }
  g_x_ = g_x;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.g_x)
}

// string N_tilde = 10;
inline void Party::clear_n_tilde() {
  n_tilde_.ClearToEmpty();
}
inline const std::string& Party::n_tilde() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.Party.N_tilde)
  return _internal_n_tilde();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Party::set_n_tilde(ArgT0&& arg0, ArgT... args) {
 
 n_tilde_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.Party.N_tilde)
}
inline std::string* Party::mutable_n_tilde() {
  std::string* _s = _internal_mutable_n_tilde();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.Party.N_tilde)
  return _s;
}
inline const std::string& Party::_internal_n_tilde() const {
  return n_tilde_.Get();
}
inline void Party::_internal_set_n_tilde(const std::string& value) {
  
  n_tilde_.Set(value, GetArenaForAllocation());
}
inline std::string* Party::_internal_mutable_n_tilde() {
  
  return n_tilde_.Mutable(GetArenaForAllocation());
}
inline std::string* Party::release_n_tilde() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.Party.N_tilde)
  return n_tilde_.Release();
}
inline void Party::set_allocated_n_tilde(std::string* n_tilde) {
  if (n_tilde != nullptr) {
    
  } else {
    
  }
  n_tilde_.SetAllocated(n_tilde, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (n_tilde_.IsDefault()) {
    n_tilde_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.N_tilde)
}

// string p = 11;
inline void Party::clear_p() {
  p_.ClearToEmpty();
}
inline const std::string& Party::p() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.Party.p)
  return _internal_p();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Party::set_p(ArgT0&& arg0, ArgT... args) {
 
 p_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.Party.p)
}
inline std::string* Party::mutable_p() {
  std::string* _s = _internal_mutable_p();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.Party.p)
  return _s;
}
inline const std::string& Party::_internal_p() const {
  return p_.Get();
}
inline void Party::_internal_set_p(const std::string& value) {
  
  p_.Set(value, GetArenaForAllocation());
}
inline std::string* Party::_internal_mutable_p() {
  
  return p_.Mutable(GetArenaForAllocation());
}
inline std::string* Party::release_p() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.Party.p)
  return p_.Release();
}
inline void Party::set_allocated_p(std::string* p) {
  if (p != nullptr) {
    
  } else {
    
  }
  p_.SetAllocated(p, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (p_.IsDefault()) {
    p_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.p)
}

// string q = 12;
inline void Party::clear_q() {
  q_.ClearToEmpty();
}
inline const std::string& Party::q() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.Party.q)
  return _internal_q();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Party::set_q(ArgT0&& arg0, ArgT... args) {
 
 q_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.Party.q)
}
inline std::string* Party::mutable_q() {
  std::string* _s = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.Party.q)
  return _s;
}
inline const std::string& Party::_internal_q() const {
  return q_.Get();
}
inline void Party::_internal_set_q(const std::string& value) {
  
  q_.Set(value, GetArenaForAllocation());
}
inline std::string* Party::_internal_mutable_q() {
  
  return q_.Mutable(GetArenaForAllocation());
}
inline std::string* Party::release_q() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.Party.q)
  return q_.Release();
}
inline void Party::set_allocated_q(std::string* q) {
  if (q != nullptr) {
    
  } else {
    
  }
  q_.SetAllocated(q, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (q_.IsDefault()) {
    q_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.q)
}

// string h1 = 13;
inline void Party::clear_h1() {
  h1_.ClearToEmpty();
}
inline const std::string& Party::h1() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.Party.h1)
  return _internal_h1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Party::set_h1(ArgT0&& arg0, ArgT... args) {
 
 h1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.Party.h1)
}
inline std::string* Party::mutable_h1() {
  std::string* _s = _internal_mutable_h1();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.Party.h1)
  return _s;
}
inline const std::string& Party::_internal_h1() const {
  return h1_.Get();
}
inline void Party::_internal_set_h1(const std::string& value) {
  
  h1_.Set(value, GetArenaForAllocation());
}
inline std::string* Party::_internal_mutable_h1() {
  
  return h1_.Mutable(GetArenaForAllocation());
}
inline std::string* Party::release_h1() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.Party.h1)
  return h1_.Release();
}
inline void Party::set_allocated_h1(std::string* h1) {
  if (h1 != nullptr) {
    
  } else {
    
  }
  h1_.SetAllocated(h1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (h1_.IsDefault()) {
    h1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.h1)
}

// string h2 = 14;
inline void Party::clear_h2() {
  h2_.ClearToEmpty();
}
inline const std::string& Party::h2() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.Party.h2)
  return _internal_h2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Party::set_h2(ArgT0&& arg0, ArgT... args) {
 
 h2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.Party.h2)
}
inline std::string* Party::mutable_h2() {
  std::string* _s = _internal_mutable_h2();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.Party.h2)
  return _s;
}
inline const std::string& Party::_internal_h2() const {
  return h2_.Get();
}
inline void Party::_internal_set_h2(const std::string& value) {
  
  h2_.Set(value, GetArenaForAllocation());
}
inline std::string* Party::_internal_mutable_h2() {
  
  return h2_.Mutable(GetArenaForAllocation());
}
inline std::string* Party::release_h2() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.Party.h2)
  return h2_.Release();
}
inline void Party::set_allocated_h2(std::string* h2) {
  if (h2 != nullptr) {
    
  } else {
    
  }
  h2_.SetAllocated(h2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (h2_.IsDefault()) {
    h2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.h2)
}

// string alpha = 15;
inline void Party::clear_alpha() {
  alpha_.ClearToEmpty();
}
inline const std::string& Party::alpha() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.Party.alpha)
  return _internal_alpha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Party::set_alpha(ArgT0&& arg0, ArgT... args) {
 
 alpha_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.Party.alpha)
}
inline std::string* Party::mutable_alpha() {
  std::string* _s = _internal_mutable_alpha();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.Party.alpha)
  return _s;
}
inline const std::string& Party::_internal_alpha() const {
  return alpha_.Get();
}
inline void Party::_internal_set_alpha(const std::string& value) {
  
  alpha_.Set(value, GetArenaForAllocation());
}
inline std::string* Party::_internal_mutable_alpha() {
  
  return alpha_.Mutable(GetArenaForAllocation());
}
inline std::string* Party::release_alpha() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.Party.alpha)
  return alpha_.Release();
}
inline void Party::set_allocated_alpha(std::string* alpha) {
  if (alpha != nullptr) {
    
  } else {
    
  }
  alpha_.SetAllocated(alpha, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (alpha_.IsDefault()) {
    alpha_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.alpha)
}

// string beta = 16;
inline void Party::clear_beta() {
  beta_.ClearToEmpty();
}
inline const std::string& Party::beta() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.Party.beta)
  return _internal_beta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Party::set_beta(ArgT0&& arg0, ArgT... args) {
 
 beta_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.Party.beta)
}
inline std::string* Party::mutable_beta() {
  std::string* _s = _internal_mutable_beta();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.Party.beta)
  return _s;
}
inline const std::string& Party::_internal_beta() const {
  return beta_.Get();
}
inline void Party::_internal_set_beta(const std::string& value) {
  
  beta_.Set(value, GetArenaForAllocation());
}
inline std::string* Party::_internal_mutable_beta() {
  
  return beta_.Mutable(GetArenaForAllocation());
}
inline std::string* Party::release_beta() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.Party.beta)
  return beta_.Release();
}
inline void Party::set_allocated_beta(std::string* beta) {
  if (beta != nullptr) {
    
  } else {
    
  }
  beta_.SetAllocated(beta, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (beta_.IsDefault()) {
    beta_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.Party.beta)
}

// -------------------------------------------------------------------

// SignKey

// string workspace_id = 1;
inline void SignKey::clear_workspace_id() {
  workspace_id_.ClearToEmpty();
}
inline const std::string& SignKey::workspace_id() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.SignKey.workspace_id)
  return _internal_workspace_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignKey::set_workspace_id(ArgT0&& arg0, ArgT... args) {
 
 workspace_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.SignKey.workspace_id)
}
inline std::string* SignKey::mutable_workspace_id() {
  std::string* _s = _internal_mutable_workspace_id();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.SignKey.workspace_id)
  return _s;
}
inline const std::string& SignKey::_internal_workspace_id() const {
  return workspace_id_.Get();
}
inline void SignKey::_internal_set_workspace_id(const std::string& value) {
  
  workspace_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SignKey::_internal_mutable_workspace_id() {
  
  return workspace_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SignKey::release_workspace_id() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.SignKey.workspace_id)
  return workspace_id_.Release();
}
inline void SignKey::set_allocated_workspace_id(std::string* workspace_id) {
  if (workspace_id != nullptr) {
    
  } else {
    
  }
  workspace_id_.SetAllocated(workspace_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workspace_id_.IsDefault()) {
    workspace_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.SignKey.workspace_id)
}

// int32 threshold = 2;
inline void SignKey::clear_threshold() {
  threshold_ = 0;
}
inline int32_t SignKey::_internal_threshold() const {
  return threshold_;
}
inline int32_t SignKey::threshold() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.SignKey.threshold)
  return _internal_threshold();
}
inline void SignKey::_internal_set_threshold(int32_t value) {
  
  threshold_ = value;
}
inline void SignKey::set_threshold(int32_t value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.SignKey.threshold)
}

// int32 n_parties = 3;
inline void SignKey::clear_n_parties() {
  n_parties_ = 0;
}
inline int32_t SignKey::_internal_n_parties() const {
  return n_parties_;
}
inline int32_t SignKey::n_parties() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.SignKey.n_parties)
  return _internal_n_parties();
}
inline void SignKey::_internal_set_n_parties(int32_t value) {
  
  n_parties_ = value;
}
inline void SignKey::set_n_parties(int32_t value) {
  _internal_set_n_parties(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.SignKey.n_parties)
}

// .safeheron.proto.multi_party_ecdsa.gg18.Party local_party = 5;
inline bool SignKey::_internal_has_local_party() const {
  return this != internal_default_instance() && local_party_ != nullptr;
}
inline bool SignKey::has_local_party() const {
  return _internal_has_local_party();
}
inline void SignKey::clear_local_party() {
  if (GetArenaForAllocation() == nullptr && local_party_ != nullptr) {
    delete local_party_;
  }
  local_party_ = nullptr;
}
inline const ::safeheron::proto::multi_party_ecdsa::gg18::Party& SignKey::_internal_local_party() const {
  const ::safeheron::proto::multi_party_ecdsa::gg18::Party* p = local_party_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::multi_party_ecdsa::gg18::Party&>(
      ::safeheron::proto::multi_party_ecdsa::gg18::_Party_default_instance_);
}
inline const ::safeheron::proto::multi_party_ecdsa::gg18::Party& SignKey::local_party() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.SignKey.local_party)
  return _internal_local_party();
}
inline void SignKey::unsafe_arena_set_allocated_local_party(
    ::safeheron::proto::multi_party_ecdsa::gg18::Party* local_party) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_party_);
  }
  local_party_ = local_party;
  if (local_party) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.SignKey.local_party)
}
inline ::safeheron::proto::multi_party_ecdsa::gg18::Party* SignKey::release_local_party() {
  
  ::safeheron::proto::multi_party_ecdsa::gg18::Party* temp = local_party_;
  local_party_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::multi_party_ecdsa::gg18::Party* SignKey::unsafe_arena_release_local_party() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.SignKey.local_party)
  
  ::safeheron::proto::multi_party_ecdsa::gg18::Party* temp = local_party_;
  local_party_ = nullptr;
  return temp;
}
inline ::safeheron::proto::multi_party_ecdsa::gg18::Party* SignKey::_internal_mutable_local_party() {
  
  if (local_party_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::gg18::Party>(GetArenaForAllocation());
    local_party_ = p;
  }
  return local_party_;
}
inline ::safeheron::proto::multi_party_ecdsa::gg18::Party* SignKey::mutable_local_party() {
  ::safeheron::proto::multi_party_ecdsa::gg18::Party* _msg = _internal_mutable_local_party();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.SignKey.local_party)
  return _msg;
}
inline void SignKey::set_allocated_local_party(::safeheron::proto::multi_party_ecdsa::gg18::Party* local_party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete local_party_;
  }
  if (local_party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(local_party);
    if (message_arena != submessage_arena) {
      local_party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_party, submessage_arena);
    }
    
  } else {
    
  }
  local_party_ = local_party;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.SignKey.local_party)
}

// repeated .safeheron.proto.multi_party_ecdsa.gg18.Party remote_parties = 6;
inline int SignKey::_internal_remote_parties_size() const {
  return remote_parties_.size();
}
inline int SignKey::remote_parties_size() const {
  return _internal_remote_parties_size();
}
inline void SignKey::clear_remote_parties() {
  remote_parties_.Clear();
}
inline ::safeheron::proto::multi_party_ecdsa::gg18::Party* SignKey::mutable_remote_parties(int index) {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.SignKey.remote_parties)
  return remote_parties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::gg18::Party >*
SignKey::mutable_remote_parties() {
  // @@protoc_insertion_point(field_mutable_list:safeheron.proto.multi_party_ecdsa.gg18.SignKey.remote_parties)
  return &remote_parties_;
}
inline const ::safeheron::proto::multi_party_ecdsa::gg18::Party& SignKey::_internal_remote_parties(int index) const {
  return remote_parties_.Get(index);
}
inline const ::safeheron::proto::multi_party_ecdsa::gg18::Party& SignKey::remote_parties(int index) const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.SignKey.remote_parties)
  return _internal_remote_parties(index);
}
inline ::safeheron::proto::multi_party_ecdsa::gg18::Party* SignKey::_internal_add_remote_parties() {
  return remote_parties_.Add();
}
inline ::safeheron::proto::multi_party_ecdsa::gg18::Party* SignKey::add_remote_parties() {
  ::safeheron::proto::multi_party_ecdsa::gg18::Party* _add = _internal_add_remote_parties();
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.gg18.SignKey.remote_parties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::gg18::Party >&
SignKey::remote_parties() const {
  // @@protoc_insertion_point(field_list:safeheron.proto.multi_party_ecdsa.gg18.SignKey.remote_parties)
  return remote_parties_;
}

// .safeheron.proto.CurvePoint g_x = 7;
inline bool SignKey::_internal_has_g_x() const {
  return this != internal_default_instance() && g_x_ != nullptr;
}
inline bool SignKey::has_g_x() const {
  return _internal_has_g_x();
}
inline const ::safeheron::proto::CurvePoint& SignKey::_internal_g_x() const {
  const ::safeheron::proto::CurvePoint* p = g_x_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& SignKey::g_x() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.SignKey.g_x)
  return _internal_g_x();
}
inline void SignKey::unsafe_arena_set_allocated_g_x(
    ::safeheron::proto::CurvePoint* g_x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x_);
  }
  g_x_ = g_x;
  if (g_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.SignKey.g_x)
}
inline ::safeheron::proto::CurvePoint* SignKey::release_g_x() {
  
  ::safeheron::proto::CurvePoint* temp = g_x_;
  g_x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::CurvePoint* SignKey::unsafe_arena_release_g_x() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.SignKey.g_x)
  
  ::safeheron::proto::CurvePoint* temp = g_x_;
  g_x_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* SignKey::_internal_mutable_g_x() {
  
  if (g_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArenaForAllocation());
    g_x_ = p;
  }
  return g_x_;
}
inline ::safeheron::proto::CurvePoint* SignKey::mutable_g_x() {
  ::safeheron::proto::CurvePoint* _msg = _internal_mutable_g_x();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.SignKey.g_x)
  return _msg;
}
inline void SignKey::set_allocated_g_x(::safeheron::proto::CurvePoint* g_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x_);
  }
  if (g_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x));
    if (message_arena != submessage_arena) {
      g_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g_x, submessage_arena);
    }
    
  } else {
    
  }
  g_x_ = g_x;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.SignKey.g_x)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gg18
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gg18_2fstruct_2eproto
