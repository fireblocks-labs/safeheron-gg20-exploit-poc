// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gg18/struct.proto

#include "struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg18 {
PROTOBUF_CONSTEXPR Party::Party(
    ::_pbi::ConstantInitialized)
  : party_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , x_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , n_tilde_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , p_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , q_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , h1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , h2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , alpha_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , beta_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pail_priv_(nullptr)
  , pail_pub_(nullptr)
  , g_x_(nullptr){}
struct PartyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartyDefaultTypeInternal() {}
  union {
    Party _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartyDefaultTypeInternal _Party_default_instance_;
PROTOBUF_CONSTEXPR SignKey::SignKey(
    ::_pbi::ConstantInitialized)
  : remote_parties_()
  , workspace_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , local_party_(nullptr)
  , g_x_(nullptr)
  , threshold_(0)
  , n_parties_(0){}
struct SignKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignKeyDefaultTypeInternal() {}
  union {
    SignKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignKeyDefaultTypeInternal _SignKey_default_instance_;
}  // namespace gg18
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
static ::_pb::Metadata file_level_metadata_gg18_2fstruct_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_gg18_2fstruct_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gg18_2fstruct_2eproto = nullptr;

const uint32_t TableStruct_gg18_2fstruct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::Party, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::Party, party_id_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::Party, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::Party, pail_priv_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::Party, pail_pub_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::Party, x_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::Party, g_x_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::Party, n_tilde_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::Party, p_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::Party, q_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::Party, h1_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::Party, h2_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::Party, alpha_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::Party, beta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::SignKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::SignKey, workspace_id_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::SignKey, threshold_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::SignKey, n_parties_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::SignKey, local_party_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::SignKey, remote_parties_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::SignKey, g_x_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg18::Party)},
  { 19, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg18::SignKey)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::safeheron::proto::multi_party_ecdsa::gg18::_Party_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::gg18::_SignKey_default_instance_._instance,
};

const char descriptor_table_protodef_gg18_2fstruct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021gg18/struct.proto\022&safeheron.proto.mul"
  "ti_party_ecdsa.gg18\032\021curve_point.proto\032\016"
  "paillier.proto\"\223\002\n\005Party\022\020\n\010party_id\030\001 \001"
  "(\t\022\r\n\005index\030\003 \001(\t\022,\n\tpail_priv\030\006 \001(\0132\031.s"
  "afeheron.proto.PailPriv\022*\n\010pail_pub\030\007 \001("
  "\0132\030.safeheron.proto.PailPub\022\t\n\001x\030\010 \001(\t\022("
  "\n\003g_x\030\t \001(\0132\033.safeheron.proto.CurvePoint"
  "\022\017\n\007N_tilde\030\n \001(\t\022\t\n\001p\030\013 \001(\t\022\t\n\001q\030\014 \001(\t\022"
  "\n\n\002h1\030\r \001(\t\022\n\n\002h2\030\016 \001(\t\022\r\n\005alpha\030\017 \001(\t\022\014"
  "\n\004beta\030\020 \001(\t\"\372\001\n\007SignKey\022\024\n\014workspace_id"
  "\030\001 \001(\t\022\021\n\tthreshold\030\002 \001(\005\022\021\n\tn_parties\030\003"
  " \001(\005\022B\n\013local_party\030\005 \001(\0132-.safeheron.pr"
  "oto.multi_party_ecdsa.gg18.Party\022E\n\016remo"
  "te_parties\030\006 \003(\0132-.safeheron.proto.multi"
  "_party_ecdsa.gg18.Party\022(\n\003g_x\030\007 \001(\0132\033.s"
  "afeheron.proto.CurvePointb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_gg18_2fstruct_2eproto_deps[2] = {
  &::descriptor_table_curve_5fpoint_2eproto,
  &::descriptor_table_paillier_2eproto,
};
static ::_pbi::once_flag descriptor_table_gg18_2fstruct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gg18_2fstruct_2eproto = {
    false, false, 633, descriptor_table_protodef_gg18_2fstruct_2eproto,
    "gg18/struct.proto",
    &descriptor_table_gg18_2fstruct_2eproto_once, descriptor_table_gg18_2fstruct_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_gg18_2fstruct_2eproto::offsets,
    file_level_metadata_gg18_2fstruct_2eproto, file_level_enum_descriptors_gg18_2fstruct_2eproto,
    file_level_service_descriptors_gg18_2fstruct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gg18_2fstruct_2eproto_getter() {
  return &descriptor_table_gg18_2fstruct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gg18_2fstruct_2eproto(&descriptor_table_gg18_2fstruct_2eproto);
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg18 {

// ===================================================================

class Party::_Internal {
 public:
  static const ::safeheron::proto::PailPriv& pail_priv(const Party* msg);
  static const ::safeheron::proto::PailPub& pail_pub(const Party* msg);
  static const ::safeheron::proto::CurvePoint& g_x(const Party* msg);
};

const ::safeheron::proto::PailPriv&
Party::_Internal::pail_priv(const Party* msg) {
  return *msg->pail_priv_;
}
const ::safeheron::proto::PailPub&
Party::_Internal::pail_pub(const Party* msg) {
  return *msg->pail_pub_;
}
const ::safeheron::proto::CurvePoint&
Party::_Internal::g_x(const Party* msg) {
  return *msg->g_x_;
}
void Party::clear_pail_priv() {
  if (GetArenaForAllocation() == nullptr && pail_priv_ != nullptr) {
    delete pail_priv_;
  }
  pail_priv_ = nullptr;
}
void Party::clear_pail_pub() {
  if (GetArenaForAllocation() == nullptr && pail_pub_ != nullptr) {
    delete pail_pub_;
  }
  pail_pub_ = nullptr;
}
void Party::clear_g_x() {
  if (GetArenaForAllocation() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
}
Party::Party(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg18.Party)
}
Party::Party(const Party& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    party_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_party_id().empty()) {
    party_id_.Set(from._internal_party_id(), 
      GetArenaForAllocation());
  }
  index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    index_.Set(from._internal_index(), 
      GetArenaForAllocation());
  }
  x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    x_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x().empty()) {
    x_.Set(from._internal_x(), 
      GetArenaForAllocation());
  }
  n_tilde_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    n_tilde_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_n_tilde().empty()) {
    n_tilde_.Set(from._internal_n_tilde(), 
      GetArenaForAllocation());
  }
  p_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    p_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_p().empty()) {
    p_.Set(from._internal_p(), 
      GetArenaForAllocation());
  }
  q_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    q_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_q().empty()) {
    q_.Set(from._internal_q(), 
      GetArenaForAllocation());
  }
  h1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    h1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_h1().empty()) {
    h1_.Set(from._internal_h1(), 
      GetArenaForAllocation());
  }
  h2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    h2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_h2().empty()) {
    h2_.Set(from._internal_h2(), 
      GetArenaForAllocation());
  }
  alpha_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    alpha_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alpha().empty()) {
    alpha_.Set(from._internal_alpha(), 
      GetArenaForAllocation());
  }
  beta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    beta_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_beta().empty()) {
    beta_.Set(from._internal_beta(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pail_priv()) {
    pail_priv_ = new ::safeheron::proto::PailPriv(*from.pail_priv_);
  } else {
    pail_priv_ = nullptr;
  }
  if (from._internal_has_pail_pub()) {
    pail_pub_ = new ::safeheron::proto::PailPub(*from.pail_pub_);
  } else {
    pail_pub_ = nullptr;
  }
  if (from._internal_has_g_x()) {
    g_x_ = new ::safeheron::proto::CurvePoint(*from.g_x_);
  } else {
    g_x_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg18.Party)
}

inline void Party::SharedCtor() {
party_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  party_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
x_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  x_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
n_tilde_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  n_tilde_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
p_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  p_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
q_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  q_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
h1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  h1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
h2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  h2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
alpha_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  alpha_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
beta_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  beta_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pail_priv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&g_x_) -
    reinterpret_cast<char*>(&pail_priv_)) + sizeof(g_x_));
}

Party::~Party() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg18.Party)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Party::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  party_id_.Destroy();
  index_.Destroy();
  x_.Destroy();
  n_tilde_.Destroy();
  p_.Destroy();
  q_.Destroy();
  h1_.Destroy();
  h2_.Destroy();
  alpha_.Destroy();
  beta_.Destroy();
  if (this != internal_default_instance()) delete pail_priv_;
  if (this != internal_default_instance()) delete pail_pub_;
  if (this != internal_default_instance()) delete g_x_;
}

void Party::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Party::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg18.Party)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  index_.ClearToEmpty();
  x_.ClearToEmpty();
  n_tilde_.ClearToEmpty();
  p_.ClearToEmpty();
  q_.ClearToEmpty();
  h1_.ClearToEmpty();
  h2_.ClearToEmpty();
  alpha_.ClearToEmpty();
  beta_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pail_priv_ != nullptr) {
    delete pail_priv_;
  }
  pail_priv_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pail_pub_ != nullptr) {
    delete pail_pub_;
  }
  pail_pub_ = nullptr;
  if (GetArenaForAllocation() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Party::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.Party.party_id"));
        } else
          goto handle_unusual;
        continue;
      // string index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.Party.index"));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.PailPriv pail_priv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pail_priv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.PailPub pail_pub = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pail_pub(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_x();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.Party.x"));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint g_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_x(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string N_tilde = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_n_tilde();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.Party.N_tilde"));
        } else
          goto handle_unusual;
        continue;
      // string p = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_p();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.Party.p"));
        } else
          goto handle_unusual;
        continue;
      // string q = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_q();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.Party.q"));
        } else
          goto handle_unusual;
        continue;
      // string h1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_h1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.Party.h1"));
        } else
          goto handle_unusual;
        continue;
      // string h2 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_h2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.Party.h2"));
        } else
          goto handle_unusual;
        continue;
      // string alpha = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_alpha();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.Party.alpha"));
        } else
          goto handle_unusual;
        continue;
      // string beta = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_beta();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.Party.beta"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Party::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg18.Party)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (!this->_internal_party_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.Party.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // string index = 3;
  if (!this->_internal_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.Party.index");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_index(), target);
  }

  // .safeheron.proto.PailPriv pail_priv = 6;
  if (this->_internal_has_pail_priv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::pail_priv(this),
        _Internal::pail_priv(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.PailPub pail_pub = 7;
  if (this->_internal_has_pail_pub()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::pail_pub(this),
        _Internal::pail_pub(this).GetCachedSize(), target, stream);
  }

  // string x = 8;
  if (!this->_internal_x().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x().data(), static_cast<int>(this->_internal_x().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.Party.x");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_x(), target);
  }

  // .safeheron.proto.CurvePoint g_x = 9;
  if (this->_internal_has_g_x()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::g_x(this),
        _Internal::g_x(this).GetCachedSize(), target, stream);
  }

  // string N_tilde = 10;
  if (!this->_internal_n_tilde().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_n_tilde().data(), static_cast<int>(this->_internal_n_tilde().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.Party.N_tilde");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_n_tilde(), target);
  }

  // string p = 11;
  if (!this->_internal_p().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_p().data(), static_cast<int>(this->_internal_p().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.Party.p");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_p(), target);
  }

  // string q = 12;
  if (!this->_internal_q().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_q().data(), static_cast<int>(this->_internal_q().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.Party.q");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_q(), target);
  }

  // string h1 = 13;
  if (!this->_internal_h1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_h1().data(), static_cast<int>(this->_internal_h1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.Party.h1");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_h1(), target);
  }

  // string h2 = 14;
  if (!this->_internal_h2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_h2().data(), static_cast<int>(this->_internal_h2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.Party.h2");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_h2(), target);
  }

  // string alpha = 15;
  if (!this->_internal_alpha().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alpha().data(), static_cast<int>(this->_internal_alpha().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.Party.alpha");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_alpha(), target);
  }

  // string beta = 16;
  if (!this->_internal_beta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_beta().data(), static_cast<int>(this->_internal_beta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.Party.beta");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_beta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg18.Party)
  return target;
}

size_t Party::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg18.Party)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (!this->_internal_party_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string index = 3;
  if (!this->_internal_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string x = 8;
  if (!this->_internal_x().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x());
  }

  // string N_tilde = 10;
  if (!this->_internal_n_tilde().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_n_tilde());
  }

  // string p = 11;
  if (!this->_internal_p().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_p());
  }

  // string q = 12;
  if (!this->_internal_q().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_q());
  }

  // string h1 = 13;
  if (!this->_internal_h1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_h1());
  }

  // string h2 = 14;
  if (!this->_internal_h2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_h2());
  }

  // string alpha = 15;
  if (!this->_internal_alpha().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alpha());
  }

  // string beta = 16;
  if (!this->_internal_beta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_beta());
  }

  // .safeheron.proto.PailPriv pail_priv = 6;
  if (this->_internal_has_pail_priv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pail_priv_);
  }

  // .safeheron.proto.PailPub pail_pub = 7;
  if (this->_internal_has_pail_pub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pail_pub_);
  }

  // .safeheron.proto.CurvePoint g_x = 9;
  if (this->_internal_has_g_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_x_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Party::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Party::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Party::GetClassData() const { return &_class_data_; }

void Party::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Party *>(to)->MergeFrom(
      static_cast<const Party &>(from));
}


void Party::MergeFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.Party)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_party_id().empty()) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (!from._internal_index().empty()) {
    _internal_set_index(from._internal_index());
  }
  if (!from._internal_x().empty()) {
    _internal_set_x(from._internal_x());
  }
  if (!from._internal_n_tilde().empty()) {
    _internal_set_n_tilde(from._internal_n_tilde());
  }
  if (!from._internal_p().empty()) {
    _internal_set_p(from._internal_p());
  }
  if (!from._internal_q().empty()) {
    _internal_set_q(from._internal_q());
  }
  if (!from._internal_h1().empty()) {
    _internal_set_h1(from._internal_h1());
  }
  if (!from._internal_h2().empty()) {
    _internal_set_h2(from._internal_h2());
  }
  if (!from._internal_alpha().empty()) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!from._internal_beta().empty()) {
    _internal_set_beta(from._internal_beta());
  }
  if (from._internal_has_pail_priv()) {
    _internal_mutable_pail_priv()->::safeheron::proto::PailPriv::MergeFrom(from._internal_pail_priv());
  }
  if (from._internal_has_pail_pub()) {
    _internal_mutable_pail_pub()->::safeheron::proto::PailPub::MergeFrom(from._internal_pail_pub());
  }
  if (from._internal_has_g_x()) {
    _internal_mutable_g_x()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_g_x());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Party::CopyFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Party::IsInitialized() const {
  return true;
}

void Party::InternalSwap(Party* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &party_id_, lhs_arena,
      &other->party_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &index_, lhs_arena,
      &other->index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &x_, lhs_arena,
      &other->x_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &n_tilde_, lhs_arena,
      &other->n_tilde_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &p_, lhs_arena,
      &other->p_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &q_, lhs_arena,
      &other->q_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &h1_, lhs_arena,
      &other->h1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &h2_, lhs_arena,
      &other->h2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &alpha_, lhs_arena,
      &other->alpha_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &beta_, lhs_arena,
      &other->beta_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Party, g_x_)
      + sizeof(Party::g_x_)
      - PROTOBUF_FIELD_OFFSET(Party, pail_priv_)>(
          reinterpret_cast<char*>(&pail_priv_),
          reinterpret_cast<char*>(&other->pail_priv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Party::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg18_2fstruct_2eproto_getter, &descriptor_table_gg18_2fstruct_2eproto_once,
      file_level_metadata_gg18_2fstruct_2eproto[0]);
}

// ===================================================================

class SignKey::_Internal {
 public:
  static const ::safeheron::proto::multi_party_ecdsa::gg18::Party& local_party(const SignKey* msg);
  static const ::safeheron::proto::CurvePoint& g_x(const SignKey* msg);
};

const ::safeheron::proto::multi_party_ecdsa::gg18::Party&
SignKey::_Internal::local_party(const SignKey* msg) {
  return *msg->local_party_;
}
const ::safeheron::proto::CurvePoint&
SignKey::_Internal::g_x(const SignKey* msg) {
  return *msg->g_x_;
}
void SignKey::clear_g_x() {
  if (GetArenaForAllocation() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
}
SignKey::SignKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  remote_parties_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg18.SignKey)
}
SignKey::SignKey(const SignKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      remote_parties_(from.remote_parties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workspace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workspace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workspace_id().empty()) {
    workspace_id_.Set(from._internal_workspace_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_local_party()) {
    local_party_ = new ::safeheron::proto::multi_party_ecdsa::gg18::Party(*from.local_party_);
  } else {
    local_party_ = nullptr;
  }
  if (from._internal_has_g_x()) {
    g_x_ = new ::safeheron::proto::CurvePoint(*from.g_x_);
  } else {
    g_x_ = nullptr;
  }
  ::memcpy(&threshold_, &from.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_parties_) -
    reinterpret_cast<char*>(&threshold_)) + sizeof(n_parties_));
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg18.SignKey)
}

inline void SignKey::SharedCtor() {
workspace_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workspace_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&local_party_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&n_parties_) -
    reinterpret_cast<char*>(&local_party_)) + sizeof(n_parties_));
}

SignKey::~SignKey() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg18.SignKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workspace_id_.Destroy();
  if (this != internal_default_instance()) delete local_party_;
  if (this != internal_default_instance()) delete g_x_;
}

void SignKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignKey::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg18.SignKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_parties_.Clear();
  workspace_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && local_party_ != nullptr) {
    delete local_party_;
  }
  local_party_ = nullptr;
  if (GetArenaForAllocation() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
  ::memset(&threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_parties_) -
      reinterpret_cast<char*>(&threshold_)) + sizeof(n_parties_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string workspace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_workspace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.SignKey.workspace_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 n_parties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          n_parties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.multi_party_ecdsa.gg18.Party local_party = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_party(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safeheron.proto.multi_party_ecdsa.gg18.Party remote_parties = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remote_parties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint g_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_x(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg18.SignKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string workspace_id = 1;
  if (!this->_internal_workspace_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workspace_id().data(), static_cast<int>(this->_internal_workspace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.SignKey.workspace_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_workspace_id(), target);
  }

  // int32 threshold = 2;
  if (this->_internal_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_threshold(), target);
  }

  // int32 n_parties = 3;
  if (this->_internal_n_parties() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_n_parties(), target);
  }

  // .safeheron.proto.multi_party_ecdsa.gg18.Party local_party = 5;
  if (this->_internal_has_local_party()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::local_party(this),
        _Internal::local_party(this).GetCachedSize(), target, stream);
  }

  // repeated .safeheron.proto.multi_party_ecdsa.gg18.Party remote_parties = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remote_parties_size()); i < n; i++) {
    const auto& repfield = this->_internal_remote_parties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .safeheron.proto.CurvePoint g_x = 7;
  if (this->_internal_has_g_x()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::g_x(this),
        _Internal::g_x(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg18.SignKey)
  return target;
}

size_t SignKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg18.SignKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safeheron.proto.multi_party_ecdsa.gg18.Party remote_parties = 6;
  total_size += 1UL * this->_internal_remote_parties_size();
  for (const auto& msg : this->remote_parties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workspace_id = 1;
  if (!this->_internal_workspace_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workspace_id());
  }

  // .safeheron.proto.multi_party_ecdsa.gg18.Party local_party = 5;
  if (this->_internal_has_local_party()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_party_);
  }

  // .safeheron.proto.CurvePoint g_x = 7;
  if (this->_internal_has_g_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_x_);
  }

  // int32 threshold = 2;
  if (this->_internal_threshold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_threshold());
  }

  // int32 n_parties = 3;
  if (this->_internal_n_parties() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n_parties());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignKey::GetClassData() const { return &_class_data_; }

void SignKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignKey *>(to)->MergeFrom(
      static_cast<const SignKey &>(from));
}


void SignKey::MergeFrom(const SignKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.SignKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  remote_parties_.MergeFrom(from.remote_parties_);
  if (!from._internal_workspace_id().empty()) {
    _internal_set_workspace_id(from._internal_workspace_id());
  }
  if (from._internal_has_local_party()) {
    _internal_mutable_local_party()->::safeheron::proto::multi_party_ecdsa::gg18::Party::MergeFrom(from._internal_local_party());
  }
  if (from._internal_has_g_x()) {
    _internal_mutable_g_x()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_g_x());
  }
  if (from._internal_threshold() != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
  if (from._internal_n_parties() != 0) {
    _internal_set_n_parties(from._internal_n_parties());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignKey::CopyFrom(const SignKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.SignKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignKey::IsInitialized() const {
  return true;
}

void SignKey::InternalSwap(SignKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  remote_parties_.InternalSwap(&other->remote_parties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &workspace_id_, lhs_arena,
      &other->workspace_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignKey, n_parties_)
      + sizeof(SignKey::n_parties_)
      - PROTOBUF_FIELD_OFFSET(SignKey, local_party_)>(
          reinterpret_cast<char*>(&local_party_),
          reinterpret_cast<char*>(&other->local_party_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg18_2fstruct_2eproto_getter, &descriptor_table_gg18_2fstruct_2eproto_once,
      file_level_metadata_gg18_2fstruct_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gg18
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg18::Party*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg18::Party >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg18::Party >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg18::SignKey*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg18::SignKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg18::SignKey >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
