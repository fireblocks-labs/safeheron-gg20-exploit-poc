// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gg20/sign.proto

#include "sign.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_curve_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurvePoint_curve_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HEGProof_V3_zkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PailAffGroupEleRangeProof_V1_zkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PailAffRangeProof_zkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PailEncGroupEleRangeProof_zkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PailEncRangeProof_V1_zkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PedersenProof_zkp_2eproto;
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg20 {
namespace sign {
class Round0BCMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round0BCMessage> _instance;
} _Round0BCMessage_default_instance_;
class Round0P2PMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round0P2PMessage> _instance;
} _Round0P2PMessage_default_instance_;
class Round1P2PMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round1P2PMessage> _instance;
} _Round1P2PMessage_default_instance_;
class Round2BCMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round2BCMessage> _instance;
} _Round2BCMessage_default_instance_;
class Round3BCMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round3BCMessage> _instance;
} _Round3BCMessage_default_instance_;
class Round4BCMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round4BCMessage> _instance;
} _Round4BCMessage_default_instance_;
class Round4P2PMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round4P2PMessage> _instance;
} _Round4P2PMessage_default_instance_;
class Round5BCMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round5BCMessage> _instance;
} _Round5BCMessage_default_instance_;
class Round6BCMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round6BCMessage> _instance;
} _Round6BCMessage_default_instance_;
}  // namespace sign
}  // namespace gg20
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
static void InitDefaultsscc_info_Round0BCMessage_gg20_2fsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round0BCMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Round0BCMessage_gg20_2fsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Round0BCMessage_gg20_2fsign_2eproto}, {}};

static void InitDefaultsscc_info_Round0P2PMessage_gg20_2fsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round0P2PMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0P2PMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Round0P2PMessage_gg20_2fsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Round0P2PMessage_gg20_2fsign_2eproto}, {
      &scc_info_PailEncRangeProof_V1_zkp_2eproto.base,}};

static void InitDefaultsscc_info_Round1P2PMessage_gg20_2fsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round1P2PMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Round1P2PMessage_gg20_2fsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Round1P2PMessage_gg20_2fsign_2eproto}, {
      &scc_info_PailAffRangeProof_zkp_2eproto.base,
      &scc_info_PailAffGroupEleRangeProof_V1_zkp_2eproto.base,}};

static void InitDefaultsscc_info_Round2BCMessage_gg20_2fsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round2BCMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Round2BCMessage_gg20_2fsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Round2BCMessage_gg20_2fsign_2eproto}, {
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,
      &scc_info_PedersenProof_zkp_2eproto.base,}};

static void InitDefaultsscc_info_Round3BCMessage_gg20_2fsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round3BCMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Round3BCMessage_gg20_2fsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Round3BCMessage_gg20_2fsign_2eproto}, {
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_Round4BCMessage_gg20_2fsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round4BCMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4BCMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Round4BCMessage_gg20_2fsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Round4BCMessage_gg20_2fsign_2eproto}, {
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_Round4P2PMessage_gg20_2fsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round4P2PMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4P2PMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Round4P2PMessage_gg20_2fsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Round4P2PMessage_gg20_2fsign_2eproto}, {
      &scc_info_PailEncGroupEleRangeProof_zkp_2eproto.base,}};

static void InitDefaultsscc_info_Round5BCMessage_gg20_2fsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round5BCMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Round5BCMessage_gg20_2fsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Round5BCMessage_gg20_2fsign_2eproto}, {
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,
      &scc_info_HEGProof_V3_zkp_2eproto.base,}};

static void InitDefaultsscc_info_Round6BCMessage_gg20_2fsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round6BCMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round6BCMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Round6BCMessage_gg20_2fsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Round6BCMessage_gg20_2fsign_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gg20_2fsign_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gg20_2fsign_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gg20_2fsign_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gg20_2fsign_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage, message_a_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage, commitment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0P2PMessage, alice_proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage, message_b_for_k_gamma_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage, message_b_for_k_w_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage, bob_proof_1_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage, bob_proof_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage, delta_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage, t_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage, h_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage, pedersen_proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage, blind_factor_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage, gamma_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4BCMessage, r_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4P2PMessage, pail_enc_group_ele_proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage, s_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage, heg_proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round6BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round6BCMessage, si_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage)},
  { 7, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0P2PMessage)},
  { 13, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage)},
  { 22, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage)},
  { 31, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage)},
  { 38, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4BCMessage)},
  { 44, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4P2PMessage)},
  { 50, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage)},
  { 57, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round6BCMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round0BCMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round0P2PMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round1P2PMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round2BCMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round3BCMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round4BCMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round4P2PMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round5BCMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round6BCMessage_default_instance_),
};

const char descriptor_table_protodef_gg20_2fsign_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017gg20/sign.proto\022+safeheron.proto.multi"
  "_party_ecdsa.gg20.sign\032\021curve_point.prot"
  "o\032\tzkp.proto\"8\n\017Round0BCMessage\022\021\n\tmessa"
  "ge_a\030\001 \001(\t\022\022\n\ncommitment\030\002 \001(\t\"N\n\020Round0"
  "P2PMessage\022:\n\013alice_proof\030\003 \001(\0132%.safehe"
  "ron.proto.PailEncRangeProof_V1\"\311\001\n\020Round"
  "1P2PMessage\022\035\n\025message_b_for_k_gamma\030\001 \001"
  "(\t\022\031\n\021message_b_for_k_w\030\002 \001(\t\0227\n\013bob_pro"
  "of_1\030\003 \001(\0132\".safeheron.proto.PailAffRang"
  "eProof\022B\n\013bob_proof_2\030\004 \001(\0132-.safeheron."
  "proto.PailAffGroupEleRangeProof_V1\"\250\001\n\017R"
  "ound2BCMessage\022\r\n\005delta\030\001 \001(\t\022&\n\001T\030\002 \001(\013"
  "2\033.safeheron.proto.CurvePoint\022&\n\001H\030\003 \001(\013"
  "2\033.safeheron.proto.CurvePoint\0226\n\016pederse"
  "n_proof\030\004 \001(\0132\036.safeheron.proto.Pedersen"
  "Proof\"S\n\017Round3BCMessage\022\024\n\014blind_factor"
  "\030\001 \001(\t\022*\n\005Gamma\030\002 \001(\0132\033.safeheron.proto."
  "CurvePoint\"9\n\017Round4BCMessage\022&\n\001R\030\001 \001(\013"
  "2\033.safeheron.proto.CurvePoint\"`\n\020Round4P"
  "2PMessage\022L\n\030pail_enc_group_ele_proof\030\002 "
  "\001(\0132*.safeheron.proto.PailEncGroupEleRan"
  "geProof\"j\n\017Round5BCMessage\022&\n\001S\030\001 \001(\0132\033."
  "safeheron.proto.CurvePoint\022/\n\theg_proof\030"
  "\002 \001(\0132\034.safeheron.proto.HEGProof_V3\"\035\n\017R"
  "ound6BCMessage\022\n\n\002si\030\001 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gg20_2fsign_2eproto_deps[2] = {
  &::descriptor_table_curve_5fpoint_2eproto,
  &::descriptor_table_zkp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gg20_2fsign_2eproto_sccs[9] = {
  &scc_info_Round0BCMessage_gg20_2fsign_2eproto.base,
  &scc_info_Round0P2PMessage_gg20_2fsign_2eproto.base,
  &scc_info_Round1P2PMessage_gg20_2fsign_2eproto.base,
  &scc_info_Round2BCMessage_gg20_2fsign_2eproto.base,
  &scc_info_Round3BCMessage_gg20_2fsign_2eproto.base,
  &scc_info_Round4BCMessage_gg20_2fsign_2eproto.base,
  &scc_info_Round4P2PMessage_gg20_2fsign_2eproto.base,
  &scc_info_Round5BCMessage_gg20_2fsign_2eproto.base,
  &scc_info_Round6BCMessage_gg20_2fsign_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gg20_2fsign_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gg20_2fsign_2eproto = {
  false, false, descriptor_table_protodef_gg20_2fsign_2eproto, "gg20/sign.proto", 994,
  &descriptor_table_gg20_2fsign_2eproto_once, descriptor_table_gg20_2fsign_2eproto_sccs, descriptor_table_gg20_2fsign_2eproto_deps, 9, 2,
  schemas, file_default_instances, TableStruct_gg20_2fsign_2eproto::offsets,
  file_level_metadata_gg20_2fsign_2eproto, 9, file_level_enum_descriptors_gg20_2fsign_2eproto, file_level_service_descriptors_gg20_2fsign_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gg20_2fsign_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gg20_2fsign_2eproto)), true);
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg20 {
namespace sign {

// ===================================================================

class Round0BCMessage::_Internal {
 public:
};

Round0BCMessage::Round0BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
}
Round0BCMessage::Round0BCMessage(const Round0BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_a().empty()) {
    message_a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_a(), 
      GetArena());
  }
  commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_commitment().empty()) {
    commitment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_commitment(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
}

void Round0BCMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round0BCMessage_gg20_2fsign_2eproto.base);
  message_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Round0BCMessage::~Round0BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round0BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_a_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commitment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Round0BCMessage::ArenaDtor(void* object) {
  Round0BCMessage* _this = reinterpret_cast< Round0BCMessage* >(object);
  (void)_this;
}
void Round0BCMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round0BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round0BCMessage& Round0BCMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round0BCMessage_gg20_2fsign_2eproto.base);
  return *internal_default_instance();
}


void Round0BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_a_.ClearToEmpty();
  commitment_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round0BCMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message_a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message_a();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage.message_a"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string commitment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_commitment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage.commitment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round0BCMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_a = 1;
  if (this->message_a().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_a().data(), static_cast<int>(this->_internal_message_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage.message_a");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_a(), target);
  }

  // string commitment = 2;
  if (this->commitment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_commitment().data(), static_cast<int>(this->_internal_commitment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage.commitment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_commitment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  return target;
}

size_t Round0BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_a = 1;
  if (this->message_a().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_a());
  }

  // string commitment = 2;
  if (this->commitment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commitment());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round0BCMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round0BCMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round0BCMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
    MergeFrom(*source);
  }
}

void Round0BCMessage::MergeFrom(const Round0BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_a().size() > 0) {
    _internal_set_message_a(from._internal_message_a());
  }
  if (from.commitment().size() > 0) {
    _internal_set_commitment(from._internal_commitment());
  }
}

void Round0BCMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round0BCMessage::CopyFrom(const Round0BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round0BCMessage::IsInitialized() const {
  return true;
}

void Round0BCMessage::InternalSwap(Round0BCMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_a_.Swap(&other->message_a_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  commitment_.Swap(&other->commitment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Round0BCMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round0P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::PailEncRangeProof_V1& alice_proof(const Round0P2PMessage* msg);
};

const ::safeheron::proto::PailEncRangeProof_V1&
Round0P2PMessage::_Internal::alice_proof(const Round0P2PMessage* msg) {
  return *msg->alice_proof_;
}
void Round0P2PMessage::clear_alice_proof() {
  if (GetArena() == nullptr && alice_proof_ != nullptr) {
    delete alice_proof_;
  }
  alice_proof_ = nullptr;
}
Round0P2PMessage::Round0P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
}
Round0P2PMessage::Round0P2PMessage(const Round0P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_alice_proof()) {
    alice_proof_ = new ::safeheron::proto::PailEncRangeProof_V1(*from.alice_proof_);
  } else {
    alice_proof_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
}

void Round0P2PMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round0P2PMessage_gg20_2fsign_2eproto.base);
  alice_proof_ = nullptr;
}

Round0P2PMessage::~Round0P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round0P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete alice_proof_;
}

void Round0P2PMessage::ArenaDtor(void* object) {
  Round0P2PMessage* _this = reinterpret_cast< Round0P2PMessage* >(object);
  (void)_this;
}
void Round0P2PMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round0P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round0P2PMessage& Round0P2PMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round0P2PMessage_gg20_2fsign_2eproto.base);
  return *internal_default_instance();
}


void Round0P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && alice_proof_ != nullptr) {
    delete alice_proof_;
  }
  alice_proof_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round0P2PMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .safeheron.proto.PailEncRangeProof_V1 alice_proof = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_alice_proof(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round0P2PMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.PailEncRangeProof_V1 alice_proof = 3;
  if (this->has_alice_proof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::alice_proof(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  return target;
}

size_t Round0P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .safeheron.proto.PailEncRangeProof_V1 alice_proof = 3;
  if (this->has_alice_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alice_proof_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round0P2PMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round0P2PMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round0P2PMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
    MergeFrom(*source);
  }
}

void Round0P2PMessage::MergeFrom(const Round0P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_alice_proof()) {
    _internal_mutable_alice_proof()->::safeheron::proto::PailEncRangeProof_V1::MergeFrom(from._internal_alice_proof());
  }
}

void Round0P2PMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round0P2PMessage::CopyFrom(const Round0P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round0P2PMessage::IsInitialized() const {
  return true;
}

void Round0P2PMessage::InternalSwap(Round0P2PMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(alice_proof_, other->alice_proof_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Round0P2PMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round1P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::PailAffRangeProof& bob_proof_1(const Round1P2PMessage* msg);
  static const ::safeheron::proto::PailAffGroupEleRangeProof_V1& bob_proof_2(const Round1P2PMessage* msg);
};

const ::safeheron::proto::PailAffRangeProof&
Round1P2PMessage::_Internal::bob_proof_1(const Round1P2PMessage* msg) {
  return *msg->bob_proof_1_;
}
const ::safeheron::proto::PailAffGroupEleRangeProof_V1&
Round1P2PMessage::_Internal::bob_proof_2(const Round1P2PMessage* msg) {
  return *msg->bob_proof_2_;
}
void Round1P2PMessage::clear_bob_proof_1() {
  if (GetArena() == nullptr && bob_proof_1_ != nullptr) {
    delete bob_proof_1_;
  }
  bob_proof_1_ = nullptr;
}
void Round1P2PMessage::clear_bob_proof_2() {
  if (GetArena() == nullptr && bob_proof_2_ != nullptr) {
    delete bob_proof_2_;
  }
  bob_proof_2_ = nullptr;
}
Round1P2PMessage::Round1P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
}
Round1P2PMessage::Round1P2PMessage(const Round1P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_b_for_k_gamma_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_b_for_k_gamma().empty()) {
    message_b_for_k_gamma_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_b_for_k_gamma(), 
      GetArena());
  }
  message_b_for_k_w_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_b_for_k_w().empty()) {
    message_b_for_k_w_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_b_for_k_w(), 
      GetArena());
  }
  if (from._internal_has_bob_proof_1()) {
    bob_proof_1_ = new ::safeheron::proto::PailAffRangeProof(*from.bob_proof_1_);
  } else {
    bob_proof_1_ = nullptr;
  }
  if (from._internal_has_bob_proof_2()) {
    bob_proof_2_ = new ::safeheron::proto::PailAffGroupEleRangeProof_V1(*from.bob_proof_2_);
  } else {
    bob_proof_2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
}

void Round1P2PMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round1P2PMessage_gg20_2fsign_2eproto.base);
  message_b_for_k_gamma_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_b_for_k_w_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bob_proof_1_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bob_proof_2_) -
      reinterpret_cast<char*>(&bob_proof_1_)) + sizeof(bob_proof_2_));
}

Round1P2PMessage::~Round1P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round1P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_b_for_k_gamma_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_b_for_k_w_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bob_proof_1_;
  if (this != internal_default_instance()) delete bob_proof_2_;
}

void Round1P2PMessage::ArenaDtor(void* object) {
  Round1P2PMessage* _this = reinterpret_cast< Round1P2PMessage* >(object);
  (void)_this;
}
void Round1P2PMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round1P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round1P2PMessage& Round1P2PMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round1P2PMessage_gg20_2fsign_2eproto.base);
  return *internal_default_instance();
}


void Round1P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_b_for_k_gamma_.ClearToEmpty();
  message_b_for_k_w_.ClearToEmpty();
  if (GetArena() == nullptr && bob_proof_1_ != nullptr) {
    delete bob_proof_1_;
  }
  bob_proof_1_ = nullptr;
  if (GetArena() == nullptr && bob_proof_2_ != nullptr) {
    delete bob_proof_2_;
  }
  bob_proof_2_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round1P2PMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message_b_for_k_gamma = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message_b_for_k_gamma();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage.message_b_for_k_gamma"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_b_for_k_w = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_b_for_k_w();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage.message_b_for_k_w"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.PailAffRangeProof bob_proof_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bob_proof_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.PailAffGroupEleRangeProof_V1 bob_proof_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bob_proof_2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round1P2PMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_b_for_k_gamma = 1;
  if (this->message_b_for_k_gamma().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_b_for_k_gamma().data(), static_cast<int>(this->_internal_message_b_for_k_gamma().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage.message_b_for_k_gamma");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_b_for_k_gamma(), target);
  }

  // string message_b_for_k_w = 2;
  if (this->message_b_for_k_w().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_b_for_k_w().data(), static_cast<int>(this->_internal_message_b_for_k_w().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage.message_b_for_k_w");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_b_for_k_w(), target);
  }

  // .safeheron.proto.PailAffRangeProof bob_proof_1 = 3;
  if (this->has_bob_proof_1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bob_proof_1(this), target, stream);
  }

  // .safeheron.proto.PailAffGroupEleRangeProof_V1 bob_proof_2 = 4;
  if (this->has_bob_proof_2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bob_proof_2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  return target;
}

size_t Round1P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_b_for_k_gamma = 1;
  if (this->message_b_for_k_gamma().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_b_for_k_gamma());
  }

  // string message_b_for_k_w = 2;
  if (this->message_b_for_k_w().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_b_for_k_w());
  }

  // .safeheron.proto.PailAffRangeProof bob_proof_1 = 3;
  if (this->has_bob_proof_1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bob_proof_1_);
  }

  // .safeheron.proto.PailAffGroupEleRangeProof_V1 bob_proof_2 = 4;
  if (this->has_bob_proof_2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bob_proof_2_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round1P2PMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round1P2PMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round1P2PMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
    MergeFrom(*source);
  }
}

void Round1P2PMessage::MergeFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_b_for_k_gamma().size() > 0) {
    _internal_set_message_b_for_k_gamma(from._internal_message_b_for_k_gamma());
  }
  if (from.message_b_for_k_w().size() > 0) {
    _internal_set_message_b_for_k_w(from._internal_message_b_for_k_w());
  }
  if (from.has_bob_proof_1()) {
    _internal_mutable_bob_proof_1()->::safeheron::proto::PailAffRangeProof::MergeFrom(from._internal_bob_proof_1());
  }
  if (from.has_bob_proof_2()) {
    _internal_mutable_bob_proof_2()->::safeheron::proto::PailAffGroupEleRangeProof_V1::MergeFrom(from._internal_bob_proof_2());
  }
}

void Round1P2PMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round1P2PMessage::CopyFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round1P2PMessage::IsInitialized() const {
  return true;
}

void Round1P2PMessage::InternalSwap(Round1P2PMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_b_for_k_gamma_.Swap(&other->message_b_for_k_gamma_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_b_for_k_w_.Swap(&other->message_b_for_k_w_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round1P2PMessage, bob_proof_2_)
      + sizeof(Round1P2PMessage::bob_proof_2_)
      - PROTOBUF_FIELD_OFFSET(Round1P2PMessage, bob_proof_1_)>(
          reinterpret_cast<char*>(&bob_proof_1_),
          reinterpret_cast<char*>(&other->bob_proof_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round1P2PMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round2BCMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& t(const Round2BCMessage* msg);
  static const ::safeheron::proto::CurvePoint& h(const Round2BCMessage* msg);
  static const ::safeheron::proto::PedersenProof& pedersen_proof(const Round2BCMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round2BCMessage::_Internal::t(const Round2BCMessage* msg) {
  return *msg->t_;
}
const ::safeheron::proto::CurvePoint&
Round2BCMessage::_Internal::h(const Round2BCMessage* msg) {
  return *msg->h_;
}
const ::safeheron::proto::PedersenProof&
Round2BCMessage::_Internal::pedersen_proof(const Round2BCMessage* msg) {
  return *msg->pedersen_proof_;
}
void Round2BCMessage::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
void Round2BCMessage::clear_h() {
  if (GetArena() == nullptr && h_ != nullptr) {
    delete h_;
  }
  h_ = nullptr;
}
void Round2BCMessage::clear_pedersen_proof() {
  if (GetArena() == nullptr && pedersen_proof_ != nullptr) {
    delete pedersen_proof_;
  }
  pedersen_proof_ = nullptr;
}
Round2BCMessage::Round2BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
}
Round2BCMessage::Round2BCMessage(const Round2BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delta().empty()) {
    delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delta(), 
      GetArena());
  }
  if (from._internal_has_t()) {
    t_ = new ::safeheron::proto::CurvePoint(*from.t_);
  } else {
    t_ = nullptr;
  }
  if (from._internal_has_h()) {
    h_ = new ::safeheron::proto::CurvePoint(*from.h_);
  } else {
    h_ = nullptr;
  }
  if (from._internal_has_pedersen_proof()) {
    pedersen_proof_ = new ::safeheron::proto::PedersenProof(*from.pedersen_proof_);
  } else {
    pedersen_proof_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
}

void Round2BCMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round2BCMessage_gg20_2fsign_2eproto.base);
  delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&t_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pedersen_proof_) -
      reinterpret_cast<char*>(&t_)) + sizeof(pedersen_proof_));
}

Round2BCMessage::~Round2BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round2BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete t_;
  if (this != internal_default_instance()) delete h_;
  if (this != internal_default_instance()) delete pedersen_proof_;
}

void Round2BCMessage::ArenaDtor(void* object) {
  Round2BCMessage* _this = reinterpret_cast< Round2BCMessage* >(object);
  (void)_this;
}
void Round2BCMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round2BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round2BCMessage& Round2BCMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round2BCMessage_gg20_2fsign_2eproto.base);
  return *internal_default_instance();
}


void Round2BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delta_.ClearToEmpty();
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  if (GetArena() == nullptr && h_ != nullptr) {
    delete h_;
  }
  h_ = nullptr;
  if (GetArena() == nullptr && pedersen_proof_ != nullptr) {
    delete pedersen_proof_;
  }
  pedersen_proof_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round2BCMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string delta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage.delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint T = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint H = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_h(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.PedersenProof pedersen_proof = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pedersen_proof(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round2BCMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string delta = 1;
  if (this->delta().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delta().data(), static_cast<int>(this->_internal_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage.delta");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_delta(), target);
  }

  // .safeheron.proto.CurvePoint T = 2;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::t(this), target, stream);
  }

  // .safeheron.proto.CurvePoint H = 3;
  if (this->has_h()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::h(this), target, stream);
  }

  // .safeheron.proto.PedersenProof pedersen_proof = 4;
  if (this->has_pedersen_proof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pedersen_proof(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  return target;
}

size_t Round2BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delta = 1;
  if (this->delta().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delta());
  }

  // .safeheron.proto.CurvePoint T = 2;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // .safeheron.proto.CurvePoint H = 3;
  if (this->has_h()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *h_);
  }

  // .safeheron.proto.PedersenProof pedersen_proof = 4;
  if (this->has_pedersen_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pedersen_proof_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round2BCMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round2BCMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round2BCMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
    MergeFrom(*source);
  }
}

void Round2BCMessage::MergeFrom(const Round2BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delta().size() > 0) {
    _internal_set_delta(from._internal_delta());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_t());
  }
  if (from.has_h()) {
    _internal_mutable_h()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_h());
  }
  if (from.has_pedersen_proof()) {
    _internal_mutable_pedersen_proof()->::safeheron::proto::PedersenProof::MergeFrom(from._internal_pedersen_proof());
  }
}

void Round2BCMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round2BCMessage::CopyFrom(const Round2BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round2BCMessage::IsInitialized() const {
  return true;
}

void Round2BCMessage::InternalSwap(Round2BCMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delta_.Swap(&other->delta_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round2BCMessage, pedersen_proof_)
      + sizeof(Round2BCMessage::pedersen_proof_)
      - PROTOBUF_FIELD_OFFSET(Round2BCMessage, t_)>(
          reinterpret_cast<char*>(&t_),
          reinterpret_cast<char*>(&other->t_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round2BCMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round3BCMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& gamma(const Round3BCMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round3BCMessage::_Internal::gamma(const Round3BCMessage* msg) {
  return *msg->gamma_;
}
void Round3BCMessage::clear_gamma() {
  if (GetArena() == nullptr && gamma_ != nullptr) {
    delete gamma_;
  }
  gamma_ = nullptr;
}
Round3BCMessage::Round3BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
}
Round3BCMessage::Round3BCMessage(const Round3BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blind_factor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blind_factor().empty()) {
    blind_factor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blind_factor(), 
      GetArena());
  }
  if (from._internal_has_gamma()) {
    gamma_ = new ::safeheron::proto::CurvePoint(*from.gamma_);
  } else {
    gamma_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
}

void Round3BCMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round3BCMessage_gg20_2fsign_2eproto.base);
  blind_factor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamma_ = nullptr;
}

Round3BCMessage::~Round3BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round3BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blind_factor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gamma_;
}

void Round3BCMessage::ArenaDtor(void* object) {
  Round3BCMessage* _this = reinterpret_cast< Round3BCMessage* >(object);
  (void)_this;
}
void Round3BCMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round3BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round3BCMessage& Round3BCMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round3BCMessage_gg20_2fsign_2eproto.base);
  return *internal_default_instance();
}


void Round3BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blind_factor_.ClearToEmpty();
  if (GetArena() == nullptr && gamma_ != nullptr) {
    delete gamma_;
  }
  gamma_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round3BCMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string blind_factor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blind_factor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage.blind_factor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint Gamma = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamma(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round3BCMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string blind_factor = 1;
  if (this->blind_factor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blind_factor().data(), static_cast<int>(this->_internal_blind_factor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage.blind_factor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_blind_factor(), target);
  }

  // .safeheron.proto.CurvePoint Gamma = 2;
  if (this->has_gamma()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gamma(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  return target;
}

size_t Round3BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string blind_factor = 1;
  if (this->blind_factor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blind_factor());
  }

  // .safeheron.proto.CurvePoint Gamma = 2;
  if (this->has_gamma()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gamma_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round3BCMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round3BCMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round3BCMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
    MergeFrom(*source);
  }
}

void Round3BCMessage::MergeFrom(const Round3BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blind_factor().size() > 0) {
    _internal_set_blind_factor(from._internal_blind_factor());
  }
  if (from.has_gamma()) {
    _internal_mutable_gamma()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_gamma());
  }
}

void Round3BCMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round3BCMessage::CopyFrom(const Round3BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round3BCMessage::IsInitialized() const {
  return true;
}

void Round3BCMessage::InternalSwap(Round3BCMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blind_factor_.Swap(&other->blind_factor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(gamma_, other->gamma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Round3BCMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round4BCMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& r(const Round4BCMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round4BCMessage::_Internal::r(const Round4BCMessage* msg) {
  return *msg->r_;
}
void Round4BCMessage::clear_r() {
  if (GetArena() == nullptr && r_ != nullptr) {
    delete r_;
  }
  r_ = nullptr;
}
Round4BCMessage::Round4BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
}
Round4BCMessage::Round4BCMessage(const Round4BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_r()) {
    r_ = new ::safeheron::proto::CurvePoint(*from.r_);
  } else {
    r_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
}

void Round4BCMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round4BCMessage_gg20_2fsign_2eproto.base);
  r_ = nullptr;
}

Round4BCMessage::~Round4BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round4BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete r_;
}

void Round4BCMessage::ArenaDtor(void* object) {
  Round4BCMessage* _this = reinterpret_cast< Round4BCMessage* >(object);
  (void)_this;
}
void Round4BCMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round4BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round4BCMessage& Round4BCMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round4BCMessage_gg20_2fsign_2eproto.base);
  return *internal_default_instance();
}


void Round4BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && r_ != nullptr) {
    delete r_;
  }
  r_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round4BCMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .safeheron.proto.CurvePoint R = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_r(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round4BCMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint R = 1;
  if (this->has_r()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::r(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  return target;
}

size_t Round4BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint R = 1;
  if (this->has_r()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *r_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round4BCMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round4BCMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round4BCMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
    MergeFrom(*source);
  }
}

void Round4BCMessage::MergeFrom(const Round4BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_r()) {
    _internal_mutable_r()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_r());
  }
}

void Round4BCMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round4BCMessage::CopyFrom(const Round4BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round4BCMessage::IsInitialized() const {
  return true;
}

void Round4BCMessage::InternalSwap(Round4BCMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(r_, other->r_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Round4BCMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round4P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::PailEncGroupEleRangeProof& pail_enc_group_ele_proof(const Round4P2PMessage* msg);
};

const ::safeheron::proto::PailEncGroupEleRangeProof&
Round4P2PMessage::_Internal::pail_enc_group_ele_proof(const Round4P2PMessage* msg) {
  return *msg->pail_enc_group_ele_proof_;
}
void Round4P2PMessage::clear_pail_enc_group_ele_proof() {
  if (GetArena() == nullptr && pail_enc_group_ele_proof_ != nullptr) {
    delete pail_enc_group_ele_proof_;
  }
  pail_enc_group_ele_proof_ = nullptr;
}
Round4P2PMessage::Round4P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
}
Round4P2PMessage::Round4P2PMessage(const Round4P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pail_enc_group_ele_proof()) {
    pail_enc_group_ele_proof_ = new ::safeheron::proto::PailEncGroupEleRangeProof(*from.pail_enc_group_ele_proof_);
  } else {
    pail_enc_group_ele_proof_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
}

void Round4P2PMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round4P2PMessage_gg20_2fsign_2eproto.base);
  pail_enc_group_ele_proof_ = nullptr;
}

Round4P2PMessage::~Round4P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round4P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pail_enc_group_ele_proof_;
}

void Round4P2PMessage::ArenaDtor(void* object) {
  Round4P2PMessage* _this = reinterpret_cast< Round4P2PMessage* >(object);
  (void)_this;
}
void Round4P2PMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round4P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round4P2PMessage& Round4P2PMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round4P2PMessage_gg20_2fsign_2eproto.base);
  return *internal_default_instance();
}


void Round4P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pail_enc_group_ele_proof_ != nullptr) {
    delete pail_enc_group_ele_proof_;
  }
  pail_enc_group_ele_proof_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round4P2PMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .safeheron.proto.PailEncGroupEleRangeProof pail_enc_group_ele_proof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pail_enc_group_ele_proof(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round4P2PMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.PailEncGroupEleRangeProof pail_enc_group_ele_proof = 2;
  if (this->has_pail_enc_group_ele_proof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pail_enc_group_ele_proof(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  return target;
}

size_t Round4P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .safeheron.proto.PailEncGroupEleRangeProof pail_enc_group_ele_proof = 2;
  if (this->has_pail_enc_group_ele_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pail_enc_group_ele_proof_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round4P2PMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round4P2PMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round4P2PMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
    MergeFrom(*source);
  }
}

void Round4P2PMessage::MergeFrom(const Round4P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pail_enc_group_ele_proof()) {
    _internal_mutable_pail_enc_group_ele_proof()->::safeheron::proto::PailEncGroupEleRangeProof::MergeFrom(from._internal_pail_enc_group_ele_proof());
  }
}

void Round4P2PMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round4P2PMessage::CopyFrom(const Round4P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round4P2PMessage::IsInitialized() const {
  return true;
}

void Round4P2PMessage::InternalSwap(Round4P2PMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pail_enc_group_ele_proof_, other->pail_enc_group_ele_proof_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Round4P2PMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round5BCMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& s(const Round5BCMessage* msg);
  static const ::safeheron::proto::HEGProof_V3& heg_proof(const Round5BCMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round5BCMessage::_Internal::s(const Round5BCMessage* msg) {
  return *msg->s_;
}
const ::safeheron::proto::HEGProof_V3&
Round5BCMessage::_Internal::heg_proof(const Round5BCMessage* msg) {
  return *msg->heg_proof_;
}
void Round5BCMessage::clear_s() {
  if (GetArena() == nullptr && s_ != nullptr) {
    delete s_;
  }
  s_ = nullptr;
}
void Round5BCMessage::clear_heg_proof() {
  if (GetArena() == nullptr && heg_proof_ != nullptr) {
    delete heg_proof_;
  }
  heg_proof_ = nullptr;
}
Round5BCMessage::Round5BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
}
Round5BCMessage::Round5BCMessage(const Round5BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_s()) {
    s_ = new ::safeheron::proto::CurvePoint(*from.s_);
  } else {
    s_ = nullptr;
  }
  if (from._internal_has_heg_proof()) {
    heg_proof_ = new ::safeheron::proto::HEGProof_V3(*from.heg_proof_);
  } else {
    heg_proof_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
}

void Round5BCMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round5BCMessage_gg20_2fsign_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&s_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&heg_proof_) -
      reinterpret_cast<char*>(&s_)) + sizeof(heg_proof_));
}

Round5BCMessage::~Round5BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round5BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete s_;
  if (this != internal_default_instance()) delete heg_proof_;
}

void Round5BCMessage::ArenaDtor(void* object) {
  Round5BCMessage* _this = reinterpret_cast< Round5BCMessage* >(object);
  (void)_this;
}
void Round5BCMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round5BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round5BCMessage& Round5BCMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round5BCMessage_gg20_2fsign_2eproto.base);
  return *internal_default_instance();
}


void Round5BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && s_ != nullptr) {
    delete s_;
  }
  s_ = nullptr;
  if (GetArena() == nullptr && heg_proof_ != nullptr) {
    delete heg_proof_;
  }
  heg_proof_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round5BCMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .safeheron.proto.CurvePoint S = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.HEGProof_V3 heg_proof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_heg_proof(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round5BCMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint S = 1;
  if (this->has_s()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::s(this), target, stream);
  }

  // .safeheron.proto.HEGProof_V3 heg_proof = 2;
  if (this->has_heg_proof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::heg_proof(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  return target;
}

size_t Round5BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint S = 1;
  if (this->has_s()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *s_);
  }

  // .safeheron.proto.HEGProof_V3 heg_proof = 2;
  if (this->has_heg_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heg_proof_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round5BCMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round5BCMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round5BCMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
    MergeFrom(*source);
  }
}

void Round5BCMessage::MergeFrom(const Round5BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_s()) {
    _internal_mutable_s()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_s());
  }
  if (from.has_heg_proof()) {
    _internal_mutable_heg_proof()->::safeheron::proto::HEGProof_V3::MergeFrom(from._internal_heg_proof());
  }
}

void Round5BCMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round5BCMessage::CopyFrom(const Round5BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round5BCMessage::IsInitialized() const {
  return true;
}

void Round5BCMessage::InternalSwap(Round5BCMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round5BCMessage, heg_proof_)
      + sizeof(Round5BCMessage::heg_proof_)
      - PROTOBUF_FIELD_OFFSET(Round5BCMessage, s_)>(
          reinterpret_cast<char*>(&s_),
          reinterpret_cast<char*>(&other->s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round5BCMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round6BCMessage::_Internal {
 public:
};

Round6BCMessage::Round6BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
}
Round6BCMessage::Round6BCMessage(const Round6BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  si_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_si().empty()) {
    si_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_si(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
}

void Round6BCMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round6BCMessage_gg20_2fsign_2eproto.base);
  si_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Round6BCMessage::~Round6BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round6BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  si_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Round6BCMessage::ArenaDtor(void* object) {
  Round6BCMessage* _this = reinterpret_cast< Round6BCMessage* >(object);
  (void)_this;
}
void Round6BCMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round6BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round6BCMessage& Round6BCMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round6BCMessage_gg20_2fsign_2eproto.base);
  return *internal_default_instance();
}


void Round6BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  si_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round6BCMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string si = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_si();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage.si"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round6BCMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string si = 1;
  if (this->si().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_si().data(), static_cast<int>(this->_internal_si().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage.si");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_si(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  return target;
}

size_t Round6BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string si = 1;
  if (this->si().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_si());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round6BCMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round6BCMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round6BCMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
    MergeFrom(*source);
  }
}

void Round6BCMessage::MergeFrom(const Round6BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.si().size() > 0) {
    _internal_set_si(from._internal_si());
  }
}

void Round6BCMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round6BCMessage::CopyFrom(const Round6BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round6BCMessage::IsInitialized() const {
  return true;
}

void Round6BCMessage::InternalSwap(Round6BCMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  si_.Swap(&other->si_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Round6BCMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sign
}  // namespace gg20
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0P2PMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4BCMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4P2PMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round6BCMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round6BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round6BCMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
