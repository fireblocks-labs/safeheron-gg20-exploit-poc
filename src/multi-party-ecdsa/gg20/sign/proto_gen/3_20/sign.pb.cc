// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gg20/sign.proto

#include "sign.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg20 {
namespace sign {
PROTOBUF_CONSTEXPR Round0BCMessage::Round0BCMessage(
    ::_pbi::ConstantInitialized)
  : message_a_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , commitment_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Round0BCMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round0BCMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round0BCMessageDefaultTypeInternal() {}
  union {
    Round0BCMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round0BCMessageDefaultTypeInternal _Round0BCMessage_default_instance_;
PROTOBUF_CONSTEXPR Round0P2PMessage::Round0P2PMessage(
    ::_pbi::ConstantInitialized)
  : alice_proof_(nullptr){}
struct Round0P2PMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round0P2PMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round0P2PMessageDefaultTypeInternal() {}
  union {
    Round0P2PMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round0P2PMessageDefaultTypeInternal _Round0P2PMessage_default_instance_;
PROTOBUF_CONSTEXPR Round1P2PMessage::Round1P2PMessage(
    ::_pbi::ConstantInitialized)
  : message_b_for_k_gamma_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , message_b_for_k_w_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bob_proof_1_(nullptr)
  , bob_proof_2_(nullptr){}
struct Round1P2PMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round1P2PMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round1P2PMessageDefaultTypeInternal() {}
  union {
    Round1P2PMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round1P2PMessageDefaultTypeInternal _Round1P2PMessage_default_instance_;
PROTOBUF_CONSTEXPR Round2BCMessage::Round2BCMessage(
    ::_pbi::ConstantInitialized)
  : delta_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , t_(nullptr)
  , h_(nullptr)
  , pedersen_proof_(nullptr){}
struct Round2BCMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round2BCMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round2BCMessageDefaultTypeInternal() {}
  union {
    Round2BCMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round2BCMessageDefaultTypeInternal _Round2BCMessage_default_instance_;
PROTOBUF_CONSTEXPR Round3BCMessage::Round3BCMessage(
    ::_pbi::ConstantInitialized)
  : blind_factor_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , gamma_(nullptr){}
struct Round3BCMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round3BCMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round3BCMessageDefaultTypeInternal() {}
  union {
    Round3BCMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round3BCMessageDefaultTypeInternal _Round3BCMessage_default_instance_;
PROTOBUF_CONSTEXPR Round4BCMessage::Round4BCMessage(
    ::_pbi::ConstantInitialized)
  : r_(nullptr){}
struct Round4BCMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round4BCMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round4BCMessageDefaultTypeInternal() {}
  union {
    Round4BCMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round4BCMessageDefaultTypeInternal _Round4BCMessage_default_instance_;
PROTOBUF_CONSTEXPR Round4P2PMessage::Round4P2PMessage(
    ::_pbi::ConstantInitialized)
  : pail_enc_group_ele_proof_(nullptr){}
struct Round4P2PMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round4P2PMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round4P2PMessageDefaultTypeInternal() {}
  union {
    Round4P2PMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round4P2PMessageDefaultTypeInternal _Round4P2PMessage_default_instance_;
PROTOBUF_CONSTEXPR Round5BCMessage::Round5BCMessage(
    ::_pbi::ConstantInitialized)
  : s_(nullptr)
  , heg_proof_(nullptr){}
struct Round5BCMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round5BCMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round5BCMessageDefaultTypeInternal() {}
  union {
    Round5BCMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round5BCMessageDefaultTypeInternal _Round5BCMessage_default_instance_;
PROTOBUF_CONSTEXPR Round6BCMessage::Round6BCMessage(
    ::_pbi::ConstantInitialized)
  : si_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Round6BCMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round6BCMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round6BCMessageDefaultTypeInternal() {}
  union {
    Round6BCMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round6BCMessageDefaultTypeInternal _Round6BCMessage_default_instance_;
}  // namespace sign
}  // namespace gg20
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
static ::_pb::Metadata file_level_metadata_gg20_2fsign_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_gg20_2fsign_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gg20_2fsign_2eproto = nullptr;

const uint32_t TableStruct_gg20_2fsign_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage, message_a_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage, commitment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0P2PMessage, alice_proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage, message_b_for_k_gamma_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage, message_b_for_k_w_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage, bob_proof_1_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage, bob_proof_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage, delta_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage, t_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage, h_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage, pedersen_proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage, blind_factor_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage, gamma_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4BCMessage, r_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4P2PMessage, pail_enc_group_ele_proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage, s_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage, heg_proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round6BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round6BCMessage, si_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage)},
  { 8, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0P2PMessage)},
  { 15, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage)},
  { 25, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage)},
  { 35, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage)},
  { 43, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4BCMessage)},
  { 50, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4P2PMessage)},
  { 57, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage)},
  { 65, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg20::sign::Round6BCMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round0BCMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round0P2PMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round1P2PMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round2BCMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round3BCMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round4BCMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round4P2PMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round5BCMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::gg20::sign::_Round6BCMessage_default_instance_._instance,
};

const char descriptor_table_protodef_gg20_2fsign_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017gg20/sign.proto\022+safeheron.proto.multi"
  "_party_ecdsa.gg20.sign\032\021curve_point.prot"
  "o\032\tzkp.proto\"8\n\017Round0BCMessage\022\021\n\tmessa"
  "ge_a\030\001 \001(\t\022\022\n\ncommitment\030\002 \001(\t\"N\n\020Round0"
  "P2PMessage\022:\n\013alice_proof\030\003 \001(\0132%.safehe"
  "ron.proto.PailEncRangeProof_V1\"\311\001\n\020Round"
  "1P2PMessage\022\035\n\025message_b_for_k_gamma\030\001 \001"
  "(\t\022\031\n\021message_b_for_k_w\030\002 \001(\t\0227\n\013bob_pro"
  "of_1\030\003 \001(\0132\".safeheron.proto.PailAffRang"
  "eProof\022B\n\013bob_proof_2\030\004 \001(\0132-.safeheron."
  "proto.PailAffGroupEleRangeProof_V1\"\250\001\n\017R"
  "ound2BCMessage\022\r\n\005delta\030\001 \001(\t\022&\n\001T\030\002 \001(\013"
  "2\033.safeheron.proto.CurvePoint\022&\n\001H\030\003 \001(\013"
  "2\033.safeheron.proto.CurvePoint\0226\n\016pederse"
  "n_proof\030\004 \001(\0132\036.safeheron.proto.Pedersen"
  "Proof\"S\n\017Round3BCMessage\022\024\n\014blind_factor"
  "\030\001 \001(\t\022*\n\005Gamma\030\002 \001(\0132\033.safeheron.proto."
  "CurvePoint\"9\n\017Round4BCMessage\022&\n\001R\030\001 \001(\013"
  "2\033.safeheron.proto.CurvePoint\"`\n\020Round4P"
  "2PMessage\022L\n\030pail_enc_group_ele_proof\030\002 "
  "\001(\0132*.safeheron.proto.PailEncGroupEleRan"
  "geProof\"j\n\017Round5BCMessage\022&\n\001S\030\001 \001(\0132\033."
  "safeheron.proto.CurvePoint\022/\n\theg_proof\030"
  "\002 \001(\0132\034.safeheron.proto.HEGProof_V3\"\035\n\017R"
  "ound6BCMessage\022\n\n\002si\030\001 \001(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_gg20_2fsign_2eproto_deps[2] = {
  &::descriptor_table_curve_5fpoint_2eproto,
  &::descriptor_table_zkp_2eproto,
};
static ::_pbi::once_flag descriptor_table_gg20_2fsign_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gg20_2fsign_2eproto = {
    false, false, 994, descriptor_table_protodef_gg20_2fsign_2eproto,
    "gg20/sign.proto",
    &descriptor_table_gg20_2fsign_2eproto_once, descriptor_table_gg20_2fsign_2eproto_deps, 2, 9,
    schemas, file_default_instances, TableStruct_gg20_2fsign_2eproto::offsets,
    file_level_metadata_gg20_2fsign_2eproto, file_level_enum_descriptors_gg20_2fsign_2eproto,
    file_level_service_descriptors_gg20_2fsign_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gg20_2fsign_2eproto_getter() {
  return &descriptor_table_gg20_2fsign_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gg20_2fsign_2eproto(&descriptor_table_gg20_2fsign_2eproto);
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg20 {
namespace sign {

// ===================================================================

class Round0BCMessage::_Internal {
 public:
};

Round0BCMessage::Round0BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
}
Round0BCMessage::Round0BCMessage(const Round0BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_a_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_a_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_a().empty()) {
    message_a_.Set(from._internal_message_a(), 
      GetArenaForAllocation());
  }
  commitment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    commitment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_commitment().empty()) {
    commitment_.Set(from._internal_commitment(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
}

inline void Round0BCMessage::SharedCtor() {
message_a_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_a_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
commitment_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  commitment_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Round0BCMessage::~Round0BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round0BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_a_.Destroy();
  commitment_.Destroy();
}

void Round0BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round0BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_a_.ClearToEmpty();
  commitment_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round0BCMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_a();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage.message_a"));
        } else
          goto handle_unusual;
        continue;
      // string commitment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_commitment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage.commitment"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round0BCMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_a = 1;
  if (!this->_internal_message_a().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_a().data(), static_cast<int>(this->_internal_message_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage.message_a");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_a(), target);
  }

  // string commitment = 2;
  if (!this->_internal_commitment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_commitment().data(), static_cast<int>(this->_internal_commitment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage.commitment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_commitment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  return target;
}

size_t Round0BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_a = 1;
  if (!this->_internal_message_a().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_a());
  }

  // string commitment = 2;
  if (!this->_internal_commitment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commitment());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round0BCMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round0BCMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round0BCMessage::GetClassData() const { return &_class_data_; }

void Round0BCMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round0BCMessage *>(to)->MergeFrom(
      static_cast<const Round0BCMessage &>(from));
}


void Round0BCMessage::MergeFrom(const Round0BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_a().empty()) {
    _internal_set_message_a(from._internal_message_a());
  }
  if (!from._internal_commitment().empty()) {
    _internal_set_commitment(from._internal_commitment());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round0BCMessage::CopyFrom(const Round0BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round0BCMessage::IsInitialized() const {
  return true;
}

void Round0BCMessage::InternalSwap(Round0BCMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_a_, lhs_arena,
      &other->message_a_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &commitment_, lhs_arena,
      &other->commitment_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Round0BCMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg20_2fsign_2eproto_getter, &descriptor_table_gg20_2fsign_2eproto_once,
      file_level_metadata_gg20_2fsign_2eproto[0]);
}

// ===================================================================

class Round0P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::PailEncRangeProof_V1& alice_proof(const Round0P2PMessage* msg);
};

const ::safeheron::proto::PailEncRangeProof_V1&
Round0P2PMessage::_Internal::alice_proof(const Round0P2PMessage* msg) {
  return *msg->alice_proof_;
}
void Round0P2PMessage::clear_alice_proof() {
  if (GetArenaForAllocation() == nullptr && alice_proof_ != nullptr) {
    delete alice_proof_;
  }
  alice_proof_ = nullptr;
}
Round0P2PMessage::Round0P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
}
Round0P2PMessage::Round0P2PMessage(const Round0P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_alice_proof()) {
    alice_proof_ = new ::safeheron::proto::PailEncRangeProof_V1(*from.alice_proof_);
  } else {
    alice_proof_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
}

inline void Round0P2PMessage::SharedCtor() {
alice_proof_ = nullptr;
}

Round0P2PMessage::~Round0P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round0P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete alice_proof_;
}

void Round0P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round0P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && alice_proof_ != nullptr) {
    delete alice_proof_;
  }
  alice_proof_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round0P2PMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .safeheron.proto.PailEncRangeProof_V1 alice_proof = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_alice_proof(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round0P2PMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.PailEncRangeProof_V1 alice_proof = 3;
  if (this->_internal_has_alice_proof()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::alice_proof(this),
        _Internal::alice_proof(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  return target;
}

size_t Round0P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .safeheron.proto.PailEncRangeProof_V1 alice_proof = 3;
  if (this->_internal_has_alice_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alice_proof_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round0P2PMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round0P2PMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round0P2PMessage::GetClassData() const { return &_class_data_; }

void Round0P2PMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round0P2PMessage *>(to)->MergeFrom(
      static_cast<const Round0P2PMessage &>(from));
}


void Round0P2PMessage::MergeFrom(const Round0P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_alice_proof()) {
    _internal_mutable_alice_proof()->::safeheron::proto::PailEncRangeProof_V1::MergeFrom(from._internal_alice_proof());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round0P2PMessage::CopyFrom(const Round0P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round0P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round0P2PMessage::IsInitialized() const {
  return true;
}

void Round0P2PMessage::InternalSwap(Round0P2PMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(alice_proof_, other->alice_proof_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Round0P2PMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg20_2fsign_2eproto_getter, &descriptor_table_gg20_2fsign_2eproto_once,
      file_level_metadata_gg20_2fsign_2eproto[1]);
}

// ===================================================================

class Round1P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::PailAffRangeProof& bob_proof_1(const Round1P2PMessage* msg);
  static const ::safeheron::proto::PailAffGroupEleRangeProof_V1& bob_proof_2(const Round1P2PMessage* msg);
};

const ::safeheron::proto::PailAffRangeProof&
Round1P2PMessage::_Internal::bob_proof_1(const Round1P2PMessage* msg) {
  return *msg->bob_proof_1_;
}
const ::safeheron::proto::PailAffGroupEleRangeProof_V1&
Round1P2PMessage::_Internal::bob_proof_2(const Round1P2PMessage* msg) {
  return *msg->bob_proof_2_;
}
void Round1P2PMessage::clear_bob_proof_1() {
  if (GetArenaForAllocation() == nullptr && bob_proof_1_ != nullptr) {
    delete bob_proof_1_;
  }
  bob_proof_1_ = nullptr;
}
void Round1P2PMessage::clear_bob_proof_2() {
  if (GetArenaForAllocation() == nullptr && bob_proof_2_ != nullptr) {
    delete bob_proof_2_;
  }
  bob_proof_2_ = nullptr;
}
Round1P2PMessage::Round1P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
}
Round1P2PMessage::Round1P2PMessage(const Round1P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_b_for_k_gamma_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_b_for_k_gamma_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_b_for_k_gamma().empty()) {
    message_b_for_k_gamma_.Set(from._internal_message_b_for_k_gamma(), 
      GetArenaForAllocation());
  }
  message_b_for_k_w_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_b_for_k_w_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_b_for_k_w().empty()) {
    message_b_for_k_w_.Set(from._internal_message_b_for_k_w(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_bob_proof_1()) {
    bob_proof_1_ = new ::safeheron::proto::PailAffRangeProof(*from.bob_proof_1_);
  } else {
    bob_proof_1_ = nullptr;
  }
  if (from._internal_has_bob_proof_2()) {
    bob_proof_2_ = new ::safeheron::proto::PailAffGroupEleRangeProof_V1(*from.bob_proof_2_);
  } else {
    bob_proof_2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
}

inline void Round1P2PMessage::SharedCtor() {
message_b_for_k_gamma_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_b_for_k_gamma_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_b_for_k_w_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_b_for_k_w_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bob_proof_1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bob_proof_2_) -
    reinterpret_cast<char*>(&bob_proof_1_)) + sizeof(bob_proof_2_));
}

Round1P2PMessage::~Round1P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round1P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_b_for_k_gamma_.Destroy();
  message_b_for_k_w_.Destroy();
  if (this != internal_default_instance()) delete bob_proof_1_;
  if (this != internal_default_instance()) delete bob_proof_2_;
}

void Round1P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round1P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_b_for_k_gamma_.ClearToEmpty();
  message_b_for_k_w_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && bob_proof_1_ != nullptr) {
    delete bob_proof_1_;
  }
  bob_proof_1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bob_proof_2_ != nullptr) {
    delete bob_proof_2_;
  }
  bob_proof_2_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round1P2PMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_b_for_k_gamma = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_b_for_k_gamma();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage.message_b_for_k_gamma"));
        } else
          goto handle_unusual;
        continue;
      // string message_b_for_k_w = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message_b_for_k_w();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage.message_b_for_k_w"));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.PailAffRangeProof bob_proof_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bob_proof_1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.PailAffGroupEleRangeProof_V1 bob_proof_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bob_proof_2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round1P2PMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_b_for_k_gamma = 1;
  if (!this->_internal_message_b_for_k_gamma().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_b_for_k_gamma().data(), static_cast<int>(this->_internal_message_b_for_k_gamma().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage.message_b_for_k_gamma");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_b_for_k_gamma(), target);
  }

  // string message_b_for_k_w = 2;
  if (!this->_internal_message_b_for_k_w().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_b_for_k_w().data(), static_cast<int>(this->_internal_message_b_for_k_w().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage.message_b_for_k_w");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_b_for_k_w(), target);
  }

  // .safeheron.proto.PailAffRangeProof bob_proof_1 = 3;
  if (this->_internal_has_bob_proof_1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::bob_proof_1(this),
        _Internal::bob_proof_1(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.PailAffGroupEleRangeProof_V1 bob_proof_2 = 4;
  if (this->_internal_has_bob_proof_2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::bob_proof_2(this),
        _Internal::bob_proof_2(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  return target;
}

size_t Round1P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_b_for_k_gamma = 1;
  if (!this->_internal_message_b_for_k_gamma().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_b_for_k_gamma());
  }

  // string message_b_for_k_w = 2;
  if (!this->_internal_message_b_for_k_w().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_b_for_k_w());
  }

  // .safeheron.proto.PailAffRangeProof bob_proof_1 = 3;
  if (this->_internal_has_bob_proof_1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bob_proof_1_);
  }

  // .safeheron.proto.PailAffGroupEleRangeProof_V1 bob_proof_2 = 4;
  if (this->_internal_has_bob_proof_2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bob_proof_2_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round1P2PMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round1P2PMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round1P2PMessage::GetClassData() const { return &_class_data_; }

void Round1P2PMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round1P2PMessage *>(to)->MergeFrom(
      static_cast<const Round1P2PMessage &>(from));
}


void Round1P2PMessage::MergeFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_b_for_k_gamma().empty()) {
    _internal_set_message_b_for_k_gamma(from._internal_message_b_for_k_gamma());
  }
  if (!from._internal_message_b_for_k_w().empty()) {
    _internal_set_message_b_for_k_w(from._internal_message_b_for_k_w());
  }
  if (from._internal_has_bob_proof_1()) {
    _internal_mutable_bob_proof_1()->::safeheron::proto::PailAffRangeProof::MergeFrom(from._internal_bob_proof_1());
  }
  if (from._internal_has_bob_proof_2()) {
    _internal_mutable_bob_proof_2()->::safeheron::proto::PailAffGroupEleRangeProof_V1::MergeFrom(from._internal_bob_proof_2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round1P2PMessage::CopyFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round1P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round1P2PMessage::IsInitialized() const {
  return true;
}

void Round1P2PMessage::InternalSwap(Round1P2PMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_b_for_k_gamma_, lhs_arena,
      &other->message_b_for_k_gamma_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_b_for_k_w_, lhs_arena,
      &other->message_b_for_k_w_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round1P2PMessage, bob_proof_2_)
      + sizeof(Round1P2PMessage::bob_proof_2_)
      - PROTOBUF_FIELD_OFFSET(Round1P2PMessage, bob_proof_1_)>(
          reinterpret_cast<char*>(&bob_proof_1_),
          reinterpret_cast<char*>(&other->bob_proof_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round1P2PMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg20_2fsign_2eproto_getter, &descriptor_table_gg20_2fsign_2eproto_once,
      file_level_metadata_gg20_2fsign_2eproto[2]);
}

// ===================================================================

class Round2BCMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& t(const Round2BCMessage* msg);
  static const ::safeheron::proto::CurvePoint& h(const Round2BCMessage* msg);
  static const ::safeheron::proto::PedersenProof& pedersen_proof(const Round2BCMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round2BCMessage::_Internal::t(const Round2BCMessage* msg) {
  return *msg->t_;
}
const ::safeheron::proto::CurvePoint&
Round2BCMessage::_Internal::h(const Round2BCMessage* msg) {
  return *msg->h_;
}
const ::safeheron::proto::PedersenProof&
Round2BCMessage::_Internal::pedersen_proof(const Round2BCMessage* msg) {
  return *msg->pedersen_proof_;
}
void Round2BCMessage::clear_t() {
  if (GetArenaForAllocation() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
void Round2BCMessage::clear_h() {
  if (GetArenaForAllocation() == nullptr && h_ != nullptr) {
    delete h_;
  }
  h_ = nullptr;
}
void Round2BCMessage::clear_pedersen_proof() {
  if (GetArenaForAllocation() == nullptr && pedersen_proof_ != nullptr) {
    delete pedersen_proof_;
  }
  pedersen_proof_ = nullptr;
}
Round2BCMessage::Round2BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
}
Round2BCMessage::Round2BCMessage(const Round2BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    delta_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delta().empty()) {
    delta_.Set(from._internal_delta(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_t()) {
    t_ = new ::safeheron::proto::CurvePoint(*from.t_);
  } else {
    t_ = nullptr;
  }
  if (from._internal_has_h()) {
    h_ = new ::safeheron::proto::CurvePoint(*from.h_);
  } else {
    h_ = nullptr;
  }
  if (from._internal_has_pedersen_proof()) {
    pedersen_proof_ = new ::safeheron::proto::PedersenProof(*from.pedersen_proof_);
  } else {
    pedersen_proof_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
}

inline void Round2BCMessage::SharedCtor() {
delta_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  delta_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&t_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pedersen_proof_) -
    reinterpret_cast<char*>(&t_)) + sizeof(pedersen_proof_));
}

Round2BCMessage::~Round2BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round2BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  delta_.Destroy();
  if (this != internal_default_instance()) delete t_;
  if (this != internal_default_instance()) delete h_;
  if (this != internal_default_instance()) delete pedersen_proof_;
}

void Round2BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round2BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delta_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  if (GetArenaForAllocation() == nullptr && h_ != nullptr) {
    delete h_;
  }
  h_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pedersen_proof_ != nullptr) {
    delete pedersen_proof_;
  }
  pedersen_proof_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round2BCMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string delta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_delta();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage.delta"));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint T = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint H = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_h(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.PedersenProof pedersen_proof = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pedersen_proof(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round2BCMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string delta = 1;
  if (!this->_internal_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delta().data(), static_cast<int>(this->_internal_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage.delta");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_delta(), target);
  }

  // .safeheron.proto.CurvePoint T = 2;
  if (this->_internal_has_t()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::t(this),
        _Internal::t(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.CurvePoint H = 3;
  if (this->_internal_has_h()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::h(this),
        _Internal::h(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.PedersenProof pedersen_proof = 4;
  if (this->_internal_has_pedersen_proof()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pedersen_proof(this),
        _Internal::pedersen_proof(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  return target;
}

size_t Round2BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delta = 1;
  if (!this->_internal_delta().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delta());
  }

  // .safeheron.proto.CurvePoint T = 2;
  if (this->_internal_has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // .safeheron.proto.CurvePoint H = 3;
  if (this->_internal_has_h()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *h_);
  }

  // .safeheron.proto.PedersenProof pedersen_proof = 4;
  if (this->_internal_has_pedersen_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pedersen_proof_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round2BCMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round2BCMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round2BCMessage::GetClassData() const { return &_class_data_; }

void Round2BCMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round2BCMessage *>(to)->MergeFrom(
      static_cast<const Round2BCMessage &>(from));
}


void Round2BCMessage::MergeFrom(const Round2BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_delta().empty()) {
    _internal_set_delta(from._internal_delta());
  }
  if (from._internal_has_t()) {
    _internal_mutable_t()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_t());
  }
  if (from._internal_has_h()) {
    _internal_mutable_h()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_h());
  }
  if (from._internal_has_pedersen_proof()) {
    _internal_mutable_pedersen_proof()->::safeheron::proto::PedersenProof::MergeFrom(from._internal_pedersen_proof());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round2BCMessage::CopyFrom(const Round2BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round2BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round2BCMessage::IsInitialized() const {
  return true;
}

void Round2BCMessage::InternalSwap(Round2BCMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &delta_, lhs_arena,
      &other->delta_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round2BCMessage, pedersen_proof_)
      + sizeof(Round2BCMessage::pedersen_proof_)
      - PROTOBUF_FIELD_OFFSET(Round2BCMessage, t_)>(
          reinterpret_cast<char*>(&t_),
          reinterpret_cast<char*>(&other->t_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round2BCMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg20_2fsign_2eproto_getter, &descriptor_table_gg20_2fsign_2eproto_once,
      file_level_metadata_gg20_2fsign_2eproto[3]);
}

// ===================================================================

class Round3BCMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& gamma(const Round3BCMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round3BCMessage::_Internal::gamma(const Round3BCMessage* msg) {
  return *msg->gamma_;
}
void Round3BCMessage::clear_gamma() {
  if (GetArenaForAllocation() == nullptr && gamma_ != nullptr) {
    delete gamma_;
  }
  gamma_ = nullptr;
}
Round3BCMessage::Round3BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
}
Round3BCMessage::Round3BCMessage(const Round3BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blind_factor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    blind_factor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blind_factor().empty()) {
    blind_factor_.Set(from._internal_blind_factor(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_gamma()) {
    gamma_ = new ::safeheron::proto::CurvePoint(*from.gamma_);
  } else {
    gamma_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
}

inline void Round3BCMessage::SharedCtor() {
blind_factor_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  blind_factor_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gamma_ = nullptr;
}

Round3BCMessage::~Round3BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round3BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  blind_factor_.Destroy();
  if (this != internal_default_instance()) delete gamma_;
}

void Round3BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round3BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blind_factor_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && gamma_ != nullptr) {
    delete gamma_;
  }
  gamma_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round3BCMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string blind_factor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_blind_factor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage.blind_factor"));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint Gamma = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamma(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round3BCMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string blind_factor = 1;
  if (!this->_internal_blind_factor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blind_factor().data(), static_cast<int>(this->_internal_blind_factor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage.blind_factor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_blind_factor(), target);
  }

  // .safeheron.proto.CurvePoint Gamma = 2;
  if (this->_internal_has_gamma()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::gamma(this),
        _Internal::gamma(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  return target;
}

size_t Round3BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string blind_factor = 1;
  if (!this->_internal_blind_factor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blind_factor());
  }

  // .safeheron.proto.CurvePoint Gamma = 2;
  if (this->_internal_has_gamma()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gamma_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round3BCMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round3BCMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round3BCMessage::GetClassData() const { return &_class_data_; }

void Round3BCMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round3BCMessage *>(to)->MergeFrom(
      static_cast<const Round3BCMessage &>(from));
}


void Round3BCMessage::MergeFrom(const Round3BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_blind_factor().empty()) {
    _internal_set_blind_factor(from._internal_blind_factor());
  }
  if (from._internal_has_gamma()) {
    _internal_mutable_gamma()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_gamma());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round3BCMessage::CopyFrom(const Round3BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round3BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round3BCMessage::IsInitialized() const {
  return true;
}

void Round3BCMessage::InternalSwap(Round3BCMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &blind_factor_, lhs_arena,
      &other->blind_factor_, rhs_arena
  );
  swap(gamma_, other->gamma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Round3BCMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg20_2fsign_2eproto_getter, &descriptor_table_gg20_2fsign_2eproto_once,
      file_level_metadata_gg20_2fsign_2eproto[4]);
}

// ===================================================================

class Round4BCMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& r(const Round4BCMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round4BCMessage::_Internal::r(const Round4BCMessage* msg) {
  return *msg->r_;
}
void Round4BCMessage::clear_r() {
  if (GetArenaForAllocation() == nullptr && r_ != nullptr) {
    delete r_;
  }
  r_ = nullptr;
}
Round4BCMessage::Round4BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
}
Round4BCMessage::Round4BCMessage(const Round4BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_r()) {
    r_ = new ::safeheron::proto::CurvePoint(*from.r_);
  } else {
    r_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
}

inline void Round4BCMessage::SharedCtor() {
r_ = nullptr;
}

Round4BCMessage::~Round4BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round4BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete r_;
}

void Round4BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round4BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && r_ != nullptr) {
    delete r_;
  }
  r_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round4BCMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .safeheron.proto.CurvePoint R = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_r(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round4BCMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint R = 1;
  if (this->_internal_has_r()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::r(this),
        _Internal::r(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  return target;
}

size_t Round4BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint R = 1;
  if (this->_internal_has_r()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *r_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round4BCMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round4BCMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round4BCMessage::GetClassData() const { return &_class_data_; }

void Round4BCMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round4BCMessage *>(to)->MergeFrom(
      static_cast<const Round4BCMessage &>(from));
}


void Round4BCMessage::MergeFrom(const Round4BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_r()) {
    _internal_mutable_r()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_r());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round4BCMessage::CopyFrom(const Round4BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round4BCMessage::IsInitialized() const {
  return true;
}

void Round4BCMessage::InternalSwap(Round4BCMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(r_, other->r_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Round4BCMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg20_2fsign_2eproto_getter, &descriptor_table_gg20_2fsign_2eproto_once,
      file_level_metadata_gg20_2fsign_2eproto[5]);
}

// ===================================================================

class Round4P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::PailEncGroupEleRangeProof& pail_enc_group_ele_proof(const Round4P2PMessage* msg);
};

const ::safeheron::proto::PailEncGroupEleRangeProof&
Round4P2PMessage::_Internal::pail_enc_group_ele_proof(const Round4P2PMessage* msg) {
  return *msg->pail_enc_group_ele_proof_;
}
void Round4P2PMessage::clear_pail_enc_group_ele_proof() {
  if (GetArenaForAllocation() == nullptr && pail_enc_group_ele_proof_ != nullptr) {
    delete pail_enc_group_ele_proof_;
  }
  pail_enc_group_ele_proof_ = nullptr;
}
Round4P2PMessage::Round4P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
}
Round4P2PMessage::Round4P2PMessage(const Round4P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pail_enc_group_ele_proof()) {
    pail_enc_group_ele_proof_ = new ::safeheron::proto::PailEncGroupEleRangeProof(*from.pail_enc_group_ele_proof_);
  } else {
    pail_enc_group_ele_proof_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
}

inline void Round4P2PMessage::SharedCtor() {
pail_enc_group_ele_proof_ = nullptr;
}

Round4P2PMessage::~Round4P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round4P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pail_enc_group_ele_proof_;
}

void Round4P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round4P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pail_enc_group_ele_proof_ != nullptr) {
    delete pail_enc_group_ele_proof_;
  }
  pail_enc_group_ele_proof_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round4P2PMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .safeheron.proto.PailEncGroupEleRangeProof pail_enc_group_ele_proof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pail_enc_group_ele_proof(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round4P2PMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.PailEncGroupEleRangeProof pail_enc_group_ele_proof = 2;
  if (this->_internal_has_pail_enc_group_ele_proof()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pail_enc_group_ele_proof(this),
        _Internal::pail_enc_group_ele_proof(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  return target;
}

size_t Round4P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .safeheron.proto.PailEncGroupEleRangeProof pail_enc_group_ele_proof = 2;
  if (this->_internal_has_pail_enc_group_ele_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pail_enc_group_ele_proof_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round4P2PMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round4P2PMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round4P2PMessage::GetClassData() const { return &_class_data_; }

void Round4P2PMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round4P2PMessage *>(to)->MergeFrom(
      static_cast<const Round4P2PMessage &>(from));
}


void Round4P2PMessage::MergeFrom(const Round4P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pail_enc_group_ele_proof()) {
    _internal_mutable_pail_enc_group_ele_proof()->::safeheron::proto::PailEncGroupEleRangeProof::MergeFrom(from._internal_pail_enc_group_ele_proof());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round4P2PMessage::CopyFrom(const Round4P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round4P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round4P2PMessage::IsInitialized() const {
  return true;
}

void Round4P2PMessage::InternalSwap(Round4P2PMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pail_enc_group_ele_proof_, other->pail_enc_group_ele_proof_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Round4P2PMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg20_2fsign_2eproto_getter, &descriptor_table_gg20_2fsign_2eproto_once,
      file_level_metadata_gg20_2fsign_2eproto[6]);
}

// ===================================================================

class Round5BCMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& s(const Round5BCMessage* msg);
  static const ::safeheron::proto::HEGProof_V3& heg_proof(const Round5BCMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round5BCMessage::_Internal::s(const Round5BCMessage* msg) {
  return *msg->s_;
}
const ::safeheron::proto::HEGProof_V3&
Round5BCMessage::_Internal::heg_proof(const Round5BCMessage* msg) {
  return *msg->heg_proof_;
}
void Round5BCMessage::clear_s() {
  if (GetArenaForAllocation() == nullptr && s_ != nullptr) {
    delete s_;
  }
  s_ = nullptr;
}
void Round5BCMessage::clear_heg_proof() {
  if (GetArenaForAllocation() == nullptr && heg_proof_ != nullptr) {
    delete heg_proof_;
  }
  heg_proof_ = nullptr;
}
Round5BCMessage::Round5BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
}
Round5BCMessage::Round5BCMessage(const Round5BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_s()) {
    s_ = new ::safeheron::proto::CurvePoint(*from.s_);
  } else {
    s_ = nullptr;
  }
  if (from._internal_has_heg_proof()) {
    heg_proof_ = new ::safeheron::proto::HEGProof_V3(*from.heg_proof_);
  } else {
    heg_proof_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
}

inline void Round5BCMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heg_proof_) -
    reinterpret_cast<char*>(&s_)) + sizeof(heg_proof_));
}

Round5BCMessage::~Round5BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round5BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete s_;
  if (this != internal_default_instance()) delete heg_proof_;
}

void Round5BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round5BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && s_ != nullptr) {
    delete s_;
  }
  s_ = nullptr;
  if (GetArenaForAllocation() == nullptr && heg_proof_ != nullptr) {
    delete heg_proof_;
  }
  heg_proof_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round5BCMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .safeheron.proto.CurvePoint S = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_s(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.HEGProof_V3 heg_proof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_heg_proof(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round5BCMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint S = 1;
  if (this->_internal_has_s()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::s(this),
        _Internal::s(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.HEGProof_V3 heg_proof = 2;
  if (this->_internal_has_heg_proof()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::heg_proof(this),
        _Internal::heg_proof(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  return target;
}

size_t Round5BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint S = 1;
  if (this->_internal_has_s()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *s_);
  }

  // .safeheron.proto.HEGProof_V3 heg_proof = 2;
  if (this->_internal_has_heg_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heg_proof_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round5BCMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round5BCMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round5BCMessage::GetClassData() const { return &_class_data_; }

void Round5BCMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round5BCMessage *>(to)->MergeFrom(
      static_cast<const Round5BCMessage &>(from));
}


void Round5BCMessage::MergeFrom(const Round5BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_s()) {
    _internal_mutable_s()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_s());
  }
  if (from._internal_has_heg_proof()) {
    _internal_mutable_heg_proof()->::safeheron::proto::HEGProof_V3::MergeFrom(from._internal_heg_proof());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round5BCMessage::CopyFrom(const Round5BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round5BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round5BCMessage::IsInitialized() const {
  return true;
}

void Round5BCMessage::InternalSwap(Round5BCMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round5BCMessage, heg_proof_)
      + sizeof(Round5BCMessage::heg_proof_)
      - PROTOBUF_FIELD_OFFSET(Round5BCMessage, s_)>(
          reinterpret_cast<char*>(&s_),
          reinterpret_cast<char*>(&other->s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round5BCMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg20_2fsign_2eproto_getter, &descriptor_table_gg20_2fsign_2eproto_once,
      file_level_metadata_gg20_2fsign_2eproto[7]);
}

// ===================================================================

class Round6BCMessage::_Internal {
 public:
};

Round6BCMessage::Round6BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
}
Round6BCMessage::Round6BCMessage(const Round6BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  si_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    si_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_si().empty()) {
    si_.Set(from._internal_si(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
}

inline void Round6BCMessage::SharedCtor() {
si_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  si_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Round6BCMessage::~Round6BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round6BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  si_.Destroy();
}

void Round6BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round6BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  si_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round6BCMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string si = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_si();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage.si"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round6BCMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string si = 1;
  if (!this->_internal_si().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_si().data(), static_cast<int>(this->_internal_si().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage.si");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_si(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  return target;
}

size_t Round6BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string si = 1;
  if (!this->_internal_si().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_si());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round6BCMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round6BCMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round6BCMessage::GetClassData() const { return &_class_data_; }

void Round6BCMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round6BCMessage *>(to)->MergeFrom(
      static_cast<const Round6BCMessage &>(from));
}


void Round6BCMessage::MergeFrom(const Round6BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_si().empty()) {
    _internal_set_si(from._internal_si());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round6BCMessage::CopyFrom(const Round6BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg20.sign.Round6BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round6BCMessage::IsInitialized() const {
  return true;
}

void Round6BCMessage::InternalSwap(Round6BCMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &si_, lhs_arena,
      &other->si_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Round6BCMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg20_2fsign_2eproto_getter, &descriptor_table_gg20_2fsign_2eproto_once,
      file_level_metadata_gg20_2fsign_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sign
}  // namespace gg20
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0P2PMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round0P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round1P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round2BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round3BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4BCMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4P2PMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round4P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round5BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round6BCMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round6BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg20::sign::Round6BCMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
