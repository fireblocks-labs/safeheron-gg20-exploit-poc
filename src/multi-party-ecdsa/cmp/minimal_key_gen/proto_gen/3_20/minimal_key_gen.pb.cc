// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmp/minimal_key_gen.proto

#include "minimal_key_gen.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace minimal_key_gen {
PROTOBUF_CONSTEXPR Round0BCMessage::Round0BCMessage(
    ::_pbi::ConstantInitialized)
  : sid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , v_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Round0BCMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round0BCMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round0BCMessageDefaultTypeInternal() {}
  union {
    Round0BCMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round0BCMessageDefaultTypeInternal _Round0BCMessage_default_instance_;
PROTOBUF_CONSTEXPR Round1BCMessage::Round1BCMessage(
    ::_pbi::ConstantInitialized)
  : party_id_arr_1_()
  , g_x_arr_()
  , c_()
  , sid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , u_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , g_x_(nullptr)
  , a_(nullptr)
  , b_(nullptr){}
struct Round1BCMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round1BCMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round1BCMessageDefaultTypeInternal() {}
  union {
    Round1BCMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round1BCMessageDefaultTypeInternal _Round1BCMessage_default_instance_;
PROTOBUF_CONSTEXPR Round1P2PMessage::Round1P2PMessage(
    ::_pbi::ConstantInitialized)
  : sid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , x_ij_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Round1P2PMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round1P2PMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round1P2PMessageDefaultTypeInternal() {}
  union {
    Round1P2PMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round1P2PMessageDefaultTypeInternal _Round1P2PMessage_default_instance_;
PROTOBUF_CONSTEXPR Round2BCMessage::Round2BCMessage(
    ::_pbi::ConstantInitialized)
  : sid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , psi_(nullptr)
  , phi_(nullptr){}
struct Round2BCMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round2BCMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round2BCMessageDefaultTypeInternal() {}
  union {
    Round2BCMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round2BCMessageDefaultTypeInternal _Round2BCMessage_default_instance_;
}  // namespace minimal_key_gen
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
static ::_pb::Metadata file_level_metadata_cmp_2fminimal_5fkey_5fgen_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cmp_2fminimal_5fkey_5fgen_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cmp_2fminimal_5fkey_5fgen_2eproto = nullptr;

const uint32_t TableStruct_cmp_2fminimal_5fkey_5fgen_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round0BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round0BCMessage, sid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round0BCMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round0BCMessage, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage, sid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage, rid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage, g_x_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage, a_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage, b_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage, party_id_arr_1_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage, g_x_arr_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage, c_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage, u_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1P2PMessage, sid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1P2PMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1P2PMessage, x_ij_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round2BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round2BCMessage, sid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round2BCMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round2BCMessage, psi_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round2BCMessage, phi_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round0BCMessage)},
  { 9, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage)},
  { 25, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1P2PMessage)},
  { 34, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round2BCMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::_Round0BCMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::_Round1BCMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::_Round1P2PMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::_Round2BCMessage_default_instance_._instance,
};

const char descriptor_table_protodef_cmp_2fminimal_5fkey_5fgen_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031cmp/minimal_key_gen.proto\0225safeheron.p"
  "roto.multi_party_ecdsa.cmp.minimal_key_g"
  "en\032\021curve_point.proto\032\tzkp.proto\"8\n\017Roun"
  "d0BCMessage\022\013\n\003sid\030\001 \001(\t\022\r\n\005index\030\002 \001(\t\022"
  "\t\n\001V\030\003 \001(\t\"\255\002\n\017Round1BCMessage\022\013\n\003sid\030\001 "
  "\001(\t\022\r\n\005index\030\002 \001(\t\022\013\n\003rid\030\003 \001(\t\022(\n\003g_x\030\004"
  " \001(\0132\033.safeheron.proto.CurvePoint\022&\n\001A\030\005"
  " \001(\0132\033.safeheron.proto.CurvePoint\022&\n\001B\030\006"
  " \001(\0132\033.safeheron.proto.CurvePoint\022\026\n\016par"
  "ty_id_arr_1\030\007 \003(\t\022,\n\007g_x_arr\030\010 \003(\0132\033.saf"
  "eheron.proto.CurvePoint\022&\n\001c\030\t \003(\0132\033.saf"
  "eheron.proto.CurvePoint\022\t\n\001u\030\n \001(\t\"<\n\020Ro"
  "und1P2PMessage\022\013\n\003sid\030\001 \001(\t\022\r\n\005index\030\002 \001"
  "(\t\022\014\n\004x_ij\030\013 \001(\t\"\205\001\n\017Round2BCMessage\022\013\n\003"
  "sid\030\001 \001(\t\022\r\n\005index\030\002 \001(\t\022*\n\003psi\030\003 \001(\0132\035."
  "safeheron.proto.DLogProof_V2\022*\n\003phi\030\004 \001("
  "\0132\035.safeheron.proto.DLogProof_V2b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto_deps[2] = {
  &::descriptor_table_curve_5fpoint_2eproto,
  &::descriptor_table_zkp_2eproto,
};
static ::_pbi::once_flag descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto = {
    false, false, 680, descriptor_table_protodef_cmp_2fminimal_5fkey_5fgen_2eproto,
    "cmp/minimal_key_gen.proto",
    &descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto_once, descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_cmp_2fminimal_5fkey_5fgen_2eproto::offsets,
    file_level_metadata_cmp_2fminimal_5fkey_5fgen_2eproto, file_level_enum_descriptors_cmp_2fminimal_5fkey_5fgen_2eproto,
    file_level_service_descriptors_cmp_2fminimal_5fkey_5fgen_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto_getter() {
  return &descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cmp_2fminimal_5fkey_5fgen_2eproto(&descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto);
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace minimal_key_gen {

// ===================================================================

class Round0BCMessage::_Internal {
 public:
};

Round0BCMessage::Round0BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage)
}
Round0BCMessage::Round0BCMessage(const Round0BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    sid_.Set(from._internal_sid(), 
      GetArenaForAllocation());
  }
  index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    index_.Set(from._internal_index(), 
      GetArenaForAllocation());
  }
  v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    v_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v().empty()) {
    v_.Set(from._internal_v(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage)
}

inline void Round0BCMessage::SharedCtor() {
sid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
v_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  v_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Round0BCMessage::~Round0BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round0BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sid_.Destroy();
  index_.Destroy();
  v_.Destroy();
}

void Round0BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round0BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmpty();
  index_.ClearToEmpty();
  v_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round0BCMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.sid"));
        } else
          goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.index"));
        } else
          goto handle_unusual;
        continue;
      // string V = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_v();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.V"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round0BCMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // string V = 3;
  if (!this->_internal_v().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v().data(), static_cast<int>(this->_internal_v().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.V");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage)
  return target;
}

size_t Round0BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string V = 3;
  if (!this->_internal_v().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round0BCMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round0BCMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round0BCMessage::GetClassData() const { return &_class_data_; }

void Round0BCMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round0BCMessage *>(to)->MergeFrom(
      static_cast<const Round0BCMessage &>(from));
}


void Round0BCMessage::MergeFrom(const Round0BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sid().empty()) {
    _internal_set_sid(from._internal_sid());
  }
  if (!from._internal_index().empty()) {
    _internal_set_index(from._internal_index());
  }
  if (!from._internal_v().empty()) {
    _internal_set_v(from._internal_v());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round0BCMessage::CopyFrom(const Round0BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round0BCMessage::IsInitialized() const {
  return true;
}

void Round0BCMessage::InternalSwap(Round0BCMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sid_, lhs_arena,
      &other->sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &index_, lhs_arena,
      &other->index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &v_, lhs_arena,
      &other->v_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Round0BCMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto_getter, &descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto_once,
      file_level_metadata_cmp_2fminimal_5fkey_5fgen_2eproto[0]);
}

// ===================================================================

class Round1BCMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& g_x(const Round1BCMessage* msg);
  static const ::safeheron::proto::CurvePoint& a(const Round1BCMessage* msg);
  static const ::safeheron::proto::CurvePoint& b(const Round1BCMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round1BCMessage::_Internal::g_x(const Round1BCMessage* msg) {
  return *msg->g_x_;
}
const ::safeheron::proto::CurvePoint&
Round1BCMessage::_Internal::a(const Round1BCMessage* msg) {
  return *msg->a_;
}
const ::safeheron::proto::CurvePoint&
Round1BCMessage::_Internal::b(const Round1BCMessage* msg) {
  return *msg->b_;
}
void Round1BCMessage::clear_g_x() {
  if (GetArenaForAllocation() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
}
void Round1BCMessage::clear_a() {
  if (GetArenaForAllocation() == nullptr && a_ != nullptr) {
    delete a_;
  }
  a_ = nullptr;
}
void Round1BCMessage::clear_b() {
  if (GetArenaForAllocation() == nullptr && b_ != nullptr) {
    delete b_;
  }
  b_ = nullptr;
}
void Round1BCMessage::clear_g_x_arr() {
  g_x_arr_.Clear();
}
void Round1BCMessage::clear_c() {
  c_.Clear();
}
Round1BCMessage::Round1BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  party_id_arr_1_(arena),
  g_x_arr_(arena),
  c_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage)
}
Round1BCMessage::Round1BCMessage(const Round1BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      party_id_arr_1_(from.party_id_arr_1_),
      g_x_arr_(from.g_x_arr_),
      c_(from.c_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    sid_.Set(from._internal_sid(), 
      GetArenaForAllocation());
  }
  index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    index_.Set(from._internal_index(), 
      GetArenaForAllocation());
  }
  rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    rid_.Set(from._internal_rid(), 
      GetArenaForAllocation());
  }
  u_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    u_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_u().empty()) {
    u_.Set(from._internal_u(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_g_x()) {
    g_x_ = new ::safeheron::proto::CurvePoint(*from.g_x_);
  } else {
    g_x_ = nullptr;
  }
  if (from._internal_has_a()) {
    a_ = new ::safeheron::proto::CurvePoint(*from.a_);
  } else {
    a_ = nullptr;
  }
  if (from._internal_has_b()) {
    b_ = new ::safeheron::proto::CurvePoint(*from.b_);
  } else {
    b_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage)
}

inline void Round1BCMessage::SharedCtor() {
sid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
u_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  u_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&g_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&g_x_)) + sizeof(b_));
}

Round1BCMessage::~Round1BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round1BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sid_.Destroy();
  index_.Destroy();
  rid_.Destroy();
  u_.Destroy();
  if (this != internal_default_instance()) delete g_x_;
  if (this != internal_default_instance()) delete a_;
  if (this != internal_default_instance()) delete b_;
}

void Round1BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round1BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_arr_1_.Clear();
  g_x_arr_.Clear();
  c_.Clear();
  sid_.ClearToEmpty();
  index_.ClearToEmpty();
  rid_.ClearToEmpty();
  u_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
  if (GetArenaForAllocation() == nullptr && a_ != nullptr) {
    delete a_;
  }
  a_ = nullptr;
  if (GetArenaForAllocation() == nullptr && b_ != nullptr) {
    delete b_;
  }
  b_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round1BCMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.sid"));
        } else
          goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.index"));
        } else
          goto handle_unusual;
        continue;
      // string rid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.rid"));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint g_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_x(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint A = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_a(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint B = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_b(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string party_id_arr_1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_party_id_arr_1();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .safeheron.proto.CurvePoint g_x_arr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_g_x_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .safeheron.proto.CurvePoint c = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_c(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string u = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_u();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.u"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round1BCMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // string rid = 3;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.rid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rid(), target);
  }

  // .safeheron.proto.CurvePoint g_x = 4;
  if (this->_internal_has_g_x()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::g_x(this),
        _Internal::g_x(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.CurvePoint A = 5;
  if (this->_internal_has_a()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::a(this),
        _Internal::a(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.CurvePoint B = 6;
  if (this->_internal_has_b()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::b(this),
        _Internal::b(this).GetCachedSize(), target, stream);
  }

  // repeated string party_id_arr_1 = 7;
  for (int i = 0, n = this->_internal_party_id_arr_1_size(); i < n; i++) {
    const auto& s = this->_internal_party_id_arr_1(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1");
    target = stream->WriteString(7, s, target);
  }

  // repeated .safeheron.proto.CurvePoint g_x_arr = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_g_x_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_g_x_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .safeheron.proto.CurvePoint c = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_c_size()); i < n; i++) {
    const auto& repfield = this->_internal_c(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string u = 10;
  if (!this->_internal_u().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_u().data(), static_cast<int>(this->_internal_u().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.u");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_u(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage)
  return target;
}

size_t Round1BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string party_id_arr_1 = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(party_id_arr_1_.size());
  for (int i = 0, n = party_id_arr_1_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      party_id_arr_1_.Get(i));
  }

  // repeated .safeheron.proto.CurvePoint g_x_arr = 8;
  total_size += 1UL * this->_internal_g_x_arr_size();
  for (const auto& msg : this->g_x_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .safeheron.proto.CurvePoint c = 9;
  total_size += 1UL * this->_internal_c_size();
  for (const auto& msg : this->c_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string rid = 3;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string u = 10;
  if (!this->_internal_u().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_u());
  }

  // .safeheron.proto.CurvePoint g_x = 4;
  if (this->_internal_has_g_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_x_);
  }

  // .safeheron.proto.CurvePoint A = 5;
  if (this->_internal_has_a()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *a_);
  }

  // .safeheron.proto.CurvePoint B = 6;
  if (this->_internal_has_b()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round1BCMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round1BCMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round1BCMessage::GetClassData() const { return &_class_data_; }

void Round1BCMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round1BCMessage *>(to)->MergeFrom(
      static_cast<const Round1BCMessage &>(from));
}


void Round1BCMessage::MergeFrom(const Round1BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  party_id_arr_1_.MergeFrom(from.party_id_arr_1_);
  g_x_arr_.MergeFrom(from.g_x_arr_);
  c_.MergeFrom(from.c_);
  if (!from._internal_sid().empty()) {
    _internal_set_sid(from._internal_sid());
  }
  if (!from._internal_index().empty()) {
    _internal_set_index(from._internal_index());
  }
  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_u().empty()) {
    _internal_set_u(from._internal_u());
  }
  if (from._internal_has_g_x()) {
    _internal_mutable_g_x()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_g_x());
  }
  if (from._internal_has_a()) {
    _internal_mutable_a()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_a());
  }
  if (from._internal_has_b()) {
    _internal_mutable_b()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_b());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round1BCMessage::CopyFrom(const Round1BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round1BCMessage::IsInitialized() const {
  return true;
}

void Round1BCMessage::InternalSwap(Round1BCMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  party_id_arr_1_.InternalSwap(&other->party_id_arr_1_);
  g_x_arr_.InternalSwap(&other->g_x_arr_);
  c_.InternalSwap(&other->c_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sid_, lhs_arena,
      &other->sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &index_, lhs_arena,
      &other->index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &u_, lhs_arena,
      &other->u_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round1BCMessage, b_)
      + sizeof(Round1BCMessage::b_)
      - PROTOBUF_FIELD_OFFSET(Round1BCMessage, g_x_)>(
          reinterpret_cast<char*>(&g_x_),
          reinterpret_cast<char*>(&other->g_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round1BCMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto_getter, &descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto_once,
      file_level_metadata_cmp_2fminimal_5fkey_5fgen_2eproto[1]);
}

// ===================================================================

class Round1P2PMessage::_Internal {
 public:
};

Round1P2PMessage::Round1P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage)
}
Round1P2PMessage::Round1P2PMessage(const Round1P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    sid_.Set(from._internal_sid(), 
      GetArenaForAllocation());
  }
  index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    index_.Set(from._internal_index(), 
      GetArenaForAllocation());
  }
  x_ij_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    x_ij_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x_ij().empty()) {
    x_ij_.Set(from._internal_x_ij(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage)
}

inline void Round1P2PMessage::SharedCtor() {
sid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
x_ij_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  x_ij_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Round1P2PMessage::~Round1P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round1P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sid_.Destroy();
  index_.Destroy();
  x_ij_.Destroy();
}

void Round1P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round1P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmpty();
  index_.ClearToEmpty();
  x_ij_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round1P2PMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.sid"));
        } else
          goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.index"));
        } else
          goto handle_unusual;
        continue;
      // string x_ij = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_x_ij();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.x_ij"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round1P2PMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // string x_ij = 11;
  if (!this->_internal_x_ij().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x_ij().data(), static_cast<int>(this->_internal_x_ij().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.x_ij");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_x_ij(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage)
  return target;
}

size_t Round1P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string x_ij = 11;
  if (!this->_internal_x_ij().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x_ij());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round1P2PMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round1P2PMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round1P2PMessage::GetClassData() const { return &_class_data_; }

void Round1P2PMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round1P2PMessage *>(to)->MergeFrom(
      static_cast<const Round1P2PMessage &>(from));
}


void Round1P2PMessage::MergeFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sid().empty()) {
    _internal_set_sid(from._internal_sid());
  }
  if (!from._internal_index().empty()) {
    _internal_set_index(from._internal_index());
  }
  if (!from._internal_x_ij().empty()) {
    _internal_set_x_ij(from._internal_x_ij());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round1P2PMessage::CopyFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round1P2PMessage::IsInitialized() const {
  return true;
}

void Round1P2PMessage::InternalSwap(Round1P2PMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sid_, lhs_arena,
      &other->sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &index_, lhs_arena,
      &other->index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &x_ij_, lhs_arena,
      &other->x_ij_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Round1P2PMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto_getter, &descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto_once,
      file_level_metadata_cmp_2fminimal_5fkey_5fgen_2eproto[2]);
}

// ===================================================================

class Round2BCMessage::_Internal {
 public:
  static const ::safeheron::proto::DLogProof_V2& psi(const Round2BCMessage* msg);
  static const ::safeheron::proto::DLogProof_V2& phi(const Round2BCMessage* msg);
};

const ::safeheron::proto::DLogProof_V2&
Round2BCMessage::_Internal::psi(const Round2BCMessage* msg) {
  return *msg->psi_;
}
const ::safeheron::proto::DLogProof_V2&
Round2BCMessage::_Internal::phi(const Round2BCMessage* msg) {
  return *msg->phi_;
}
void Round2BCMessage::clear_psi() {
  if (GetArenaForAllocation() == nullptr && psi_ != nullptr) {
    delete psi_;
  }
  psi_ = nullptr;
}
void Round2BCMessage::clear_phi() {
  if (GetArenaForAllocation() == nullptr && phi_ != nullptr) {
    delete phi_;
  }
  phi_ = nullptr;
}
Round2BCMessage::Round2BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage)
}
Round2BCMessage::Round2BCMessage(const Round2BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    sid_.Set(from._internal_sid(), 
      GetArenaForAllocation());
  }
  index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    index_.Set(from._internal_index(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_psi()) {
    psi_ = new ::safeheron::proto::DLogProof_V2(*from.psi_);
  } else {
    psi_ = nullptr;
  }
  if (from._internal_has_phi()) {
    phi_ = new ::safeheron::proto::DLogProof_V2(*from.phi_);
  } else {
    phi_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage)
}

inline void Round2BCMessage::SharedCtor() {
sid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&psi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phi_) -
    reinterpret_cast<char*>(&psi_)) + sizeof(phi_));
}

Round2BCMessage::~Round2BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round2BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sid_.Destroy();
  index_.Destroy();
  if (this != internal_default_instance()) delete psi_;
  if (this != internal_default_instance()) delete phi_;
}

void Round2BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round2BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmpty();
  index_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && psi_ != nullptr) {
    delete psi_;
  }
  psi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && phi_ != nullptr) {
    delete phi_;
  }
  phi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round2BCMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.sid"));
        } else
          goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.index"));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.DLogProof_V2 psi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_psi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.DLogProof_V2 phi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_phi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round2BCMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sid(), target);
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // .safeheron.proto.DLogProof_V2 psi = 3;
  if (this->_internal_has_psi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::psi(this),
        _Internal::psi(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.DLogProof_V2 phi = 4;
  if (this->_internal_has_phi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::phi(this),
        _Internal::phi(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage)
  return target;
}

size_t Round2BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sid = 1;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // .safeheron.proto.DLogProof_V2 psi = 3;
  if (this->_internal_has_psi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *psi_);
  }

  // .safeheron.proto.DLogProof_V2 phi = 4;
  if (this->_internal_has_phi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phi_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round2BCMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round2BCMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round2BCMessage::GetClassData() const { return &_class_data_; }

void Round2BCMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round2BCMessage *>(to)->MergeFrom(
      static_cast<const Round2BCMessage &>(from));
}


void Round2BCMessage::MergeFrom(const Round2BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sid().empty()) {
    _internal_set_sid(from._internal_sid());
  }
  if (!from._internal_index().empty()) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_has_psi()) {
    _internal_mutable_psi()->::safeheron::proto::DLogProof_V2::MergeFrom(from._internal_psi());
  }
  if (from._internal_has_phi()) {
    _internal_mutable_phi()->::safeheron::proto::DLogProof_V2::MergeFrom(from._internal_phi());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round2BCMessage::CopyFrom(const Round2BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round2BCMessage::IsInitialized() const {
  return true;
}

void Round2BCMessage::InternalSwap(Round2BCMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sid_, lhs_arena,
      &other->sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &index_, lhs_arena,
      &other->index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round2BCMessage, phi_)
      + sizeof(Round2BCMessage::phi_)
      - PROTOBUF_FIELD_OFFSET(Round2BCMessage, psi_)>(
          reinterpret_cast<char*>(&psi_),
          reinterpret_cast<char*>(&other->psi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round2BCMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto_getter, &descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto_once,
      file_level_metadata_cmp_2fminimal_5fkey_5fgen_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace minimal_key_gen
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round0BCMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round0BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round0BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1P2PMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round2BCMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round2BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round2BCMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
