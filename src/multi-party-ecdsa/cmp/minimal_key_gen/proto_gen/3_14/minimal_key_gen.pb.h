// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmp/minimal_key_gen.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cmp_2fminimal_5fkey_5fgen_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cmp_2fminimal_5fkey_5fgen_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "crypto-curve/proto_gen/curve_point.pb.switch.h"
#include "crypto-zkp/proto_gen/zkp.pb.switch.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cmp_2fminimal_5fkey_5fgen_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cmp_2fminimal_5fkey_5fgen_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto;
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace minimal_key_gen {
class Round0BCMessage;
class Round0BCMessageDefaultTypeInternal;
extern Round0BCMessageDefaultTypeInternal _Round0BCMessage_default_instance_;
class Round1BCMessage;
class Round1BCMessageDefaultTypeInternal;
extern Round1BCMessageDefaultTypeInternal _Round1BCMessage_default_instance_;
class Round1P2PMessage;
class Round1P2PMessageDefaultTypeInternal;
extern Round1P2PMessageDefaultTypeInternal _Round1P2PMessage_default_instance_;
class Round2BCMessage;
class Round2BCMessageDefaultTypeInternal;
extern Round2BCMessageDefaultTypeInternal _Round2BCMessage_default_instance_;
}  // namespace minimal_key_gen
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round0BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round0BCMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1BCMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1P2PMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round1P2PMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round2BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::minimal_key_gen::Round2BCMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace minimal_key_gen {

// ===================================================================

class Round0BCMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage) */ {
 public:
  inline Round0BCMessage() : Round0BCMessage(nullptr) {}
  virtual ~Round0BCMessage();

  Round0BCMessage(const Round0BCMessage& from);
  Round0BCMessage(Round0BCMessage&& from) noexcept
    : Round0BCMessage() {
    *this = ::std::move(from);
  }

  inline Round0BCMessage& operator=(const Round0BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round0BCMessage& operator=(Round0BCMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round0BCMessage& default_instance();

  static inline const Round0BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round0BCMessage*>(
               &_Round0BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Round0BCMessage& a, Round0BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round0BCMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round0BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round0BCMessage* New() const final {
    return CreateMaybeMessage<Round0BCMessage>(nullptr);
  }

  Round0BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round0BCMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round0BCMessage& from);
  void MergeFrom(const Round0BCMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round0BCMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage";
  }
  protected:
  explicit Round0BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto);
    return ::descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidFieldNumber = 1,
    kIndexFieldNumber = 2,
    kVFieldNumber = 3,
  };
  // string sid = 1;
  void clear_sid();
  const std::string& sid() const;
  void set_sid(const std::string& value);
  void set_sid(std::string&& value);
  void set_sid(const char* value);
  void set_sid(const char* value, size_t size);
  std::string* mutable_sid();
  std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string V = 3;
  void clear_v();
  const std::string& v() const;
  void set_v(const std::string& value);
  void set_v(std::string&& value);
  void set_v(const char* value);
  void set_v(const char* value, size_t size);
  std::string* mutable_v();
  std::string* release_v();
  void set_allocated_v(std::string* v);
  private:
  const std::string& _internal_v() const;
  void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fminimal_5fkey_5fgen_2eproto;
};
// -------------------------------------------------------------------

class Round1BCMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage) */ {
 public:
  inline Round1BCMessage() : Round1BCMessage(nullptr) {}
  virtual ~Round1BCMessage();

  Round1BCMessage(const Round1BCMessage& from);
  Round1BCMessage(Round1BCMessage&& from) noexcept
    : Round1BCMessage() {
    *this = ::std::move(from);
  }

  inline Round1BCMessage& operator=(const Round1BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round1BCMessage& operator=(Round1BCMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round1BCMessage& default_instance();

  static inline const Round1BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round1BCMessage*>(
               &_Round1BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Round1BCMessage& a, Round1BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round1BCMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round1BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round1BCMessage* New() const final {
    return CreateMaybeMessage<Round1BCMessage>(nullptr);
  }

  Round1BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round1BCMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round1BCMessage& from);
  void MergeFrom(const Round1BCMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round1BCMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage";
  }
  protected:
  explicit Round1BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto);
    return ::descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdArr1FieldNumber = 7,
    kGXArrFieldNumber = 8,
    kCFieldNumber = 9,
    kSidFieldNumber = 1,
    kIndexFieldNumber = 2,
    kRidFieldNumber = 3,
    kUFieldNumber = 10,
    kGXFieldNumber = 4,
    kAFieldNumber = 5,
    kBFieldNumber = 6,
  };
  // repeated string party_id_arr_1 = 7;
  int party_id_arr_1_size() const;
  private:
  int _internal_party_id_arr_1_size() const;
  public:
  void clear_party_id_arr_1();
  const std::string& party_id_arr_1(int index) const;
  std::string* mutable_party_id_arr_1(int index);
  void set_party_id_arr_1(int index, const std::string& value);
  void set_party_id_arr_1(int index, std::string&& value);
  void set_party_id_arr_1(int index, const char* value);
  void set_party_id_arr_1(int index, const char* value, size_t size);
  std::string* add_party_id_arr_1();
  void add_party_id_arr_1(const std::string& value);
  void add_party_id_arr_1(std::string&& value);
  void add_party_id_arr_1(const char* value);
  void add_party_id_arr_1(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& party_id_arr_1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_party_id_arr_1();
  private:
  const std::string& _internal_party_id_arr_1(int index) const;
  std::string* _internal_add_party_id_arr_1();
  public:

  // repeated .safeheron.proto.CurvePoint g_x_arr = 8;
  int g_x_arr_size() const;
  private:
  int _internal_g_x_arr_size() const;
  public:
  void clear_g_x_arr();
  ::safeheron::proto::CurvePoint* mutable_g_x_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >*
      mutable_g_x_arr();
  private:
  const ::safeheron::proto::CurvePoint& _internal_g_x_arr(int index) const;
  ::safeheron::proto::CurvePoint* _internal_add_g_x_arr();
  public:
  const ::safeheron::proto::CurvePoint& g_x_arr(int index) const;
  ::safeheron::proto::CurvePoint* add_g_x_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >&
      g_x_arr() const;

  // repeated .safeheron.proto.CurvePoint c = 9;
  int c_size() const;
  private:
  int _internal_c_size() const;
  public:
  void clear_c();
  ::safeheron::proto::CurvePoint* mutable_c(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >*
      mutable_c();
  private:
  const ::safeheron::proto::CurvePoint& _internal_c(int index) const;
  ::safeheron::proto::CurvePoint* _internal_add_c();
  public:
  const ::safeheron::proto::CurvePoint& c(int index) const;
  ::safeheron::proto::CurvePoint* add_c();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >&
      c() const;

  // string sid = 1;
  void clear_sid();
  const std::string& sid() const;
  void set_sid(const std::string& value);
  void set_sid(std::string&& value);
  void set_sid(const char* value);
  void set_sid(const char* value, size_t size);
  std::string* mutable_sid();
  std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string rid = 3;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string u = 10;
  void clear_u();
  const std::string& u() const;
  void set_u(const std::string& value);
  void set_u(std::string&& value);
  void set_u(const char* value);
  void set_u(const char* value, size_t size);
  std::string* mutable_u();
  std::string* release_u();
  void set_allocated_u(std::string* u);
  private:
  const std::string& _internal_u() const;
  void _internal_set_u(const std::string& value);
  std::string* _internal_mutable_u();
  public:

  // .safeheron.proto.CurvePoint g_x = 4;
  bool has_g_x() const;
  private:
  bool _internal_has_g_x() const;
  public:
  void clear_g_x();
  const ::safeheron::proto::CurvePoint& g_x() const;
  ::safeheron::proto::CurvePoint* release_g_x();
  ::safeheron::proto::CurvePoint* mutable_g_x();
  void set_allocated_g_x(::safeheron::proto::CurvePoint* g_x);
  private:
  const ::safeheron::proto::CurvePoint& _internal_g_x() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_g_x();
  public:
  void unsafe_arena_set_allocated_g_x(
      ::safeheron::proto::CurvePoint* g_x);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_g_x();

  // .safeheron.proto.CurvePoint A = 5;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const ::safeheron::proto::CurvePoint& a() const;
  ::safeheron::proto::CurvePoint* release_a();
  ::safeheron::proto::CurvePoint* mutable_a();
  void set_allocated_a(::safeheron::proto::CurvePoint* a);
  private:
  const ::safeheron::proto::CurvePoint& _internal_a() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_a();
  public:
  void unsafe_arena_set_allocated_a(
      ::safeheron::proto::CurvePoint* a);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_a();

  // .safeheron.proto.CurvePoint B = 6;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const ::safeheron::proto::CurvePoint& b() const;
  ::safeheron::proto::CurvePoint* release_b();
  ::safeheron::proto::CurvePoint* mutable_b();
  void set_allocated_b(::safeheron::proto::CurvePoint* b);
  private:
  const ::safeheron::proto::CurvePoint& _internal_b() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_b();
  public:
  void unsafe_arena_set_allocated_b(
      ::safeheron::proto::CurvePoint* b);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_b();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> party_id_arr_1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint > g_x_arr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint > c_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr u_;
  ::safeheron::proto::CurvePoint* g_x_;
  ::safeheron::proto::CurvePoint* a_;
  ::safeheron::proto::CurvePoint* b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fminimal_5fkey_5fgen_2eproto;
};
// -------------------------------------------------------------------

class Round1P2PMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage) */ {
 public:
  inline Round1P2PMessage() : Round1P2PMessage(nullptr) {}
  virtual ~Round1P2PMessage();

  Round1P2PMessage(const Round1P2PMessage& from);
  Round1P2PMessage(Round1P2PMessage&& from) noexcept
    : Round1P2PMessage() {
    *this = ::std::move(from);
  }

  inline Round1P2PMessage& operator=(const Round1P2PMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round1P2PMessage& operator=(Round1P2PMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round1P2PMessage& default_instance();

  static inline const Round1P2PMessage* internal_default_instance() {
    return reinterpret_cast<const Round1P2PMessage*>(
               &_Round1P2PMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Round1P2PMessage& a, Round1P2PMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round1P2PMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round1P2PMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round1P2PMessage* New() const final {
    return CreateMaybeMessage<Round1P2PMessage>(nullptr);
  }

  Round1P2PMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round1P2PMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round1P2PMessage& from);
  void MergeFrom(const Round1P2PMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round1P2PMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage";
  }
  protected:
  explicit Round1P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto);
    return ::descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidFieldNumber = 1,
    kIndexFieldNumber = 2,
    kXIjFieldNumber = 11,
  };
  // string sid = 1;
  void clear_sid();
  const std::string& sid() const;
  void set_sid(const std::string& value);
  void set_sid(std::string&& value);
  void set_sid(const char* value);
  void set_sid(const char* value, size_t size);
  std::string* mutable_sid();
  std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string x_ij = 11;
  void clear_x_ij();
  const std::string& x_ij() const;
  void set_x_ij(const std::string& value);
  void set_x_ij(std::string&& value);
  void set_x_ij(const char* value);
  void set_x_ij(const char* value, size_t size);
  std::string* mutable_x_ij();
  std::string* release_x_ij();
  void set_allocated_x_ij(std::string* x_ij);
  private:
  const std::string& _internal_x_ij() const;
  void _internal_set_x_ij(const std::string& value);
  std::string* _internal_mutable_x_ij();
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_ij_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fminimal_5fkey_5fgen_2eproto;
};
// -------------------------------------------------------------------

class Round2BCMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage) */ {
 public:
  inline Round2BCMessage() : Round2BCMessage(nullptr) {}
  virtual ~Round2BCMessage();

  Round2BCMessage(const Round2BCMessage& from);
  Round2BCMessage(Round2BCMessage&& from) noexcept
    : Round2BCMessage() {
    *this = ::std::move(from);
  }

  inline Round2BCMessage& operator=(const Round2BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round2BCMessage& operator=(Round2BCMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round2BCMessage& default_instance();

  static inline const Round2BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round2BCMessage*>(
               &_Round2BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Round2BCMessage& a, Round2BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round2BCMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round2BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round2BCMessage* New() const final {
    return CreateMaybeMessage<Round2BCMessage>(nullptr);
  }

  Round2BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round2BCMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round2BCMessage& from);
  void MergeFrom(const Round2BCMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round2BCMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage";
  }
  protected:
  explicit Round2BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto);
    return ::descriptor_table_cmp_2fminimal_5fkey_5fgen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidFieldNumber = 1,
    kIndexFieldNumber = 2,
    kPsiFieldNumber = 3,
    kPhiFieldNumber = 4,
  };
  // string sid = 1;
  void clear_sid();
  const std::string& sid() const;
  void set_sid(const std::string& value);
  void set_sid(std::string&& value);
  void set_sid(const char* value);
  void set_sid(const char* value, size_t size);
  std::string* mutable_sid();
  std::string* release_sid();
  void set_allocated_sid(std::string* sid);
  private:
  const std::string& _internal_sid() const;
  void _internal_set_sid(const std::string& value);
  std::string* _internal_mutable_sid();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // .safeheron.proto.DLogProof_V2 psi = 3;
  bool has_psi() const;
  private:
  bool _internal_has_psi() const;
  public:
  void clear_psi();
  const ::safeheron::proto::DLogProof_V2& psi() const;
  ::safeheron::proto::DLogProof_V2* release_psi();
  ::safeheron::proto::DLogProof_V2* mutable_psi();
  void set_allocated_psi(::safeheron::proto::DLogProof_V2* psi);
  private:
  const ::safeheron::proto::DLogProof_V2& _internal_psi() const;
  ::safeheron::proto::DLogProof_V2* _internal_mutable_psi();
  public:
  void unsafe_arena_set_allocated_psi(
      ::safeheron::proto::DLogProof_V2* psi);
  ::safeheron::proto::DLogProof_V2* unsafe_arena_release_psi();

  // .safeheron.proto.DLogProof_V2 phi = 4;
  bool has_phi() const;
  private:
  bool _internal_has_phi() const;
  public:
  void clear_phi();
  const ::safeheron::proto::DLogProof_V2& phi() const;
  ::safeheron::proto::DLogProof_V2* release_phi();
  ::safeheron::proto::DLogProof_V2* mutable_phi();
  void set_allocated_phi(::safeheron::proto::DLogProof_V2* phi);
  private:
  const ::safeheron::proto::DLogProof_V2& _internal_phi() const;
  ::safeheron::proto::DLogProof_V2* _internal_mutable_phi();
  public:
  void unsafe_arena_set_allocated_phi(
      ::safeheron::proto::DLogProof_V2* phi);
  ::safeheron::proto::DLogProof_V2* unsafe_arena_release_phi();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::safeheron::proto::DLogProof_V2* psi_;
  ::safeheron::proto::DLogProof_V2* phi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fminimal_5fkey_5fgen_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Round0BCMessage

// string sid = 1;
inline void Round0BCMessage::clear_sid() {
  sid_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::sid() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.sid)
  return _internal_sid();
}
inline void Round0BCMessage::set_sid(const std::string& value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.sid)
}
inline std::string* Round0BCMessage::mutable_sid() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.sid)
  return _internal_mutable_sid();
}
inline const std::string& Round0BCMessage::_internal_sid() const {
  return sid_.Get();
}
inline void Round0BCMessage::_internal_set_sid(const std::string& value) {
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0BCMessage::set_sid(std::string&& value) {
  
  sid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.sid)
}
inline void Round0BCMessage::set_sid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.sid)
}
inline void Round0BCMessage::set_sid(const char* value,
    size_t size) {
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.sid)
}
inline std::string* Round0BCMessage::_internal_mutable_sid() {
  
  return sid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0BCMessage::release_sid() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0BCMessage::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.sid)
}

// string index = 2;
inline void Round0BCMessage::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.index)
  return _internal_index();
}
inline void Round0BCMessage::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.index)
}
inline std::string* Round0BCMessage::mutable_index() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.index)
  return _internal_mutable_index();
}
inline const std::string& Round0BCMessage::_internal_index() const {
  return index_.Get();
}
inline void Round0BCMessage::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0BCMessage::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.index)
}
inline void Round0BCMessage::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.index)
}
inline void Round0BCMessage::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.index)
}
inline std::string* Round0BCMessage::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0BCMessage::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0BCMessage::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.index)
}

// string V = 3;
inline void Round0BCMessage::clear_v() {
  v_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::v() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.V)
  return _internal_v();
}
inline void Round0BCMessage::set_v(const std::string& value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.V)
}
inline std::string* Round0BCMessage::mutable_v() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.V)
  return _internal_mutable_v();
}
inline const std::string& Round0BCMessage::_internal_v() const {
  return v_.Get();
}
inline void Round0BCMessage::_internal_set_v(const std::string& value) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0BCMessage::set_v(std::string&& value) {
  
  v_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.V)
}
inline void Round0BCMessage::set_v(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.V)
}
inline void Round0BCMessage::set_v(const char* value,
    size_t size) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.V)
}
inline std::string* Round0BCMessage::_internal_mutable_v() {
  
  return v_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0BCMessage::release_v() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.V)
  return v_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0BCMessage::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  v_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round0BCMessage.V)
}

// -------------------------------------------------------------------

// Round1BCMessage

// string sid = 1;
inline void Round1BCMessage::clear_sid() {
  sid_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::sid() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.sid)
  return _internal_sid();
}
inline void Round1BCMessage::set_sid(const std::string& value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.sid)
}
inline std::string* Round1BCMessage::mutable_sid() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.sid)
  return _internal_mutable_sid();
}
inline const std::string& Round1BCMessage::_internal_sid() const {
  return sid_.Get();
}
inline void Round1BCMessage::_internal_set_sid(const std::string& value) {
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1BCMessage::set_sid(std::string&& value) {
  
  sid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.sid)
}
inline void Round1BCMessage::set_sid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.sid)
}
inline void Round1BCMessage::set_sid(const char* value,
    size_t size) {
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.sid)
}
inline std::string* Round1BCMessage::_internal_mutable_sid() {
  
  return sid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1BCMessage::release_sid() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1BCMessage::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.sid)
}

// string index = 2;
inline void Round1BCMessage::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.index)
  return _internal_index();
}
inline void Round1BCMessage::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.index)
}
inline std::string* Round1BCMessage::mutable_index() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.index)
  return _internal_mutable_index();
}
inline const std::string& Round1BCMessage::_internal_index() const {
  return index_.Get();
}
inline void Round1BCMessage::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1BCMessage::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.index)
}
inline void Round1BCMessage::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.index)
}
inline void Round1BCMessage::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.index)
}
inline std::string* Round1BCMessage::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1BCMessage::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1BCMessage::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.index)
}

// string rid = 3;
inline void Round1BCMessage::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::rid() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.rid)
  return _internal_rid();
}
inline void Round1BCMessage::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.rid)
}
inline std::string* Round1BCMessage::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.rid)
  return _internal_mutable_rid();
}
inline const std::string& Round1BCMessage::_internal_rid() const {
  return rid_.Get();
}
inline void Round1BCMessage::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1BCMessage::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.rid)
}
inline void Round1BCMessage::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.rid)
}
inline void Round1BCMessage::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.rid)
}
inline std::string* Round1BCMessage::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1BCMessage::release_rid() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1BCMessage::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.rid)
}

// .safeheron.proto.CurvePoint g_x = 4;
inline bool Round1BCMessage::_internal_has_g_x() const {
  return this != internal_default_instance() && g_x_ != nullptr;
}
inline bool Round1BCMessage::has_g_x() const {
  return _internal_has_g_x();
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_g_x() const {
  const ::safeheron::proto::CurvePoint* p = g_x_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::g_x() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.g_x)
  return _internal_g_x();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_g_x(
    ::safeheron::proto::CurvePoint* g_x) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x_);
  }
  g_x_ = g_x;
  if (g_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.g_x)
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::release_g_x() {
  
  ::safeheron::proto::CurvePoint* temp = g_x_;
  g_x_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::unsafe_arena_release_g_x() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.g_x)
  
  ::safeheron::proto::CurvePoint* temp = g_x_;
  g_x_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_mutable_g_x() {
  
  if (g_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArena());
    g_x_ = p;
  }
  return g_x_;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_g_x() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.g_x)
  return _internal_mutable_g_x();
}
inline void Round1BCMessage::set_allocated_g_x(::safeheron::proto::CurvePoint* g_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x_);
  }
  if (g_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x)->GetArena();
    if (message_arena != submessage_arena) {
      g_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g_x, submessage_arena);
    }
    
  } else {
    
  }
  g_x_ = g_x;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.g_x)
}

// .safeheron.proto.CurvePoint A = 5;
inline bool Round1BCMessage::_internal_has_a() const {
  return this != internal_default_instance() && a_ != nullptr;
}
inline bool Round1BCMessage::has_a() const {
  return _internal_has_a();
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_a() const {
  const ::safeheron::proto::CurvePoint* p = a_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::a() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.A)
  return _internal_a();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_a(
    ::safeheron::proto::CurvePoint* a) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_);
  }
  a_ = a;
  if (a) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.A)
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::release_a() {
  
  ::safeheron::proto::CurvePoint* temp = a_;
  a_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::unsafe_arena_release_a() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.A)
  
  ::safeheron::proto::CurvePoint* temp = a_;
  a_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_mutable_a() {
  
  if (a_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArena());
    a_ = p;
  }
  return a_;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_a() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.A)
  return _internal_mutable_a();
}
inline void Round1BCMessage::set_allocated_a(::safeheron::proto::CurvePoint* a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_);
  }
  if (a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a)->GetArena();
    if (message_arena != submessage_arena) {
      a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    
  } else {
    
  }
  a_ = a;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.A)
}

// .safeheron.proto.CurvePoint B = 6;
inline bool Round1BCMessage::_internal_has_b() const {
  return this != internal_default_instance() && b_ != nullptr;
}
inline bool Round1BCMessage::has_b() const {
  return _internal_has_b();
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_b() const {
  const ::safeheron::proto::CurvePoint* p = b_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::b() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.B)
  return _internal_b();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_b(
    ::safeheron::proto::CurvePoint* b) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(b_);
  }
  b_ = b;
  if (b) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.B)
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::release_b() {
  
  ::safeheron::proto::CurvePoint* temp = b_;
  b_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::unsafe_arena_release_b() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.B)
  
  ::safeheron::proto::CurvePoint* temp = b_;
  b_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_mutable_b() {
  
  if (b_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArena());
    b_ = p;
  }
  return b_;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_b() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.B)
  return _internal_mutable_b();
}
inline void Round1BCMessage::set_allocated_b(::safeheron::proto::CurvePoint* b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(b_);
  }
  if (b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(b)->GetArena();
    if (message_arena != submessage_arena) {
      b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    
  } else {
    
  }
  b_ = b;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.B)
}

// repeated string party_id_arr_1 = 7;
inline int Round1BCMessage::_internal_party_id_arr_1_size() const {
  return party_id_arr_1_.size();
}
inline int Round1BCMessage::party_id_arr_1_size() const {
  return _internal_party_id_arr_1_size();
}
inline void Round1BCMessage::clear_party_id_arr_1() {
  party_id_arr_1_.Clear();
}
inline std::string* Round1BCMessage::add_party_id_arr_1() {
  // @@protoc_insertion_point(field_add_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1)
  return _internal_add_party_id_arr_1();
}
inline const std::string& Round1BCMessage::_internal_party_id_arr_1(int index) const {
  return party_id_arr_1_.Get(index);
}
inline const std::string& Round1BCMessage::party_id_arr_1(int index) const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1)
  return _internal_party_id_arr_1(index);
}
inline std::string* Round1BCMessage::mutable_party_id_arr_1(int index) {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1)
  return party_id_arr_1_.Mutable(index);
}
inline void Round1BCMessage::set_party_id_arr_1(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1)
  party_id_arr_1_.Mutable(index)->assign(value);
}
inline void Round1BCMessage::set_party_id_arr_1(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1)
  party_id_arr_1_.Mutable(index)->assign(std::move(value));
}
inline void Round1BCMessage::set_party_id_arr_1(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  party_id_arr_1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1)
}
inline void Round1BCMessage::set_party_id_arr_1(int index, const char* value, size_t size) {
  party_id_arr_1_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1)
}
inline std::string* Round1BCMessage::_internal_add_party_id_arr_1() {
  return party_id_arr_1_.Add();
}
inline void Round1BCMessage::add_party_id_arr_1(const std::string& value) {
  party_id_arr_1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1)
}
inline void Round1BCMessage::add_party_id_arr_1(std::string&& value) {
  party_id_arr_1_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1)
}
inline void Round1BCMessage::add_party_id_arr_1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  party_id_arr_1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1)
}
inline void Round1BCMessage::add_party_id_arr_1(const char* value, size_t size) {
  party_id_arr_1_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Round1BCMessage::party_id_arr_1() const {
  // @@protoc_insertion_point(field_list:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1)
  return party_id_arr_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Round1BCMessage::mutable_party_id_arr_1() {
  // @@protoc_insertion_point(field_mutable_list:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.party_id_arr_1)
  return &party_id_arr_1_;
}

// repeated .safeheron.proto.CurvePoint g_x_arr = 8;
inline int Round1BCMessage::_internal_g_x_arr_size() const {
  return g_x_arr_.size();
}
inline int Round1BCMessage::g_x_arr_size() const {
  return _internal_g_x_arr_size();
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_g_x_arr(int index) {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.g_x_arr)
  return g_x_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >*
Round1BCMessage::mutable_g_x_arr() {
  // @@protoc_insertion_point(field_mutable_list:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.g_x_arr)
  return &g_x_arr_;
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_g_x_arr(int index) const {
  return g_x_arr_.Get(index);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::g_x_arr(int index) const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.g_x_arr)
  return _internal_g_x_arr(index);
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_add_g_x_arr() {
  return g_x_arr_.Add();
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::add_g_x_arr() {
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.g_x_arr)
  return _internal_add_g_x_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >&
Round1BCMessage::g_x_arr() const {
  // @@protoc_insertion_point(field_list:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.g_x_arr)
  return g_x_arr_;
}

// repeated .safeheron.proto.CurvePoint c = 9;
inline int Round1BCMessage::_internal_c_size() const {
  return c_.size();
}
inline int Round1BCMessage::c_size() const {
  return _internal_c_size();
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_c(int index) {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.c)
  return c_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >*
Round1BCMessage::mutable_c() {
  // @@protoc_insertion_point(field_mutable_list:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.c)
  return &c_;
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_c(int index) const {
  return c_.Get(index);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::c(int index) const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.c)
  return _internal_c(index);
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_add_c() {
  return c_.Add();
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::add_c() {
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.c)
  return _internal_add_c();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >&
Round1BCMessage::c() const {
  // @@protoc_insertion_point(field_list:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.c)
  return c_;
}

// string u = 10;
inline void Round1BCMessage::clear_u() {
  u_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::u() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.u)
  return _internal_u();
}
inline void Round1BCMessage::set_u(const std::string& value) {
  _internal_set_u(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.u)
}
inline std::string* Round1BCMessage::mutable_u() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.u)
  return _internal_mutable_u();
}
inline const std::string& Round1BCMessage::_internal_u() const {
  return u_.Get();
}
inline void Round1BCMessage::_internal_set_u(const std::string& value) {
  
  u_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1BCMessage::set_u(std::string&& value) {
  
  u_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.u)
}
inline void Round1BCMessage::set_u(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  u_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.u)
}
inline void Round1BCMessage::set_u(const char* value,
    size_t size) {
  
  u_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.u)
}
inline std::string* Round1BCMessage::_internal_mutable_u() {
  
  return u_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1BCMessage::release_u() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.u)
  return u_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1BCMessage::set_allocated_u(std::string* u) {
  if (u != nullptr) {
    
  } else {
    
  }
  u_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), u,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1BCMessage.u)
}

// -------------------------------------------------------------------

// Round1P2PMessage

// string sid = 1;
inline void Round1P2PMessage::clear_sid() {
  sid_.ClearToEmpty();
}
inline const std::string& Round1P2PMessage::sid() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.sid)
  return _internal_sid();
}
inline void Round1P2PMessage::set_sid(const std::string& value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.sid)
}
inline std::string* Round1P2PMessage::mutable_sid() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.sid)
  return _internal_mutable_sid();
}
inline const std::string& Round1P2PMessage::_internal_sid() const {
  return sid_.Get();
}
inline void Round1P2PMessage::_internal_set_sid(const std::string& value) {
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1P2PMessage::set_sid(std::string&& value) {
  
  sid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.sid)
}
inline void Round1P2PMessage::set_sid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.sid)
}
inline void Round1P2PMessage::set_sid(const char* value,
    size_t size) {
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.sid)
}
inline std::string* Round1P2PMessage::_internal_mutable_sid() {
  
  return sid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1P2PMessage::release_sid() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1P2PMessage::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.sid)
}

// string index = 2;
inline void Round1P2PMessage::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Round1P2PMessage::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.index)
  return _internal_index();
}
inline void Round1P2PMessage::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.index)
}
inline std::string* Round1P2PMessage::mutable_index() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.index)
  return _internal_mutable_index();
}
inline const std::string& Round1P2PMessage::_internal_index() const {
  return index_.Get();
}
inline void Round1P2PMessage::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1P2PMessage::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.index)
}
inline void Round1P2PMessage::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.index)
}
inline void Round1P2PMessage::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.index)
}
inline std::string* Round1P2PMessage::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1P2PMessage::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1P2PMessage::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.index)
}

// string x_ij = 11;
inline void Round1P2PMessage::clear_x_ij() {
  x_ij_.ClearToEmpty();
}
inline const std::string& Round1P2PMessage::x_ij() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.x_ij)
  return _internal_x_ij();
}
inline void Round1P2PMessage::set_x_ij(const std::string& value) {
  _internal_set_x_ij(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.x_ij)
}
inline std::string* Round1P2PMessage::mutable_x_ij() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.x_ij)
  return _internal_mutable_x_ij();
}
inline const std::string& Round1P2PMessage::_internal_x_ij() const {
  return x_ij_.Get();
}
inline void Round1P2PMessage::_internal_set_x_ij(const std::string& value) {
  
  x_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1P2PMessage::set_x_ij(std::string&& value) {
  
  x_ij_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.x_ij)
}
inline void Round1P2PMessage::set_x_ij(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  x_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.x_ij)
}
inline void Round1P2PMessage::set_x_ij(const char* value,
    size_t size) {
  
  x_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.x_ij)
}
inline std::string* Round1P2PMessage::_internal_mutable_x_ij() {
  
  return x_ij_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1P2PMessage::release_x_ij() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.x_ij)
  return x_ij_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1P2PMessage::set_allocated_x_ij(std::string* x_ij) {
  if (x_ij != nullptr) {
    
  } else {
    
  }
  x_ij_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x_ij,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round1P2PMessage.x_ij)
}

// -------------------------------------------------------------------

// Round2BCMessage

// string sid = 1;
inline void Round2BCMessage::clear_sid() {
  sid_.ClearToEmpty();
}
inline const std::string& Round2BCMessage::sid() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.sid)
  return _internal_sid();
}
inline void Round2BCMessage::set_sid(const std::string& value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.sid)
}
inline std::string* Round2BCMessage::mutable_sid() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.sid)
  return _internal_mutable_sid();
}
inline const std::string& Round2BCMessage::_internal_sid() const {
  return sid_.Get();
}
inline void Round2BCMessage::_internal_set_sid(const std::string& value) {
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round2BCMessage::set_sid(std::string&& value) {
  
  sid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.sid)
}
inline void Round2BCMessage::set_sid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.sid)
}
inline void Round2BCMessage::set_sid(const char* value,
    size_t size) {
  
  sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.sid)
}
inline std::string* Round2BCMessage::_internal_mutable_sid() {
  
  return sid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round2BCMessage::release_sid() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.sid)
  return sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round2BCMessage::set_allocated_sid(std::string* sid) {
  if (sid != nullptr) {
    
  } else {
    
  }
  sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.sid)
}

// string index = 2;
inline void Round2BCMessage::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Round2BCMessage::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.index)
  return _internal_index();
}
inline void Round2BCMessage::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.index)
}
inline std::string* Round2BCMessage::mutable_index() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.index)
  return _internal_mutable_index();
}
inline const std::string& Round2BCMessage::_internal_index() const {
  return index_.Get();
}
inline void Round2BCMessage::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round2BCMessage::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.index)
}
inline void Round2BCMessage::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.index)
}
inline void Round2BCMessage::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.index)
}
inline std::string* Round2BCMessage::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round2BCMessage::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round2BCMessage::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.index)
}

// .safeheron.proto.DLogProof_V2 psi = 3;
inline bool Round2BCMessage::_internal_has_psi() const {
  return this != internal_default_instance() && psi_ != nullptr;
}
inline bool Round2BCMessage::has_psi() const {
  return _internal_has_psi();
}
inline const ::safeheron::proto::DLogProof_V2& Round2BCMessage::_internal_psi() const {
  const ::safeheron::proto::DLogProof_V2* p = psi_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::DLogProof_V2&>(
      ::safeheron::proto::_DLogProof_V2_default_instance_);
}
inline const ::safeheron::proto::DLogProof_V2& Round2BCMessage::psi() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.psi)
  return _internal_psi();
}
inline void Round2BCMessage::unsafe_arena_set_allocated_psi(
    ::safeheron::proto::DLogProof_V2* psi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_);
  }
  psi_ = psi;
  if (psi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.psi)
}
inline ::safeheron::proto::DLogProof_V2* Round2BCMessage::release_psi() {
  
  ::safeheron::proto::DLogProof_V2* temp = psi_;
  psi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::DLogProof_V2* Round2BCMessage::unsafe_arena_release_psi() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.psi)
  
  ::safeheron::proto::DLogProof_V2* temp = psi_;
  psi_ = nullptr;
  return temp;
}
inline ::safeheron::proto::DLogProof_V2* Round2BCMessage::_internal_mutable_psi() {
  
  if (psi_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::DLogProof_V2>(GetArena());
    psi_ = p;
  }
  return psi_;
}
inline ::safeheron::proto::DLogProof_V2* Round2BCMessage::mutable_psi() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.psi)
  return _internal_mutable_psi();
}
inline void Round2BCMessage::set_allocated_psi(::safeheron::proto::DLogProof_V2* psi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_);
  }
  if (psi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi)->GetArena();
    if (message_arena != submessage_arena) {
      psi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psi, submessage_arena);
    }
    
  } else {
    
  }
  psi_ = psi;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.psi)
}

// .safeheron.proto.DLogProof_V2 phi = 4;
inline bool Round2BCMessage::_internal_has_phi() const {
  return this != internal_default_instance() && phi_ != nullptr;
}
inline bool Round2BCMessage::has_phi() const {
  return _internal_has_phi();
}
inline const ::safeheron::proto::DLogProof_V2& Round2BCMessage::_internal_phi() const {
  const ::safeheron::proto::DLogProof_V2* p = phi_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::DLogProof_V2&>(
      ::safeheron::proto::_DLogProof_V2_default_instance_);
}
inline const ::safeheron::proto::DLogProof_V2& Round2BCMessage::phi() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.phi)
  return _internal_phi();
}
inline void Round2BCMessage::unsafe_arena_set_allocated_phi(
    ::safeheron::proto::DLogProof_V2* phi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phi_);
  }
  phi_ = phi;
  if (phi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.phi)
}
inline ::safeheron::proto::DLogProof_V2* Round2BCMessage::release_phi() {
  
  ::safeheron::proto::DLogProof_V2* temp = phi_;
  phi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::DLogProof_V2* Round2BCMessage::unsafe_arena_release_phi() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.phi)
  
  ::safeheron::proto::DLogProof_V2* temp = phi_;
  phi_ = nullptr;
  return temp;
}
inline ::safeheron::proto::DLogProof_V2* Round2BCMessage::_internal_mutable_phi() {
  
  if (phi_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::DLogProof_V2>(GetArena());
    phi_ = p;
  }
  return phi_;
}
inline ::safeheron::proto::DLogProof_V2* Round2BCMessage::mutable_phi() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.phi)
  return _internal_mutable_phi();
}
inline void Round2BCMessage::set_allocated_phi(::safeheron::proto::DLogProof_V2* phi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(phi_);
  }
  if (phi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phi)->GetArena();
    if (message_arena != submessage_arena) {
      phi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phi, submessage_arena);
    }
    
  } else {
    
  }
  phi_ = phi;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.minimal_key_gen.Round2BCMessage.phi)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minimal_key_gen
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cmp_2fminimal_5fkey_5fgen_2eproto
