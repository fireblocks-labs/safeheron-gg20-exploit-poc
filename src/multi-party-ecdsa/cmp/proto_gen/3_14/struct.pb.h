// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmp/struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cmp_2fstruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cmp_2fstruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "crypto-curve/proto_gen/curve_point.pb.switch.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cmp_2fstruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cmp_2fstruct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cmp_2fstruct_2eproto;
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
class MinimalParty;
class MinimalPartyDefaultTypeInternal;
extern MinimalPartyDefaultTypeInternal _MinimalParty_default_instance_;
class MinimalSignKey;
class MinimalSignKeyDefaultTypeInternal;
extern MinimalSignKeyDefaultTypeInternal _MinimalSignKey_default_instance_;
class Party;
class PartyDefaultTypeInternal;
extern PartyDefaultTypeInternal _Party_default_instance_;
class SignKey;
class SignKeyDefaultTypeInternal;
extern SignKeyDefaultTypeInternal _SignKey_default_instance_;
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::cmp::MinimalSignKey* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::MinimalSignKey>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::cmp::Party* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::Party>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::cmp::SignKey* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::SignKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {

// ===================================================================

class MinimalParty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty) */ {
 public:
  inline MinimalParty() : MinimalParty(nullptr) {}
  virtual ~MinimalParty();

  MinimalParty(const MinimalParty& from);
  MinimalParty(MinimalParty&& from) noexcept
    : MinimalParty() {
    *this = ::std::move(from);
  }

  inline MinimalParty& operator=(const MinimalParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline MinimalParty& operator=(MinimalParty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MinimalParty& default_instance();

  static inline const MinimalParty* internal_default_instance() {
    return reinterpret_cast<const MinimalParty*>(
               &_MinimalParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MinimalParty& a, MinimalParty& b) {
    a.Swap(&b);
  }
  inline void Swap(MinimalParty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MinimalParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MinimalParty* New() const final {
    return CreateMaybeMessage<MinimalParty>(nullptr);
  }

  MinimalParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MinimalParty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MinimalParty& from);
  void MergeFrom(const MinimalParty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinimalParty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.MinimalParty";
  }
  protected:
  explicit MinimalParty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmp_2fstruct_2eproto);
    return ::descriptor_table_cmp_2fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kIndexFieldNumber = 2,
    kXFieldNumber = 3,
    kGXFieldNumber = 4,
  };
  // string party_id = 1;
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string x = 3;
  void clear_x();
  const std::string& x() const;
  void set_x(const std::string& value);
  void set_x(std::string&& value);
  void set_x(const char* value);
  void set_x(const char* value, size_t size);
  std::string* mutable_x();
  std::string* release_x();
  void set_allocated_x(std::string* x);
  private:
  const std::string& _internal_x() const;
  void _internal_set_x(const std::string& value);
  std::string* _internal_mutable_x();
  public:

  // .safeheron.proto.CurvePoint g_x = 4;
  bool has_g_x() const;
  private:
  bool _internal_has_g_x() const;
  public:
  void clear_g_x();
  const ::safeheron::proto::CurvePoint& g_x() const;
  ::safeheron::proto::CurvePoint* release_g_x();
  ::safeheron::proto::CurvePoint* mutable_g_x();
  void set_allocated_g_x(::safeheron::proto::CurvePoint* g_x);
  private:
  const ::safeheron::proto::CurvePoint& _internal_g_x() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_g_x();
  public:
  void unsafe_arena_set_allocated_g_x(
      ::safeheron::proto::CurvePoint* g_x);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_g_x();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_;
  ::safeheron::proto::CurvePoint* g_x_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fstruct_2eproto;
};
// -------------------------------------------------------------------

class MinimalSignKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey) */ {
 public:
  inline MinimalSignKey() : MinimalSignKey(nullptr) {}
  virtual ~MinimalSignKey();

  MinimalSignKey(const MinimalSignKey& from);
  MinimalSignKey(MinimalSignKey&& from) noexcept
    : MinimalSignKey() {
    *this = ::std::move(from);
  }

  inline MinimalSignKey& operator=(const MinimalSignKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline MinimalSignKey& operator=(MinimalSignKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MinimalSignKey& default_instance();

  static inline const MinimalSignKey* internal_default_instance() {
    return reinterpret_cast<const MinimalSignKey*>(
               &_MinimalSignKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MinimalSignKey& a, MinimalSignKey& b) {
    a.Swap(&b);
  }
  inline void Swap(MinimalSignKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MinimalSignKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MinimalSignKey* New() const final {
    return CreateMaybeMessage<MinimalSignKey>(nullptr);
  }

  MinimalSignKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MinimalSignKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MinimalSignKey& from);
  void MergeFrom(const MinimalSignKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinimalSignKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey";
  }
  protected:
  explicit MinimalSignKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmp_2fstruct_2eproto);
    return ::descriptor_table_cmp_2fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemotePartiesFieldNumber = 5,
    kWorkspaceIdFieldNumber = 1,
    kLocalPartyFieldNumber = 4,
    kGXFieldNumber = 6,
    kThresholdFieldNumber = 2,
    kNPartiesFieldNumber = 3,
  };
  // repeated .safeheron.proto.multi_party_ecdsa.cmp.MinimalParty remote_parties = 5;
  int remote_parties_size() const;
  private:
  int _internal_remote_parties_size() const;
  public:
  void clear_remote_parties();
  ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* mutable_remote_parties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty >*
      mutable_remote_parties();
  private:
  const ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty& _internal_remote_parties(int index) const;
  ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* _internal_add_remote_parties();
  public:
  const ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty& remote_parties(int index) const;
  ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* add_remote_parties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty >&
      remote_parties() const;

  // string workspace_id = 1;
  void clear_workspace_id();
  const std::string& workspace_id() const;
  void set_workspace_id(const std::string& value);
  void set_workspace_id(std::string&& value);
  void set_workspace_id(const char* value);
  void set_workspace_id(const char* value, size_t size);
  std::string* mutable_workspace_id();
  std::string* release_workspace_id();
  void set_allocated_workspace_id(std::string* workspace_id);
  private:
  const std::string& _internal_workspace_id() const;
  void _internal_set_workspace_id(const std::string& value);
  std::string* _internal_mutable_workspace_id();
  public:

  // .safeheron.proto.multi_party_ecdsa.cmp.MinimalParty local_party = 4;
  bool has_local_party() const;
  private:
  bool _internal_has_local_party() const;
  public:
  void clear_local_party();
  const ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty& local_party() const;
  ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* release_local_party();
  ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* mutable_local_party();
  void set_allocated_local_party(::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* local_party);
  private:
  const ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty& _internal_local_party() const;
  ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* _internal_mutable_local_party();
  public:
  void unsafe_arena_set_allocated_local_party(
      ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* local_party);
  ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* unsafe_arena_release_local_party();

  // .safeheron.proto.CurvePoint g_x = 6;
  bool has_g_x() const;
  private:
  bool _internal_has_g_x() const;
  public:
  void clear_g_x();
  const ::safeheron::proto::CurvePoint& g_x() const;
  ::safeheron::proto::CurvePoint* release_g_x();
  ::safeheron::proto::CurvePoint* mutable_g_x();
  void set_allocated_g_x(::safeheron::proto::CurvePoint* g_x);
  private:
  const ::safeheron::proto::CurvePoint& _internal_g_x() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_g_x();
  public:
  void unsafe_arena_set_allocated_g_x(
      ::safeheron::proto::CurvePoint* g_x);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_g_x();

  // int32 threshold = 2;
  void clear_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 threshold() const;
  void set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_threshold() const;
  void _internal_set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 n_parties = 3;
  void clear_n_parties();
  ::PROTOBUF_NAMESPACE_ID::int32 n_parties() const;
  void set_n_parties(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n_parties() const;
  void _internal_set_n_parties(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty > remote_parties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workspace_id_;
  ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* local_party_;
  ::safeheron::proto::CurvePoint* g_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_parties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fstruct_2eproto;
};
// -------------------------------------------------------------------

class Party PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.Party) */ {
 public:
  inline Party() : Party(nullptr) {}
  virtual ~Party();

  Party(const Party& from);
  Party(Party&& from) noexcept
    : Party() {
    *this = ::std::move(from);
  }

  inline Party& operator=(const Party& from) {
    CopyFrom(from);
    return *this;
  }
  inline Party& operator=(Party&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Party& default_instance();

  static inline const Party* internal_default_instance() {
    return reinterpret_cast<const Party*>(
               &_Party_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Party& a, Party& b) {
    a.Swap(&b);
  }
  inline void Swap(Party* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Party* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Party* New() const final {
    return CreateMaybeMessage<Party>(nullptr);
  }

  Party* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Party>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Party& from);
  void MergeFrom(const Party& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Party* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.Party";
  }
  protected:
  explicit Party(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmp_2fstruct_2eproto);
    return ::descriptor_table_cmp_2fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kIndexFieldNumber = 2,
    kXFieldNumber = 3,
    kNFieldNumber = 10,
    kSFieldNumber = 11,
    kTFieldNumber = 12,
    kPFieldNumber = 13,
    kQFieldNumber = 14,
    kGXFieldNumber = 4,
    kGYFieldNumber = 5,
  };
  // string party_id = 1;
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string x = 3;
  void clear_x();
  const std::string& x() const;
  void set_x(const std::string& value);
  void set_x(std::string&& value);
  void set_x(const char* value);
  void set_x(const char* value, size_t size);
  std::string* mutable_x();
  std::string* release_x();
  void set_allocated_x(std::string* x);
  private:
  const std::string& _internal_x() const;
  void _internal_set_x(const std::string& value);
  std::string* _internal_mutable_x();
  public:

  // string N = 10;
  void clear_n();
  const std::string& n() const;
  void set_n(const std::string& value);
  void set_n(std::string&& value);
  void set_n(const char* value);
  void set_n(const char* value, size_t size);
  std::string* mutable_n();
  std::string* release_n();
  void set_allocated_n(std::string* n);
  private:
  const std::string& _internal_n() const;
  void _internal_set_n(const std::string& value);
  std::string* _internal_mutable_n();
  public:

  // string s = 11;
  void clear_s();
  const std::string& s() const;
  void set_s(const std::string& value);
  void set_s(std::string&& value);
  void set_s(const char* value);
  void set_s(const char* value, size_t size);
  std::string* mutable_s();
  std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // string t = 12;
  void clear_t();
  const std::string& t() const;
  void set_t(const std::string& value);
  void set_t(std::string&& value);
  void set_t(const char* value);
  void set_t(const char* value, size_t size);
  std::string* mutable_t();
  std::string* release_t();
  void set_allocated_t(std::string* t);
  private:
  const std::string& _internal_t() const;
  void _internal_set_t(const std::string& value);
  std::string* _internal_mutable_t();
  public:

  // string p = 13;
  void clear_p();
  const std::string& p() const;
  void set_p(const std::string& value);
  void set_p(std::string&& value);
  void set_p(const char* value);
  void set_p(const char* value, size_t size);
  std::string* mutable_p();
  std::string* release_p();
  void set_allocated_p(std::string* p);
  private:
  const std::string& _internal_p() const;
  void _internal_set_p(const std::string& value);
  std::string* _internal_mutable_p();
  public:

  // string q = 14;
  void clear_q();
  const std::string& q() const;
  void set_q(const std::string& value);
  void set_q(std::string&& value);
  void set_q(const char* value);
  void set_q(const char* value, size_t size);
  std::string* mutable_q();
  std::string* release_q();
  void set_allocated_q(std::string* q);
  private:
  const std::string& _internal_q() const;
  void _internal_set_q(const std::string& value);
  std::string* _internal_mutable_q();
  public:

  // .safeheron.proto.CurvePoint g_x = 4;
  bool has_g_x() const;
  private:
  bool _internal_has_g_x() const;
  public:
  void clear_g_x();
  const ::safeheron::proto::CurvePoint& g_x() const;
  ::safeheron::proto::CurvePoint* release_g_x();
  ::safeheron::proto::CurvePoint* mutable_g_x();
  void set_allocated_g_x(::safeheron::proto::CurvePoint* g_x);
  private:
  const ::safeheron::proto::CurvePoint& _internal_g_x() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_g_x();
  public:
  void unsafe_arena_set_allocated_g_x(
      ::safeheron::proto::CurvePoint* g_x);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_g_x();

  // .safeheron.proto.CurvePoint g_y = 5;
  bool has_g_y() const;
  private:
  bool _internal_has_g_y() const;
  public:
  void clear_g_y();
  const ::safeheron::proto::CurvePoint& g_y() const;
  ::safeheron::proto::CurvePoint* release_g_y();
  ::safeheron::proto::CurvePoint* mutable_g_y();
  void set_allocated_g_y(::safeheron::proto::CurvePoint* g_y);
  private:
  const ::safeheron::proto::CurvePoint& _internal_g_y() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_g_y();
  public:
  void unsafe_arena_set_allocated_g_y(
      ::safeheron::proto::CurvePoint* g_y);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_g_y();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.Party)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr t_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr q_;
  ::safeheron::proto::CurvePoint* g_x_;
  ::safeheron::proto::CurvePoint* g_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fstruct_2eproto;
};
// -------------------------------------------------------------------

class SignKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.SignKey) */ {
 public:
  inline SignKey() : SignKey(nullptr) {}
  virtual ~SignKey();

  SignKey(const SignKey& from);
  SignKey(SignKey&& from) noexcept
    : SignKey() {
    *this = ::std::move(from);
  }

  inline SignKey& operator=(const SignKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignKey& operator=(SignKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignKey& default_instance();

  static inline const SignKey* internal_default_instance() {
    return reinterpret_cast<const SignKey*>(
               &_SignKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SignKey& a, SignKey& b) {
    a.Swap(&b);
  }
  inline void Swap(SignKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignKey* New() const final {
    return CreateMaybeMessage<SignKey>(nullptr);
  }

  SignKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignKey& from);
  void MergeFrom(const SignKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.SignKey";
  }
  protected:
  explicit SignKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmp_2fstruct_2eproto);
    return ::descriptor_table_cmp_2fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemotePartiesFieldNumber = 5,
    kWorkspaceIdFieldNumber = 1,
    kLocalPartyFieldNumber = 4,
    kGXFieldNumber = 6,
    kThresholdFieldNumber = 2,
    kNPartiesFieldNumber = 3,
  };
  // repeated .safeheron.proto.multi_party_ecdsa.cmp.Party remote_parties = 5;
  int remote_parties_size() const;
  private:
  int _internal_remote_parties_size() const;
  public:
  void clear_remote_parties();
  ::safeheron::proto::multi_party_ecdsa::cmp::Party* mutable_remote_parties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::cmp::Party >*
      mutable_remote_parties();
  private:
  const ::safeheron::proto::multi_party_ecdsa::cmp::Party& _internal_remote_parties(int index) const;
  ::safeheron::proto::multi_party_ecdsa::cmp::Party* _internal_add_remote_parties();
  public:
  const ::safeheron::proto::multi_party_ecdsa::cmp::Party& remote_parties(int index) const;
  ::safeheron::proto::multi_party_ecdsa::cmp::Party* add_remote_parties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::cmp::Party >&
      remote_parties() const;

  // string workspace_id = 1;
  void clear_workspace_id();
  const std::string& workspace_id() const;
  void set_workspace_id(const std::string& value);
  void set_workspace_id(std::string&& value);
  void set_workspace_id(const char* value);
  void set_workspace_id(const char* value, size_t size);
  std::string* mutable_workspace_id();
  std::string* release_workspace_id();
  void set_allocated_workspace_id(std::string* workspace_id);
  private:
  const std::string& _internal_workspace_id() const;
  void _internal_set_workspace_id(const std::string& value);
  std::string* _internal_mutable_workspace_id();
  public:

  // .safeheron.proto.multi_party_ecdsa.cmp.Party local_party = 4;
  bool has_local_party() const;
  private:
  bool _internal_has_local_party() const;
  public:
  void clear_local_party();
  const ::safeheron::proto::multi_party_ecdsa::cmp::Party& local_party() const;
  ::safeheron::proto::multi_party_ecdsa::cmp::Party* release_local_party();
  ::safeheron::proto::multi_party_ecdsa::cmp::Party* mutable_local_party();
  void set_allocated_local_party(::safeheron::proto::multi_party_ecdsa::cmp::Party* local_party);
  private:
  const ::safeheron::proto::multi_party_ecdsa::cmp::Party& _internal_local_party() const;
  ::safeheron::proto::multi_party_ecdsa::cmp::Party* _internal_mutable_local_party();
  public:
  void unsafe_arena_set_allocated_local_party(
      ::safeheron::proto::multi_party_ecdsa::cmp::Party* local_party);
  ::safeheron::proto::multi_party_ecdsa::cmp::Party* unsafe_arena_release_local_party();

  // .safeheron.proto.CurvePoint g_x = 6;
  bool has_g_x() const;
  private:
  bool _internal_has_g_x() const;
  public:
  void clear_g_x();
  const ::safeheron::proto::CurvePoint& g_x() const;
  ::safeheron::proto::CurvePoint* release_g_x();
  ::safeheron::proto::CurvePoint* mutable_g_x();
  void set_allocated_g_x(::safeheron::proto::CurvePoint* g_x);
  private:
  const ::safeheron::proto::CurvePoint& _internal_g_x() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_g_x();
  public:
  void unsafe_arena_set_allocated_g_x(
      ::safeheron::proto::CurvePoint* g_x);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_g_x();

  // int32 threshold = 2;
  void clear_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 threshold() const;
  void set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_threshold() const;
  void _internal_set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 n_parties = 3;
  void clear_n_parties();
  ::PROTOBUF_NAMESPACE_ID::int32 n_parties() const;
  void set_n_parties(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n_parties() const;
  void _internal_set_n_parties(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.SignKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::cmp::Party > remote_parties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workspace_id_;
  ::safeheron::proto::multi_party_ecdsa::cmp::Party* local_party_;
  ::safeheron::proto::CurvePoint* g_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_parties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fstruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MinimalParty

// string party_id = 1;
inline void MinimalParty::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& MinimalParty::party_id() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.party_id)
  return _internal_party_id();
}
inline void MinimalParty::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.party_id)
}
inline std::string* MinimalParty::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& MinimalParty::_internal_party_id() const {
  return party_id_.Get();
}
inline void MinimalParty::_internal_set_party_id(const std::string& value) {
  
  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MinimalParty::set_party_id(std::string&& value) {
  
  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.party_id)
}
inline void MinimalParty::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.party_id)
}
inline void MinimalParty::set_party_id(const char* value,
    size_t size) {
  
  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.party_id)
}
inline std::string* MinimalParty::_internal_mutable_party_id() {
  
  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MinimalParty::release_party_id() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MinimalParty::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {
    
  } else {
    
  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.party_id)
}

// string index = 2;
inline void MinimalParty::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& MinimalParty::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.index)
  return _internal_index();
}
inline void MinimalParty::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.index)
}
inline std::string* MinimalParty::mutable_index() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.index)
  return _internal_mutable_index();
}
inline const std::string& MinimalParty::_internal_index() const {
  return index_.Get();
}
inline void MinimalParty::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MinimalParty::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.index)
}
inline void MinimalParty::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.index)
}
inline void MinimalParty::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.index)
}
inline std::string* MinimalParty::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MinimalParty::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MinimalParty::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.index)
}

// string x = 3;
inline void MinimalParty::clear_x() {
  x_.ClearToEmpty();
}
inline const std::string& MinimalParty::x() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.x)
  return _internal_x();
}
inline void MinimalParty::set_x(const std::string& value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.x)
}
inline std::string* MinimalParty::mutable_x() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.x)
  return _internal_mutable_x();
}
inline const std::string& MinimalParty::_internal_x() const {
  return x_.Get();
}
inline void MinimalParty::_internal_set_x(const std::string& value) {
  
  x_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MinimalParty::set_x(std::string&& value) {
  
  x_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.x)
}
inline void MinimalParty::set_x(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  x_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.x)
}
inline void MinimalParty::set_x(const char* value,
    size_t size) {
  
  x_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.x)
}
inline std::string* MinimalParty::_internal_mutable_x() {
  
  return x_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MinimalParty::release_x() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.x)
  return x_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MinimalParty::set_allocated_x(std::string* x) {
  if (x != nullptr) {
    
  } else {
    
  }
  x_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.x)
}

// .safeheron.proto.CurvePoint g_x = 4;
inline bool MinimalParty::_internal_has_g_x() const {
  return this != internal_default_instance() && g_x_ != nullptr;
}
inline bool MinimalParty::has_g_x() const {
  return _internal_has_g_x();
}
inline const ::safeheron::proto::CurvePoint& MinimalParty::_internal_g_x() const {
  const ::safeheron::proto::CurvePoint* p = g_x_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& MinimalParty::g_x() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.g_x)
  return _internal_g_x();
}
inline void MinimalParty::unsafe_arena_set_allocated_g_x(
    ::safeheron::proto::CurvePoint* g_x) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x_);
  }
  g_x_ = g_x;
  if (g_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.g_x)
}
inline ::safeheron::proto::CurvePoint* MinimalParty::release_g_x() {
  
  ::safeheron::proto::CurvePoint* temp = g_x_;
  g_x_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::CurvePoint* MinimalParty::unsafe_arena_release_g_x() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.g_x)
  
  ::safeheron::proto::CurvePoint* temp = g_x_;
  g_x_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* MinimalParty::_internal_mutable_g_x() {
  
  if (g_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArena());
    g_x_ = p;
  }
  return g_x_;
}
inline ::safeheron::proto::CurvePoint* MinimalParty::mutable_g_x() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.g_x)
  return _internal_mutable_g_x();
}
inline void MinimalParty::set_allocated_g_x(::safeheron::proto::CurvePoint* g_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x_);
  }
  if (g_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x)->GetArena();
    if (message_arena != submessage_arena) {
      g_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g_x, submessage_arena);
    }
    
  } else {
    
  }
  g_x_ = g_x;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.g_x)
}

// -------------------------------------------------------------------

// MinimalSignKey

// string workspace_id = 1;
inline void MinimalSignKey::clear_workspace_id() {
  workspace_id_.ClearToEmpty();
}
inline const std::string& MinimalSignKey::workspace_id() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.workspace_id)
  return _internal_workspace_id();
}
inline void MinimalSignKey::set_workspace_id(const std::string& value) {
  _internal_set_workspace_id(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.workspace_id)
}
inline std::string* MinimalSignKey::mutable_workspace_id() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.workspace_id)
  return _internal_mutable_workspace_id();
}
inline const std::string& MinimalSignKey::_internal_workspace_id() const {
  return workspace_id_.Get();
}
inline void MinimalSignKey::_internal_set_workspace_id(const std::string& value) {
  
  workspace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MinimalSignKey::set_workspace_id(std::string&& value) {
  
  workspace_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.workspace_id)
}
inline void MinimalSignKey::set_workspace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workspace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.workspace_id)
}
inline void MinimalSignKey::set_workspace_id(const char* value,
    size_t size) {
  
  workspace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.workspace_id)
}
inline std::string* MinimalSignKey::_internal_mutable_workspace_id() {
  
  return workspace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MinimalSignKey::release_workspace_id() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.workspace_id)
  return workspace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MinimalSignKey::set_allocated_workspace_id(std::string* workspace_id) {
  if (workspace_id != nullptr) {
    
  } else {
    
  }
  workspace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workspace_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.workspace_id)
}

// int32 threshold = 2;
inline void MinimalSignKey::clear_threshold() {
  threshold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinimalSignKey::_internal_threshold() const {
  return threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinimalSignKey::threshold() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.threshold)
  return _internal_threshold();
}
inline void MinimalSignKey::_internal_set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  threshold_ = value;
}
inline void MinimalSignKey::set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.threshold)
}

// int32 n_parties = 3;
inline void MinimalSignKey::clear_n_parties() {
  n_parties_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinimalSignKey::_internal_n_parties() const {
  return n_parties_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinimalSignKey::n_parties() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.n_parties)
  return _internal_n_parties();
}
inline void MinimalSignKey::_internal_set_n_parties(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_parties_ = value;
}
inline void MinimalSignKey::set_n_parties(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n_parties(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.n_parties)
}

// .safeheron.proto.multi_party_ecdsa.cmp.MinimalParty local_party = 4;
inline bool MinimalSignKey::_internal_has_local_party() const {
  return this != internal_default_instance() && local_party_ != nullptr;
}
inline bool MinimalSignKey::has_local_party() const {
  return _internal_has_local_party();
}
inline void MinimalSignKey::clear_local_party() {
  if (GetArena() == nullptr && local_party_ != nullptr) {
    delete local_party_;
  }
  local_party_ = nullptr;
}
inline const ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty& MinimalSignKey::_internal_local_party() const {
  const ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* p = local_party_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty&>(
      ::safeheron::proto::multi_party_ecdsa::cmp::_MinimalParty_default_instance_);
}
inline const ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty& MinimalSignKey::local_party() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.local_party)
  return _internal_local_party();
}
inline void MinimalSignKey::unsafe_arena_set_allocated_local_party(
    ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* local_party) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_party_);
  }
  local_party_ = local_party;
  if (local_party) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.local_party)
}
inline ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* MinimalSignKey::release_local_party() {
  
  ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* temp = local_party_;
  local_party_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* MinimalSignKey::unsafe_arena_release_local_party() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.local_party)
  
  ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* temp = local_party_;
  local_party_ = nullptr;
  return temp;
}
inline ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* MinimalSignKey::_internal_mutable_local_party() {
  
  if (local_party_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty>(GetArena());
    local_party_ = p;
  }
  return local_party_;
}
inline ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* MinimalSignKey::mutable_local_party() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.local_party)
  return _internal_mutable_local_party();
}
inline void MinimalSignKey::set_allocated_local_party(::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* local_party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_party_;
  }
  if (local_party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_party);
    if (message_arena != submessage_arena) {
      local_party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_party, submessage_arena);
    }
    
  } else {
    
  }
  local_party_ = local_party;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.local_party)
}

// repeated .safeheron.proto.multi_party_ecdsa.cmp.MinimalParty remote_parties = 5;
inline int MinimalSignKey::_internal_remote_parties_size() const {
  return remote_parties_.size();
}
inline int MinimalSignKey::remote_parties_size() const {
  return _internal_remote_parties_size();
}
inline void MinimalSignKey::clear_remote_parties() {
  remote_parties_.Clear();
}
inline ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* MinimalSignKey::mutable_remote_parties(int index) {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.remote_parties)
  return remote_parties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty >*
MinimalSignKey::mutable_remote_parties() {
  // @@protoc_insertion_point(field_mutable_list:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.remote_parties)
  return &remote_parties_;
}
inline const ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty& MinimalSignKey::_internal_remote_parties(int index) const {
  return remote_parties_.Get(index);
}
inline const ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty& MinimalSignKey::remote_parties(int index) const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.remote_parties)
  return _internal_remote_parties(index);
}
inline ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* MinimalSignKey::_internal_add_remote_parties() {
  return remote_parties_.Add();
}
inline ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty* MinimalSignKey::add_remote_parties() {
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.remote_parties)
  return _internal_add_remote_parties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty >&
MinimalSignKey::remote_parties() const {
  // @@protoc_insertion_point(field_list:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.remote_parties)
  return remote_parties_;
}

// .safeheron.proto.CurvePoint g_x = 6;
inline bool MinimalSignKey::_internal_has_g_x() const {
  return this != internal_default_instance() && g_x_ != nullptr;
}
inline bool MinimalSignKey::has_g_x() const {
  return _internal_has_g_x();
}
inline const ::safeheron::proto::CurvePoint& MinimalSignKey::_internal_g_x() const {
  const ::safeheron::proto::CurvePoint* p = g_x_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& MinimalSignKey::g_x() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.g_x)
  return _internal_g_x();
}
inline void MinimalSignKey::unsafe_arena_set_allocated_g_x(
    ::safeheron::proto::CurvePoint* g_x) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x_);
  }
  g_x_ = g_x;
  if (g_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.g_x)
}
inline ::safeheron::proto::CurvePoint* MinimalSignKey::release_g_x() {
  
  ::safeheron::proto::CurvePoint* temp = g_x_;
  g_x_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::CurvePoint* MinimalSignKey::unsafe_arena_release_g_x() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.g_x)
  
  ::safeheron::proto::CurvePoint* temp = g_x_;
  g_x_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* MinimalSignKey::_internal_mutable_g_x() {
  
  if (g_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArena());
    g_x_ = p;
  }
  return g_x_;
}
inline ::safeheron::proto::CurvePoint* MinimalSignKey::mutable_g_x() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.g_x)
  return _internal_mutable_g_x();
}
inline void MinimalSignKey::set_allocated_g_x(::safeheron::proto::CurvePoint* g_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x_);
  }
  if (g_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x)->GetArena();
    if (message_arena != submessage_arena) {
      g_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g_x, submessage_arena);
    }
    
  } else {
    
  }
  g_x_ = g_x;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.g_x)
}

// -------------------------------------------------------------------

// Party

// string party_id = 1;
inline void Party::clear_party_id() {
  party_id_.ClearToEmpty();
}
inline const std::string& Party::party_id() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.Party.party_id)
  return _internal_party_id();
}
inline void Party::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.Party.party_id)
}
inline std::string* Party::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.Party.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& Party::_internal_party_id() const {
  return party_id_.Get();
}
inline void Party::_internal_set_party_id(const std::string& value) {
  
  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Party::set_party_id(std::string&& value) {
  
  party_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.Party.party_id)
}
inline void Party::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.Party.party_id)
}
inline void Party::set_party_id(const char* value,
    size_t size) {
  
  party_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.Party.party_id)
}
inline std::string* Party::_internal_mutable_party_id() {
  
  return party_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Party::release_party_id() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.Party.party_id)
  return party_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {
    
  } else {
    
  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.Party.party_id)
}

// string index = 2;
inline void Party::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Party::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.Party.index)
  return _internal_index();
}
inline void Party::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.Party.index)
}
inline std::string* Party::mutable_index() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.Party.index)
  return _internal_mutable_index();
}
inline const std::string& Party::_internal_index() const {
  return index_.Get();
}
inline void Party::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Party::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.Party.index)
}
inline void Party::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.Party.index)
}
inline void Party::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.Party.index)
}
inline std::string* Party::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Party::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.Party.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.Party.index)
}

// string x = 3;
inline void Party::clear_x() {
  x_.ClearToEmpty();
}
inline const std::string& Party::x() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.Party.x)
  return _internal_x();
}
inline void Party::set_x(const std::string& value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.Party.x)
}
inline std::string* Party::mutable_x() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.Party.x)
  return _internal_mutable_x();
}
inline const std::string& Party::_internal_x() const {
  return x_.Get();
}
inline void Party::_internal_set_x(const std::string& value) {
  
  x_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Party::set_x(std::string&& value) {
  
  x_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.Party.x)
}
inline void Party::set_x(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  x_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.Party.x)
}
inline void Party::set_x(const char* value,
    size_t size) {
  
  x_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.Party.x)
}
inline std::string* Party::_internal_mutable_x() {
  
  return x_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Party::release_x() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.Party.x)
  return x_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_x(std::string* x) {
  if (x != nullptr) {
    
  } else {
    
  }
  x_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.Party.x)
}

// .safeheron.proto.CurvePoint g_x = 4;
inline bool Party::_internal_has_g_x() const {
  return this != internal_default_instance() && g_x_ != nullptr;
}
inline bool Party::has_g_x() const {
  return _internal_has_g_x();
}
inline const ::safeheron::proto::CurvePoint& Party::_internal_g_x() const {
  const ::safeheron::proto::CurvePoint* p = g_x_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Party::g_x() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.Party.g_x)
  return _internal_g_x();
}
inline void Party::unsafe_arena_set_allocated_g_x(
    ::safeheron::proto::CurvePoint* g_x) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x_);
  }
  g_x_ = g_x;
  if (g_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.Party.g_x)
}
inline ::safeheron::proto::CurvePoint* Party::release_g_x() {
  
  ::safeheron::proto::CurvePoint* temp = g_x_;
  g_x_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::CurvePoint* Party::unsafe_arena_release_g_x() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.Party.g_x)
  
  ::safeheron::proto::CurvePoint* temp = g_x_;
  g_x_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Party::_internal_mutable_g_x() {
  
  if (g_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArena());
    g_x_ = p;
  }
  return g_x_;
}
inline ::safeheron::proto::CurvePoint* Party::mutable_g_x() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.Party.g_x)
  return _internal_mutable_g_x();
}
inline void Party::set_allocated_g_x(::safeheron::proto::CurvePoint* g_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x_);
  }
  if (g_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x)->GetArena();
    if (message_arena != submessage_arena) {
      g_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g_x, submessage_arena);
    }
    
  } else {
    
  }
  g_x_ = g_x;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.Party.g_x)
}

// .safeheron.proto.CurvePoint g_y = 5;
inline bool Party::_internal_has_g_y() const {
  return this != internal_default_instance() && g_y_ != nullptr;
}
inline bool Party::has_g_y() const {
  return _internal_has_g_y();
}
inline const ::safeheron::proto::CurvePoint& Party::_internal_g_y() const {
  const ::safeheron::proto::CurvePoint* p = g_y_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Party::g_y() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.Party.g_y)
  return _internal_g_y();
}
inline void Party::unsafe_arena_set_allocated_g_y(
    ::safeheron::proto::CurvePoint* g_y) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_y_);
  }
  g_y_ = g_y;
  if (g_y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.Party.g_y)
}
inline ::safeheron::proto::CurvePoint* Party::release_g_y() {
  
  ::safeheron::proto::CurvePoint* temp = g_y_;
  g_y_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::CurvePoint* Party::unsafe_arena_release_g_y() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.Party.g_y)
  
  ::safeheron::proto::CurvePoint* temp = g_y_;
  g_y_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Party::_internal_mutable_g_y() {
  
  if (g_y_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArena());
    g_y_ = p;
  }
  return g_y_;
}
inline ::safeheron::proto::CurvePoint* Party::mutable_g_y() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.Party.g_y)
  return _internal_mutable_g_y();
}
inline void Party::set_allocated_g_y(::safeheron::proto::CurvePoint* g_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_y_);
  }
  if (g_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_y)->GetArena();
    if (message_arena != submessage_arena) {
      g_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g_y, submessage_arena);
    }
    
  } else {
    
  }
  g_y_ = g_y;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.Party.g_y)
}

// string N = 10;
inline void Party::clear_n() {
  n_.ClearToEmpty();
}
inline const std::string& Party::n() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.Party.N)
  return _internal_n();
}
inline void Party::set_n(const std::string& value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.Party.N)
}
inline std::string* Party::mutable_n() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.Party.N)
  return _internal_mutable_n();
}
inline const std::string& Party::_internal_n() const {
  return n_.Get();
}
inline void Party::_internal_set_n(const std::string& value) {
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Party::set_n(std::string&& value) {
  
  n_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.Party.N)
}
inline void Party::set_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.Party.N)
}
inline void Party::set_n(const char* value,
    size_t size) {
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.Party.N)
}
inline std::string* Party::_internal_mutable_n() {
  
  return n_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Party::release_n() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.Party.N)
  return n_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_n(std::string* n) {
  if (n != nullptr) {
    
  } else {
    
  }
  n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.Party.N)
}

// string s = 11;
inline void Party::clear_s() {
  s_.ClearToEmpty();
}
inline const std::string& Party::s() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.Party.s)
  return _internal_s();
}
inline void Party::set_s(const std::string& value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.Party.s)
}
inline std::string* Party::mutable_s() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.Party.s)
  return _internal_mutable_s();
}
inline const std::string& Party::_internal_s() const {
  return s_.Get();
}
inline void Party::_internal_set_s(const std::string& value) {
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Party::set_s(std::string&& value) {
  
  s_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.Party.s)
}
inline void Party::set_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.Party.s)
}
inline void Party::set_s(const char* value,
    size_t size) {
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.Party.s)
}
inline std::string* Party::_internal_mutable_s() {
  
  return s_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Party::release_s() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.Party.s)
  return s_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.Party.s)
}

// string t = 12;
inline void Party::clear_t() {
  t_.ClearToEmpty();
}
inline const std::string& Party::t() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.Party.t)
  return _internal_t();
}
inline void Party::set_t(const std::string& value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.Party.t)
}
inline std::string* Party::mutable_t() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.Party.t)
  return _internal_mutable_t();
}
inline const std::string& Party::_internal_t() const {
  return t_.Get();
}
inline void Party::_internal_set_t(const std::string& value) {
  
  t_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Party::set_t(std::string&& value) {
  
  t_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.Party.t)
}
inline void Party::set_t(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  t_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.Party.t)
}
inline void Party::set_t(const char* value,
    size_t size) {
  
  t_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.Party.t)
}
inline std::string* Party::_internal_mutable_t() {
  
  return t_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Party::release_t() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.Party.t)
  return t_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_t(std::string* t) {
  if (t != nullptr) {
    
  } else {
    
  }
  t_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), t,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.Party.t)
}

// string p = 13;
inline void Party::clear_p() {
  p_.ClearToEmpty();
}
inline const std::string& Party::p() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.Party.p)
  return _internal_p();
}
inline void Party::set_p(const std::string& value) {
  _internal_set_p(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.Party.p)
}
inline std::string* Party::mutable_p() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.Party.p)
  return _internal_mutable_p();
}
inline const std::string& Party::_internal_p() const {
  return p_.Get();
}
inline void Party::_internal_set_p(const std::string& value) {
  
  p_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Party::set_p(std::string&& value) {
  
  p_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.Party.p)
}
inline void Party::set_p(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  p_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.Party.p)
}
inline void Party::set_p(const char* value,
    size_t size) {
  
  p_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.Party.p)
}
inline std::string* Party::_internal_mutable_p() {
  
  return p_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Party::release_p() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.Party.p)
  return p_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_p(std::string* p) {
  if (p != nullptr) {
    
  } else {
    
  }
  p_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), p,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.Party.p)
}

// string q = 14;
inline void Party::clear_q() {
  q_.ClearToEmpty();
}
inline const std::string& Party::q() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.Party.q)
  return _internal_q();
}
inline void Party::set_q(const std::string& value) {
  _internal_set_q(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.Party.q)
}
inline std::string* Party::mutable_q() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.Party.q)
  return _internal_mutable_q();
}
inline const std::string& Party::_internal_q() const {
  return q_.Get();
}
inline void Party::_internal_set_q(const std::string& value) {
  
  q_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Party::set_q(std::string&& value) {
  
  q_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.Party.q)
}
inline void Party::set_q(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  q_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.Party.q)
}
inline void Party::set_q(const char* value,
    size_t size) {
  
  q_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.Party.q)
}
inline std::string* Party::_internal_mutable_q() {
  
  return q_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Party::release_q() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.Party.q)
  return q_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_q(std::string* q) {
  if (q != nullptr) {
    
  } else {
    
  }
  q_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), q,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.Party.q)
}

// -------------------------------------------------------------------

// SignKey

// string workspace_id = 1;
inline void SignKey::clear_workspace_id() {
  workspace_id_.ClearToEmpty();
}
inline const std::string& SignKey::workspace_id() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.SignKey.workspace_id)
  return _internal_workspace_id();
}
inline void SignKey::set_workspace_id(const std::string& value) {
  _internal_set_workspace_id(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.SignKey.workspace_id)
}
inline std::string* SignKey::mutable_workspace_id() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.SignKey.workspace_id)
  return _internal_mutable_workspace_id();
}
inline const std::string& SignKey::_internal_workspace_id() const {
  return workspace_id_.Get();
}
inline void SignKey::_internal_set_workspace_id(const std::string& value) {
  
  workspace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignKey::set_workspace_id(std::string&& value) {
  
  workspace_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.SignKey.workspace_id)
}
inline void SignKey::set_workspace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workspace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.SignKey.workspace_id)
}
inline void SignKey::set_workspace_id(const char* value,
    size_t size) {
  
  workspace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.SignKey.workspace_id)
}
inline std::string* SignKey::_internal_mutable_workspace_id() {
  
  return workspace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignKey::release_workspace_id() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.SignKey.workspace_id)
  return workspace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignKey::set_allocated_workspace_id(std::string* workspace_id) {
  if (workspace_id != nullptr) {
    
  } else {
    
  }
  workspace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workspace_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.SignKey.workspace_id)
}

// int32 threshold = 2;
inline void SignKey::clear_threshold() {
  threshold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignKey::_internal_threshold() const {
  return threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignKey::threshold() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.SignKey.threshold)
  return _internal_threshold();
}
inline void SignKey::_internal_set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  threshold_ = value;
}
inline void SignKey::set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.SignKey.threshold)
}

// int32 n_parties = 3;
inline void SignKey::clear_n_parties() {
  n_parties_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignKey::_internal_n_parties() const {
  return n_parties_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignKey::n_parties() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.SignKey.n_parties)
  return _internal_n_parties();
}
inline void SignKey::_internal_set_n_parties(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_parties_ = value;
}
inline void SignKey::set_n_parties(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n_parties(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.SignKey.n_parties)
}

// .safeheron.proto.multi_party_ecdsa.cmp.Party local_party = 4;
inline bool SignKey::_internal_has_local_party() const {
  return this != internal_default_instance() && local_party_ != nullptr;
}
inline bool SignKey::has_local_party() const {
  return _internal_has_local_party();
}
inline void SignKey::clear_local_party() {
  if (GetArena() == nullptr && local_party_ != nullptr) {
    delete local_party_;
  }
  local_party_ = nullptr;
}
inline const ::safeheron::proto::multi_party_ecdsa::cmp::Party& SignKey::_internal_local_party() const {
  const ::safeheron::proto::multi_party_ecdsa::cmp::Party* p = local_party_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::multi_party_ecdsa::cmp::Party&>(
      ::safeheron::proto::multi_party_ecdsa::cmp::_Party_default_instance_);
}
inline const ::safeheron::proto::multi_party_ecdsa::cmp::Party& SignKey::local_party() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.SignKey.local_party)
  return _internal_local_party();
}
inline void SignKey::unsafe_arena_set_allocated_local_party(
    ::safeheron::proto::multi_party_ecdsa::cmp::Party* local_party) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_party_);
  }
  local_party_ = local_party;
  if (local_party) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.SignKey.local_party)
}
inline ::safeheron::proto::multi_party_ecdsa::cmp::Party* SignKey::release_local_party() {
  
  ::safeheron::proto::multi_party_ecdsa::cmp::Party* temp = local_party_;
  local_party_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::multi_party_ecdsa::cmp::Party* SignKey::unsafe_arena_release_local_party() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.SignKey.local_party)
  
  ::safeheron::proto::multi_party_ecdsa::cmp::Party* temp = local_party_;
  local_party_ = nullptr;
  return temp;
}
inline ::safeheron::proto::multi_party_ecdsa::cmp::Party* SignKey::_internal_mutable_local_party() {
  
  if (local_party_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::Party>(GetArena());
    local_party_ = p;
  }
  return local_party_;
}
inline ::safeheron::proto::multi_party_ecdsa::cmp::Party* SignKey::mutable_local_party() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.SignKey.local_party)
  return _internal_mutable_local_party();
}
inline void SignKey::set_allocated_local_party(::safeheron::proto::multi_party_ecdsa::cmp::Party* local_party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_party_;
  }
  if (local_party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_party);
    if (message_arena != submessage_arena) {
      local_party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_party, submessage_arena);
    }
    
  } else {
    
  }
  local_party_ = local_party;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.SignKey.local_party)
}

// repeated .safeheron.proto.multi_party_ecdsa.cmp.Party remote_parties = 5;
inline int SignKey::_internal_remote_parties_size() const {
  return remote_parties_.size();
}
inline int SignKey::remote_parties_size() const {
  return _internal_remote_parties_size();
}
inline void SignKey::clear_remote_parties() {
  remote_parties_.Clear();
}
inline ::safeheron::proto::multi_party_ecdsa::cmp::Party* SignKey::mutable_remote_parties(int index) {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.SignKey.remote_parties)
  return remote_parties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::cmp::Party >*
SignKey::mutable_remote_parties() {
  // @@protoc_insertion_point(field_mutable_list:safeheron.proto.multi_party_ecdsa.cmp.SignKey.remote_parties)
  return &remote_parties_;
}
inline const ::safeheron::proto::multi_party_ecdsa::cmp::Party& SignKey::_internal_remote_parties(int index) const {
  return remote_parties_.Get(index);
}
inline const ::safeheron::proto::multi_party_ecdsa::cmp::Party& SignKey::remote_parties(int index) const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.SignKey.remote_parties)
  return _internal_remote_parties(index);
}
inline ::safeheron::proto::multi_party_ecdsa::cmp::Party* SignKey::_internal_add_remote_parties() {
  return remote_parties_.Add();
}
inline ::safeheron::proto::multi_party_ecdsa::cmp::Party* SignKey::add_remote_parties() {
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.cmp.SignKey.remote_parties)
  return _internal_add_remote_parties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::multi_party_ecdsa::cmp::Party >&
SignKey::remote_parties() const {
  // @@protoc_insertion_point(field_list:safeheron.proto.multi_party_ecdsa.cmp.SignKey.remote_parties)
  return remote_parties_;
}

// .safeheron.proto.CurvePoint g_x = 6;
inline bool SignKey::_internal_has_g_x() const {
  return this != internal_default_instance() && g_x_ != nullptr;
}
inline bool SignKey::has_g_x() const {
  return _internal_has_g_x();
}
inline const ::safeheron::proto::CurvePoint& SignKey::_internal_g_x() const {
  const ::safeheron::proto::CurvePoint* p = g_x_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& SignKey::g_x() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.SignKey.g_x)
  return _internal_g_x();
}
inline void SignKey::unsafe_arena_set_allocated_g_x(
    ::safeheron::proto::CurvePoint* g_x) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x_);
  }
  g_x_ = g_x;
  if (g_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.SignKey.g_x)
}
inline ::safeheron::proto::CurvePoint* SignKey::release_g_x() {
  
  ::safeheron::proto::CurvePoint* temp = g_x_;
  g_x_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::CurvePoint* SignKey::unsafe_arena_release_g_x() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.SignKey.g_x)
  
  ::safeheron::proto::CurvePoint* temp = g_x_;
  g_x_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* SignKey::_internal_mutable_g_x() {
  
  if (g_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArena());
    g_x_ = p;
  }
  return g_x_;
}
inline ::safeheron::proto::CurvePoint* SignKey::mutable_g_x() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.SignKey.g_x)
  return _internal_mutable_g_x();
}
inline void SignKey::set_allocated_g_x(::safeheron::proto::CurvePoint* g_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x_);
  }
  if (g_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_x)->GetArena();
    if (message_arena != submessage_arena) {
      g_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g_x, submessage_arena);
    }
    
  } else {
    
  }
  g_x_ = g_x;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.SignKey.g_x)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cmp_2fstruct_2eproto
