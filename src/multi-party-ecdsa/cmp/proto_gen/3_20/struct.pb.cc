// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmp/struct.proto

#include "struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
PROTOBUF_CONSTEXPR MinimalParty::MinimalParty(
    ::_pbi::ConstantInitialized)
  : party_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , x_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , g_x_(nullptr){}
struct MinimalPartyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinimalPartyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinimalPartyDefaultTypeInternal() {}
  union {
    MinimalParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinimalPartyDefaultTypeInternal _MinimalParty_default_instance_;
PROTOBUF_CONSTEXPR MinimalSignKey::MinimalSignKey(
    ::_pbi::ConstantInitialized)
  : remote_parties_()
  , workspace_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , local_party_(nullptr)
  , g_x_(nullptr)
  , threshold_(0)
  , n_parties_(0){}
struct MinimalSignKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinimalSignKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinimalSignKeyDefaultTypeInternal() {}
  union {
    MinimalSignKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinimalSignKeyDefaultTypeInternal _MinimalSignKey_default_instance_;
PROTOBUF_CONSTEXPR Party::Party(
    ::_pbi::ConstantInitialized)
  : party_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , x_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , n_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , s_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , t_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , p_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , q_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , g_x_(nullptr)
  , g_y_(nullptr){}
struct PartyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartyDefaultTypeInternal() {}
  union {
    Party _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartyDefaultTypeInternal _Party_default_instance_;
PROTOBUF_CONSTEXPR SignKey::SignKey(
    ::_pbi::ConstantInitialized)
  : remote_parties_()
  , workspace_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , local_party_(nullptr)
  , g_x_(nullptr)
  , threshold_(0)
  , n_parties_(0){}
struct SignKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignKeyDefaultTypeInternal() {}
  union {
    SignKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignKeyDefaultTypeInternal _SignKey_default_instance_;
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
static ::_pb::Metadata file_level_metadata_cmp_2fstruct_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cmp_2fstruct_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cmp_2fstruct_2eproto = nullptr;

const uint32_t TableStruct_cmp_2fstruct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty, party_id_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty, x_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty, g_x_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::MinimalSignKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::MinimalSignKey, workspace_id_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::MinimalSignKey, threshold_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::MinimalSignKey, n_parties_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::MinimalSignKey, local_party_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::MinimalSignKey, remote_parties_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::MinimalSignKey, g_x_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::Party, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::Party, party_id_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::Party, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::Party, x_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::Party, g_x_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::Party, g_y_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::Party, n_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::Party, s_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::Party, t_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::Party, p_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::Party, q_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::SignKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::SignKey, workspace_id_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::SignKey, threshold_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::SignKey, n_parties_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::SignKey, local_party_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::SignKey, remote_parties_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::SignKey, g_x_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty)},
  { 10, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::MinimalSignKey)},
  { 22, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::Party)},
  { 38, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::SignKey)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::safeheron::proto::multi_party_ecdsa::cmp::_MinimalParty_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::cmp::_MinimalSignKey_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::cmp::_Party_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::cmp::_SignKey_default_instance_._instance,
};

const char descriptor_table_protodef_cmp_2fstruct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020cmp/struct.proto\022%safeheron.proto.mult"
  "i_party_ecdsa.cmp\032\021curve_point.proto\"d\n\014"
  "MinimalParty\022\020\n\010party_id\030\001 \001(\t\022\r\n\005index\030"
  "\002 \001(\t\022\t\n\001x\030\003 \001(\t\022(\n\003g_x\030\004 \001(\0132\033.safehero"
  "n.proto.CurvePoint\"\215\002\n\016MinimalSignKey\022\024\n"
  "\014workspace_id\030\001 \001(\t\022\021\n\tthreshold\030\002 \001(\005\022\021"
  "\n\tn_parties\030\003 \001(\005\022H\n\013local_party\030\004 \001(\01323"
  ".safeheron.proto.multi_party_ecdsa.cmp.M"
  "inimalParty\022K\n\016remote_parties\030\005 \003(\01323.sa"
  "feheron.proto.multi_party_ecdsa.cmp.Mini"
  "malParty\022(\n\003g_x\030\006 \001(\0132\033.safeheron.proto."
  "CurvePoint\"\276\001\n\005Party\022\020\n\010party_id\030\001 \001(\t\022\r"
  "\n\005index\030\002 \001(\t\022\t\n\001x\030\003 \001(\t\022(\n\003g_x\030\004 \001(\0132\033."
  "safeheron.proto.CurvePoint\022(\n\003g_y\030\005 \001(\0132"
  "\033.safeheron.proto.CurvePoint\022\t\n\001N\030\n \001(\t\022"
  "\t\n\001s\030\013 \001(\t\022\t\n\001t\030\014 \001(\t\022\t\n\001p\030\r \001(\t\022\t\n\001q\030\016 "
  "\001(\t\"\370\001\n\007SignKey\022\024\n\014workspace_id\030\001 \001(\t\022\021\n"
  "\tthreshold\030\002 \001(\005\022\021\n\tn_parties\030\003 \001(\005\022A\n\013l"
  "ocal_party\030\004 \001(\0132,.safeheron.proto.multi"
  "_party_ecdsa.cmp.Party\022D\n\016remote_parties"
  "\030\005 \003(\0132,.safeheron.proto.multi_party_ecd"
  "sa.cmp.Party\022(\n\003g_x\030\006 \001(\0132\033.safeheron.pr"
  "oto.CurvePointb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cmp_2fstruct_2eproto_deps[1] = {
  &::descriptor_table_curve_5fpoint_2eproto,
};
static ::_pbi::once_flag descriptor_table_cmp_2fstruct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cmp_2fstruct_2eproto = {
    false, false, 902, descriptor_table_protodef_cmp_2fstruct_2eproto,
    "cmp/struct.proto",
    &descriptor_table_cmp_2fstruct_2eproto_once, descriptor_table_cmp_2fstruct_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_cmp_2fstruct_2eproto::offsets,
    file_level_metadata_cmp_2fstruct_2eproto, file_level_enum_descriptors_cmp_2fstruct_2eproto,
    file_level_service_descriptors_cmp_2fstruct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cmp_2fstruct_2eproto_getter() {
  return &descriptor_table_cmp_2fstruct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cmp_2fstruct_2eproto(&descriptor_table_cmp_2fstruct_2eproto);
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {

// ===================================================================

class MinimalParty::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& g_x(const MinimalParty* msg);
};

const ::safeheron::proto::CurvePoint&
MinimalParty::_Internal::g_x(const MinimalParty* msg) {
  return *msg->g_x_;
}
void MinimalParty::clear_g_x() {
  if (GetArenaForAllocation() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
}
MinimalParty::MinimalParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty)
}
MinimalParty::MinimalParty(const MinimalParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    party_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_party_id().empty()) {
    party_id_.Set(from._internal_party_id(), 
      GetArenaForAllocation());
  }
  index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    index_.Set(from._internal_index(), 
      GetArenaForAllocation());
  }
  x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    x_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x().empty()) {
    x_.Set(from._internal_x(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_g_x()) {
    g_x_ = new ::safeheron::proto::CurvePoint(*from.g_x_);
  } else {
    g_x_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty)
}

inline void MinimalParty::SharedCtor() {
party_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  party_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
x_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  x_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
g_x_ = nullptr;
}

MinimalParty::~MinimalParty() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinimalParty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  party_id_.Destroy();
  index_.Destroy();
  x_.Destroy();
  if (this != internal_default_instance()) delete g_x_;
}

void MinimalParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MinimalParty::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  index_.ClearToEmpty();
  x_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinimalParty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.party_id"));
        } else
          goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.index"));
        } else
          goto handle_unusual;
        continue;
      // string x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_x();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.x"));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint g_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_x(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MinimalParty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (!this->_internal_party_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // string x = 3;
  if (!this->_internal_x().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x().data(), static_cast<int>(this->_internal_x().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.MinimalParty.x");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_x(), target);
  }

  // .safeheron.proto.CurvePoint g_x = 4;
  if (this->_internal_has_g_x()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::g_x(this),
        _Internal::g_x(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty)
  return target;
}

size_t MinimalParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (!this->_internal_party_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string x = 3;
  if (!this->_internal_x().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x());
  }

  // .safeheron.proto.CurvePoint g_x = 4;
  if (this->_internal_has_g_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_x_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinimalParty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MinimalParty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinimalParty::GetClassData() const { return &_class_data_; }

void MinimalParty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MinimalParty *>(to)->MergeFrom(
      static_cast<const MinimalParty &>(from));
}


void MinimalParty::MergeFrom(const MinimalParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_party_id().empty()) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (!from._internal_index().empty()) {
    _internal_set_index(from._internal_index());
  }
  if (!from._internal_x().empty()) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_has_g_x()) {
    _internal_mutable_g_x()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_g_x());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinimalParty::CopyFrom(const MinimalParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.MinimalParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinimalParty::IsInitialized() const {
  return true;
}

void MinimalParty::InternalSwap(MinimalParty* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &party_id_, lhs_arena,
      &other->party_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &index_, lhs_arena,
      &other->index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &x_, lhs_arena,
      &other->x_, rhs_arena
  );
  swap(g_x_, other->g_x_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MinimalParty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cmp_2fstruct_2eproto_getter, &descriptor_table_cmp_2fstruct_2eproto_once,
      file_level_metadata_cmp_2fstruct_2eproto[0]);
}

// ===================================================================

class MinimalSignKey::_Internal {
 public:
  static const ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty& local_party(const MinimalSignKey* msg);
  static const ::safeheron::proto::CurvePoint& g_x(const MinimalSignKey* msg);
};

const ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty&
MinimalSignKey::_Internal::local_party(const MinimalSignKey* msg) {
  return *msg->local_party_;
}
const ::safeheron::proto::CurvePoint&
MinimalSignKey::_Internal::g_x(const MinimalSignKey* msg) {
  return *msg->g_x_;
}
void MinimalSignKey::clear_g_x() {
  if (GetArenaForAllocation() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
}
MinimalSignKey::MinimalSignKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  remote_parties_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey)
}
MinimalSignKey::MinimalSignKey(const MinimalSignKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      remote_parties_(from.remote_parties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workspace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workspace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workspace_id().empty()) {
    workspace_id_.Set(from._internal_workspace_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_local_party()) {
    local_party_ = new ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty(*from.local_party_);
  } else {
    local_party_ = nullptr;
  }
  if (from._internal_has_g_x()) {
    g_x_ = new ::safeheron::proto::CurvePoint(*from.g_x_);
  } else {
    g_x_ = nullptr;
  }
  ::memcpy(&threshold_, &from.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_parties_) -
    reinterpret_cast<char*>(&threshold_)) + sizeof(n_parties_));
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey)
}

inline void MinimalSignKey::SharedCtor() {
workspace_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workspace_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&local_party_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&n_parties_) -
    reinterpret_cast<char*>(&local_party_)) + sizeof(n_parties_));
}

MinimalSignKey::~MinimalSignKey() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinimalSignKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workspace_id_.Destroy();
  if (this != internal_default_instance()) delete local_party_;
  if (this != internal_default_instance()) delete g_x_;
}

void MinimalSignKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MinimalSignKey::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_parties_.Clear();
  workspace_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && local_party_ != nullptr) {
    delete local_party_;
  }
  local_party_ = nullptr;
  if (GetArenaForAllocation() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
  ::memset(&threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_parties_) -
      reinterpret_cast<char*>(&threshold_)) + sizeof(n_parties_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinimalSignKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string workspace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_workspace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.workspace_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 n_parties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          n_parties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.multi_party_ecdsa.cmp.MinimalParty local_party = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_party(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safeheron.proto.multi_party_ecdsa.cmp.MinimalParty remote_parties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remote_parties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint g_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_x(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MinimalSignKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string workspace_id = 1;
  if (!this->_internal_workspace_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workspace_id().data(), static_cast<int>(this->_internal_workspace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey.workspace_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_workspace_id(), target);
  }

  // int32 threshold = 2;
  if (this->_internal_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_threshold(), target);
  }

  // int32 n_parties = 3;
  if (this->_internal_n_parties() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_n_parties(), target);
  }

  // .safeheron.proto.multi_party_ecdsa.cmp.MinimalParty local_party = 4;
  if (this->_internal_has_local_party()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::local_party(this),
        _Internal::local_party(this).GetCachedSize(), target, stream);
  }

  // repeated .safeheron.proto.multi_party_ecdsa.cmp.MinimalParty remote_parties = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remote_parties_size()); i < n; i++) {
    const auto& repfield = this->_internal_remote_parties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .safeheron.proto.CurvePoint g_x = 6;
  if (this->_internal_has_g_x()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::g_x(this),
        _Internal::g_x(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey)
  return target;
}

size_t MinimalSignKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safeheron.proto.multi_party_ecdsa.cmp.MinimalParty remote_parties = 5;
  total_size += 1UL * this->_internal_remote_parties_size();
  for (const auto& msg : this->remote_parties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workspace_id = 1;
  if (!this->_internal_workspace_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workspace_id());
  }

  // .safeheron.proto.multi_party_ecdsa.cmp.MinimalParty local_party = 4;
  if (this->_internal_has_local_party()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_party_);
  }

  // .safeheron.proto.CurvePoint g_x = 6;
  if (this->_internal_has_g_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_x_);
  }

  // int32 threshold = 2;
  if (this->_internal_threshold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_threshold());
  }

  // int32 n_parties = 3;
  if (this->_internal_n_parties() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n_parties());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinimalSignKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MinimalSignKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinimalSignKey::GetClassData() const { return &_class_data_; }

void MinimalSignKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MinimalSignKey *>(to)->MergeFrom(
      static_cast<const MinimalSignKey &>(from));
}


void MinimalSignKey::MergeFrom(const MinimalSignKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  remote_parties_.MergeFrom(from.remote_parties_);
  if (!from._internal_workspace_id().empty()) {
    _internal_set_workspace_id(from._internal_workspace_id());
  }
  if (from._internal_has_local_party()) {
    _internal_mutable_local_party()->::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty::MergeFrom(from._internal_local_party());
  }
  if (from._internal_has_g_x()) {
    _internal_mutable_g_x()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_g_x());
  }
  if (from._internal_threshold() != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
  if (from._internal_n_parties() != 0) {
    _internal_set_n_parties(from._internal_n_parties());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinimalSignKey::CopyFrom(const MinimalSignKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.MinimalSignKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinimalSignKey::IsInitialized() const {
  return true;
}

void MinimalSignKey::InternalSwap(MinimalSignKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  remote_parties_.InternalSwap(&other->remote_parties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &workspace_id_, lhs_arena,
      &other->workspace_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinimalSignKey, n_parties_)
      + sizeof(MinimalSignKey::n_parties_)
      - PROTOBUF_FIELD_OFFSET(MinimalSignKey, local_party_)>(
          reinterpret_cast<char*>(&local_party_),
          reinterpret_cast<char*>(&other->local_party_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinimalSignKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cmp_2fstruct_2eproto_getter, &descriptor_table_cmp_2fstruct_2eproto_once,
      file_level_metadata_cmp_2fstruct_2eproto[1]);
}

// ===================================================================

class Party::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& g_x(const Party* msg);
  static const ::safeheron::proto::CurvePoint& g_y(const Party* msg);
};

const ::safeheron::proto::CurvePoint&
Party::_Internal::g_x(const Party* msg) {
  return *msg->g_x_;
}
const ::safeheron::proto::CurvePoint&
Party::_Internal::g_y(const Party* msg) {
  return *msg->g_y_;
}
void Party::clear_g_x() {
  if (GetArenaForAllocation() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
}
void Party::clear_g_y() {
  if (GetArenaForAllocation() == nullptr && g_y_ != nullptr) {
    delete g_y_;
  }
  g_y_ = nullptr;
}
Party::Party(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.Party)
}
Party::Party(const Party& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    party_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_party_id().empty()) {
    party_id_.Set(from._internal_party_id(), 
      GetArenaForAllocation());
  }
  index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    index_.Set(from._internal_index(), 
      GetArenaForAllocation());
  }
  x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    x_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x().empty()) {
    x_.Set(from._internal_x(), 
      GetArenaForAllocation());
  }
  n_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    n_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_n().empty()) {
    n_.Set(from._internal_n(), 
      GetArenaForAllocation());
  }
  s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s().empty()) {
    s_.Set(from._internal_s(), 
      GetArenaForAllocation());
  }
  t_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    t_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_t().empty()) {
    t_.Set(from._internal_t(), 
      GetArenaForAllocation());
  }
  p_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    p_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_p().empty()) {
    p_.Set(from._internal_p(), 
      GetArenaForAllocation());
  }
  q_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    q_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_q().empty()) {
    q_.Set(from._internal_q(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_g_x()) {
    g_x_ = new ::safeheron::proto::CurvePoint(*from.g_x_);
  } else {
    g_x_ = nullptr;
  }
  if (from._internal_has_g_y()) {
    g_y_ = new ::safeheron::proto::CurvePoint(*from.g_y_);
  } else {
    g_y_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.Party)
}

inline void Party::SharedCtor() {
party_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  party_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
x_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  x_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
n_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  n_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
s_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
t_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  t_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
p_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  p_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
q_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  q_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&g_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&g_y_) -
    reinterpret_cast<char*>(&g_x_)) + sizeof(g_y_));
}

Party::~Party() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.Party)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Party::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  party_id_.Destroy();
  index_.Destroy();
  x_.Destroy();
  n_.Destroy();
  s_.Destroy();
  t_.Destroy();
  p_.Destroy();
  q_.Destroy();
  if (this != internal_default_instance()) delete g_x_;
  if (this != internal_default_instance()) delete g_y_;
}

void Party::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Party::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.Party)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.ClearToEmpty();
  index_.ClearToEmpty();
  x_.ClearToEmpty();
  n_.ClearToEmpty();
  s_.ClearToEmpty();
  t_.ClearToEmpty();
  p_.ClearToEmpty();
  q_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
  if (GetArenaForAllocation() == nullptr && g_y_ != nullptr) {
    delete g_y_;
  }
  g_y_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Party::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.Party.party_id"));
        } else
          goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.Party.index"));
        } else
          goto handle_unusual;
        continue;
      // string x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_x();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.Party.x"));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint g_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_x(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint g_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_y(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string N = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_n();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.Party.N"));
        } else
          goto handle_unusual;
        continue;
      // string s = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.Party.s"));
        } else
          goto handle_unusual;
        continue;
      // string t = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_t();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.Party.t"));
        } else
          goto handle_unusual;
        continue;
      // string p = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_p();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.Party.p"));
        } else
          goto handle_unusual;
        continue;
      // string q = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_q();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.Party.q"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Party::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.Party)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string party_id = 1;
  if (!this->_internal_party_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.Party.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.Party.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // string x = 3;
  if (!this->_internal_x().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x().data(), static_cast<int>(this->_internal_x().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.Party.x");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_x(), target);
  }

  // .safeheron.proto.CurvePoint g_x = 4;
  if (this->_internal_has_g_x()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::g_x(this),
        _Internal::g_x(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.CurvePoint g_y = 5;
  if (this->_internal_has_g_y()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::g_y(this),
        _Internal::g_y(this).GetCachedSize(), target, stream);
  }

  // string N = 10;
  if (!this->_internal_n().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_n().data(), static_cast<int>(this->_internal_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.Party.N");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_n(), target);
  }

  // string s = 11;
  if (!this->_internal_s().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.Party.s");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_s(), target);
  }

  // string t = 12;
  if (!this->_internal_t().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_t().data(), static_cast<int>(this->_internal_t().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.Party.t");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_t(), target);
  }

  // string p = 13;
  if (!this->_internal_p().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_p().data(), static_cast<int>(this->_internal_p().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.Party.p");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_p(), target);
  }

  // string q = 14;
  if (!this->_internal_q().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_q().data(), static_cast<int>(this->_internal_q().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.Party.q");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_q(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.Party)
  return target;
}

size_t Party::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.Party)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party_id = 1;
  if (!this->_internal_party_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_id());
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string x = 3;
  if (!this->_internal_x().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x());
  }

  // string N = 10;
  if (!this->_internal_n().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_n());
  }

  // string s = 11;
  if (!this->_internal_s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());
  }

  // string t = 12;
  if (!this->_internal_t().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_t());
  }

  // string p = 13;
  if (!this->_internal_p().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_p());
  }

  // string q = 14;
  if (!this->_internal_q().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_q());
  }

  // .safeheron.proto.CurvePoint g_x = 4;
  if (this->_internal_has_g_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_x_);
  }

  // .safeheron.proto.CurvePoint g_y = 5;
  if (this->_internal_has_g_y()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_y_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Party::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Party::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Party::GetClassData() const { return &_class_data_; }

void Party::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Party *>(to)->MergeFrom(
      static_cast<const Party &>(from));
}


void Party::MergeFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.Party)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_party_id().empty()) {
    _internal_set_party_id(from._internal_party_id());
  }
  if (!from._internal_index().empty()) {
    _internal_set_index(from._internal_index());
  }
  if (!from._internal_x().empty()) {
    _internal_set_x(from._internal_x());
  }
  if (!from._internal_n().empty()) {
    _internal_set_n(from._internal_n());
  }
  if (!from._internal_s().empty()) {
    _internal_set_s(from._internal_s());
  }
  if (!from._internal_t().empty()) {
    _internal_set_t(from._internal_t());
  }
  if (!from._internal_p().empty()) {
    _internal_set_p(from._internal_p());
  }
  if (!from._internal_q().empty()) {
    _internal_set_q(from._internal_q());
  }
  if (from._internal_has_g_x()) {
    _internal_mutable_g_x()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_g_x());
  }
  if (from._internal_has_g_y()) {
    _internal_mutable_g_y()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_g_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Party::CopyFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Party::IsInitialized() const {
  return true;
}

void Party::InternalSwap(Party* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &party_id_, lhs_arena,
      &other->party_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &index_, lhs_arena,
      &other->index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &x_, lhs_arena,
      &other->x_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &n_, lhs_arena,
      &other->n_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &s_, lhs_arena,
      &other->s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &t_, lhs_arena,
      &other->t_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &p_, lhs_arena,
      &other->p_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &q_, lhs_arena,
      &other->q_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Party, g_y_)
      + sizeof(Party::g_y_)
      - PROTOBUF_FIELD_OFFSET(Party, g_x_)>(
          reinterpret_cast<char*>(&g_x_),
          reinterpret_cast<char*>(&other->g_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Party::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cmp_2fstruct_2eproto_getter, &descriptor_table_cmp_2fstruct_2eproto_once,
      file_level_metadata_cmp_2fstruct_2eproto[2]);
}

// ===================================================================

class SignKey::_Internal {
 public:
  static const ::safeheron::proto::multi_party_ecdsa::cmp::Party& local_party(const SignKey* msg);
  static const ::safeheron::proto::CurvePoint& g_x(const SignKey* msg);
};

const ::safeheron::proto::multi_party_ecdsa::cmp::Party&
SignKey::_Internal::local_party(const SignKey* msg) {
  return *msg->local_party_;
}
const ::safeheron::proto::CurvePoint&
SignKey::_Internal::g_x(const SignKey* msg) {
  return *msg->g_x_;
}
void SignKey::clear_g_x() {
  if (GetArenaForAllocation() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
}
SignKey::SignKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  remote_parties_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.SignKey)
}
SignKey::SignKey(const SignKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      remote_parties_(from.remote_parties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workspace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workspace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workspace_id().empty()) {
    workspace_id_.Set(from._internal_workspace_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_local_party()) {
    local_party_ = new ::safeheron::proto::multi_party_ecdsa::cmp::Party(*from.local_party_);
  } else {
    local_party_ = nullptr;
  }
  if (from._internal_has_g_x()) {
    g_x_ = new ::safeheron::proto::CurvePoint(*from.g_x_);
  } else {
    g_x_ = nullptr;
  }
  ::memcpy(&threshold_, &from.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_parties_) -
    reinterpret_cast<char*>(&threshold_)) + sizeof(n_parties_));
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.SignKey)
}

inline void SignKey::SharedCtor() {
workspace_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workspace_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&local_party_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&n_parties_) -
    reinterpret_cast<char*>(&local_party_)) + sizeof(n_parties_));
}

SignKey::~SignKey() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.SignKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workspace_id_.Destroy();
  if (this != internal_default_instance()) delete local_party_;
  if (this != internal_default_instance()) delete g_x_;
}

void SignKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignKey::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.SignKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_parties_.Clear();
  workspace_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && local_party_ != nullptr) {
    delete local_party_;
  }
  local_party_ = nullptr;
  if (GetArenaForAllocation() == nullptr && g_x_ != nullptr) {
    delete g_x_;
  }
  g_x_ = nullptr;
  ::memset(&threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_parties_) -
      reinterpret_cast<char*>(&threshold_)) + sizeof(n_parties_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string workspace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_workspace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.SignKey.workspace_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 n_parties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          n_parties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.multi_party_ecdsa.cmp.Party local_party = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_party(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .safeheron.proto.multi_party_ecdsa.cmp.Party remote_parties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remote_parties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint g_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_x(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.SignKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string workspace_id = 1;
  if (!this->_internal_workspace_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workspace_id().data(), static_cast<int>(this->_internal_workspace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.SignKey.workspace_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_workspace_id(), target);
  }

  // int32 threshold = 2;
  if (this->_internal_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_threshold(), target);
  }

  // int32 n_parties = 3;
  if (this->_internal_n_parties() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_n_parties(), target);
  }

  // .safeheron.proto.multi_party_ecdsa.cmp.Party local_party = 4;
  if (this->_internal_has_local_party()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::local_party(this),
        _Internal::local_party(this).GetCachedSize(), target, stream);
  }

  // repeated .safeheron.proto.multi_party_ecdsa.cmp.Party remote_parties = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remote_parties_size()); i < n; i++) {
    const auto& repfield = this->_internal_remote_parties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .safeheron.proto.CurvePoint g_x = 6;
  if (this->_internal_has_g_x()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::g_x(this),
        _Internal::g_x(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.SignKey)
  return target;
}

size_t SignKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.SignKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safeheron.proto.multi_party_ecdsa.cmp.Party remote_parties = 5;
  total_size += 1UL * this->_internal_remote_parties_size();
  for (const auto& msg : this->remote_parties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workspace_id = 1;
  if (!this->_internal_workspace_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workspace_id());
  }

  // .safeheron.proto.multi_party_ecdsa.cmp.Party local_party = 4;
  if (this->_internal_has_local_party()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_party_);
  }

  // .safeheron.proto.CurvePoint g_x = 6;
  if (this->_internal_has_g_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_x_);
  }

  // int32 threshold = 2;
  if (this->_internal_threshold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_threshold());
  }

  // int32 n_parties = 3;
  if (this->_internal_n_parties() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n_parties());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignKey::GetClassData() const { return &_class_data_; }

void SignKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignKey *>(to)->MergeFrom(
      static_cast<const SignKey &>(from));
}


void SignKey::MergeFrom(const SignKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.SignKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  remote_parties_.MergeFrom(from.remote_parties_);
  if (!from._internal_workspace_id().empty()) {
    _internal_set_workspace_id(from._internal_workspace_id());
  }
  if (from._internal_has_local_party()) {
    _internal_mutable_local_party()->::safeheron::proto::multi_party_ecdsa::cmp::Party::MergeFrom(from._internal_local_party());
  }
  if (from._internal_has_g_x()) {
    _internal_mutable_g_x()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_g_x());
  }
  if (from._internal_threshold() != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
  if (from._internal_n_parties() != 0) {
    _internal_set_n_parties(from._internal_n_parties());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignKey::CopyFrom(const SignKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.SignKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignKey::IsInitialized() const {
  return true;
}

void SignKey::InternalSwap(SignKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  remote_parties_.InternalSwap(&other->remote_parties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &workspace_id_, lhs_arena,
      &other->workspace_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignKey, n_parties_)
      + sizeof(SignKey::n_parties_)
      - PROTOBUF_FIELD_OFFSET(SignKey, local_party_)>(
          reinterpret_cast<char*>(&local_party_),
          reinterpret_cast<char*>(&other->local_party_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cmp_2fstruct_2eproto_getter, &descriptor_table_cmp_2fstruct_2eproto_once,
      file_level_metadata_cmp_2fstruct_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::MinimalParty >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::MinimalSignKey*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::MinimalSignKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::MinimalSignKey >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::Party*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::Party >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::Party >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::SignKey*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::SignKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::SignKey >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
