// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmp/aux_info_key_refresh.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cmp_2faux_5finfo_5fkey_5frefresh_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cmp_2faux_5finfo_5fkey_5frefresh_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "crypto-curve/proto_gen/curve_point.pb.switch.h"
#include "crypto-zkp/proto_gen/zkp.pb.switch.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cmp_2faux_5finfo_5fkey_5frefresh_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cmp_2faux_5finfo_5fkey_5frefresh_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cmp_2faux_5finfo_5fkey_5frefresh_2eproto;
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace aux_info_key_refresh {
class Round0BCMessage;
struct Round0BCMessageDefaultTypeInternal;
extern Round0BCMessageDefaultTypeInternal _Round0BCMessage_default_instance_;
class Round1BCMessage;
struct Round1BCMessageDefaultTypeInternal;
extern Round1BCMessageDefaultTypeInternal _Round1BCMessage_default_instance_;
class Round2P2PMessage;
struct Round2P2PMessageDefaultTypeInternal;
extern Round2P2PMessageDefaultTypeInternal _Round2P2PMessage_default_instance_;
}  // namespace aux_info_key_refresh
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> ::safeheron::proto::multi_party_ecdsa::cmp::aux_info_key_refresh::Round0BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::aux_info_key_refresh::Round0BCMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::cmp::aux_info_key_refresh::Round1BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::aux_info_key_refresh::Round1BCMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::cmp::aux_info_key_refresh::Round2P2PMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::aux_info_key_refresh::Round2P2PMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace aux_info_key_refresh {

// ===================================================================

class Round0BCMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage) */ {
 public:
  inline Round0BCMessage() : Round0BCMessage(nullptr) {}
  ~Round0BCMessage() override;
  explicit PROTOBUF_CONSTEXPR Round0BCMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Round0BCMessage(const Round0BCMessage& from);
  Round0BCMessage(Round0BCMessage&& from) noexcept
    : Round0BCMessage() {
    *this = ::std::move(from);
  }

  inline Round0BCMessage& operator=(const Round0BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round0BCMessage& operator=(Round0BCMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Round0BCMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Round0BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round0BCMessage*>(
               &_Round0BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Round0BCMessage& a, Round0BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round0BCMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round0BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Round0BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Round0BCMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Round0BCMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Round0BCMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round0BCMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage";
  }
  protected:
  explicit Round0BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kIndexFieldNumber = 2,
    kVFieldNumber = 3,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssid();
  PROTOBUF_NODISCARD std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index();
  PROTOBUF_NODISCARD std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string V = 3;
  void clear_v();
  const std::string& v() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_v(ArgT0&& arg0, ArgT... args);
  std::string* mutable_v();
  PROTOBUF_NODISCARD std::string* release_v();
  void set_allocated_v(std::string* v);
  private:
  const std::string& _internal_v() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2faux_5finfo_5fkey_5frefresh_2eproto;
};
// -------------------------------------------------------------------

class Round1BCMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage) */ {
 public:
  inline Round1BCMessage() : Round1BCMessage(nullptr) {}
  ~Round1BCMessage() override;
  explicit PROTOBUF_CONSTEXPR Round1BCMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Round1BCMessage(const Round1BCMessage& from);
  Round1BCMessage(Round1BCMessage&& from) noexcept
    : Round1BCMessage() {
    *this = ::std::move(from);
  }

  inline Round1BCMessage& operator=(const Round1BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round1BCMessage& operator=(Round1BCMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Round1BCMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Round1BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round1BCMessage*>(
               &_Round1BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Round1BCMessage& a, Round1BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round1BCMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round1BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Round1BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Round1BCMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Round1BCMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Round1BCMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round1BCMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage";
  }
  protected:
  explicit Round1BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdArr1FieldNumber = 3,
    kGXArrFieldNumber = 4,
    kCFieldNumber = 5,
    kPartyIdArr2FieldNumber = 6,
    kAArrFieldNumber = 7,
    kSsidFieldNumber = 1,
    kIndexFieldNumber = 2,
    kNFieldNumber = 10,
    kSFieldNumber = 11,
    kTFieldNumber = 12,
    kRhoFieldNumber = 14,
    kUFieldNumber = 15,
    kGYFieldNumber = 8,
    kBFieldNumber = 9,
    kPsiTildeFieldNumber = 13,
  };
  // repeated string party_id_arr_1 = 3;
  int party_id_arr_1_size() const;
  private:
  int _internal_party_id_arr_1_size() const;
  public:
  void clear_party_id_arr_1();
  const std::string& party_id_arr_1(int index) const;
  std::string* mutable_party_id_arr_1(int index);
  void set_party_id_arr_1(int index, const std::string& value);
  void set_party_id_arr_1(int index, std::string&& value);
  void set_party_id_arr_1(int index, const char* value);
  void set_party_id_arr_1(int index, const char* value, size_t size);
  std::string* add_party_id_arr_1();
  void add_party_id_arr_1(const std::string& value);
  void add_party_id_arr_1(std::string&& value);
  void add_party_id_arr_1(const char* value);
  void add_party_id_arr_1(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& party_id_arr_1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_party_id_arr_1();
  private:
  const std::string& _internal_party_id_arr_1(int index) const;
  std::string* _internal_add_party_id_arr_1();
  public:

  // repeated .safeheron.proto.CurvePoint g_x_arr = 4;
  int g_x_arr_size() const;
  private:
  int _internal_g_x_arr_size() const;
  public:
  void clear_g_x_arr();
  ::safeheron::proto::CurvePoint* mutable_g_x_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >*
      mutable_g_x_arr();
  private:
  const ::safeheron::proto::CurvePoint& _internal_g_x_arr(int index) const;
  ::safeheron::proto::CurvePoint* _internal_add_g_x_arr();
  public:
  const ::safeheron::proto::CurvePoint& g_x_arr(int index) const;
  ::safeheron::proto::CurvePoint* add_g_x_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >&
      g_x_arr() const;

  // repeated .safeheron.proto.CurvePoint c = 5;
  int c_size() const;
  private:
  int _internal_c_size() const;
  public:
  void clear_c();
  ::safeheron::proto::CurvePoint* mutable_c(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >*
      mutable_c();
  private:
  const ::safeheron::proto::CurvePoint& _internal_c(int index) const;
  ::safeheron::proto::CurvePoint* _internal_add_c();
  public:
  const ::safeheron::proto::CurvePoint& c(int index) const;
  ::safeheron::proto::CurvePoint* add_c();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >&
      c() const;

  // repeated string party_id_arr_2 = 6;
  int party_id_arr_2_size() const;
  private:
  int _internal_party_id_arr_2_size() const;
  public:
  void clear_party_id_arr_2();
  const std::string& party_id_arr_2(int index) const;
  std::string* mutable_party_id_arr_2(int index);
  void set_party_id_arr_2(int index, const std::string& value);
  void set_party_id_arr_2(int index, std::string&& value);
  void set_party_id_arr_2(int index, const char* value);
  void set_party_id_arr_2(int index, const char* value, size_t size);
  std::string* add_party_id_arr_2();
  void add_party_id_arr_2(const std::string& value);
  void add_party_id_arr_2(std::string&& value);
  void add_party_id_arr_2(const char* value);
  void add_party_id_arr_2(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& party_id_arr_2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_party_id_arr_2();
  private:
  const std::string& _internal_party_id_arr_2(int index) const;
  std::string* _internal_add_party_id_arr_2();
  public:

  // repeated .safeheron.proto.CurvePoint A_arr = 7;
  int a_arr_size() const;
  private:
  int _internal_a_arr_size() const;
  public:
  void clear_a_arr();
  ::safeheron::proto::CurvePoint* mutable_a_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >*
      mutable_a_arr();
  private:
  const ::safeheron::proto::CurvePoint& _internal_a_arr(int index) const;
  ::safeheron::proto::CurvePoint* _internal_add_a_arr();
  public:
  const ::safeheron::proto::CurvePoint& a_arr(int index) const;
  ::safeheron::proto::CurvePoint* add_a_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >&
      a_arr() const;

  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssid();
  PROTOBUF_NODISCARD std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index();
  PROTOBUF_NODISCARD std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string N = 10;
  void clear_n();
  const std::string& n() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_n(ArgT0&& arg0, ArgT... args);
  std::string* mutable_n();
  PROTOBUF_NODISCARD std::string* release_n();
  void set_allocated_n(std::string* n);
  private:
  const std::string& _internal_n() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_n(const std::string& value);
  std::string* _internal_mutable_n();
  public:

  // string s = 11;
  void clear_s();
  const std::string& s() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // string t = 12;
  void clear_t();
  const std::string& t() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_t(ArgT0&& arg0, ArgT... args);
  std::string* mutable_t();
  PROTOBUF_NODISCARD std::string* release_t();
  void set_allocated_t(std::string* t);
  private:
  const std::string& _internal_t() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_t(const std::string& value);
  std::string* _internal_mutable_t();
  public:

  // string rho = 14;
  void clear_rho();
  const std::string& rho() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rho(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rho();
  PROTOBUF_NODISCARD std::string* release_rho();
  void set_allocated_rho(std::string* rho);
  private:
  const std::string& _internal_rho() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rho(const std::string& value);
  std::string* _internal_mutable_rho();
  public:

  // string u = 15;
  void clear_u();
  const std::string& u() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_u(ArgT0&& arg0, ArgT... args);
  std::string* mutable_u();
  PROTOBUF_NODISCARD std::string* release_u();
  void set_allocated_u(std::string* u);
  private:
  const std::string& _internal_u() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_u(const std::string& value);
  std::string* _internal_mutable_u();
  public:

  // .safeheron.proto.CurvePoint g_y = 8;
  bool has_g_y() const;
  private:
  bool _internal_has_g_y() const;
  public:
  void clear_g_y();
  const ::safeheron::proto::CurvePoint& g_y() const;
  PROTOBUF_NODISCARD ::safeheron::proto::CurvePoint* release_g_y();
  ::safeheron::proto::CurvePoint* mutable_g_y();
  void set_allocated_g_y(::safeheron::proto::CurvePoint* g_y);
  private:
  const ::safeheron::proto::CurvePoint& _internal_g_y() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_g_y();
  public:
  void unsafe_arena_set_allocated_g_y(
      ::safeheron::proto::CurvePoint* g_y);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_g_y();

  // .safeheron.proto.CurvePoint B = 9;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const ::safeheron::proto::CurvePoint& b() const;
  PROTOBUF_NODISCARD ::safeheron::proto::CurvePoint* release_b();
  ::safeheron::proto::CurvePoint* mutable_b();
  void set_allocated_b(::safeheron::proto::CurvePoint* b);
  private:
  const ::safeheron::proto::CurvePoint& _internal_b() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_b();
  public:
  void unsafe_arena_set_allocated_b(
      ::safeheron::proto::CurvePoint* b);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_b();

  // .safeheron.proto.TwoDLNProof psi_tilde = 13;
  bool has_psi_tilde() const;
  private:
  bool _internal_has_psi_tilde() const;
  public:
  void clear_psi_tilde();
  const ::safeheron::proto::TwoDLNProof& psi_tilde() const;
  PROTOBUF_NODISCARD ::safeheron::proto::TwoDLNProof* release_psi_tilde();
  ::safeheron::proto::TwoDLNProof* mutable_psi_tilde();
  void set_allocated_psi_tilde(::safeheron::proto::TwoDLNProof* psi_tilde);
  private:
  const ::safeheron::proto::TwoDLNProof& _internal_psi_tilde() const;
  ::safeheron::proto::TwoDLNProof* _internal_mutable_psi_tilde();
  public:
  void unsafe_arena_set_allocated_psi_tilde(
      ::safeheron::proto::TwoDLNProof* psi_tilde);
  ::safeheron::proto::TwoDLNProof* unsafe_arena_release_psi_tilde();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> party_id_arr_1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint > g_x_arr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint > c_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> party_id_arr_2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint > a_arr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr t_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rho_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr u_;
  ::safeheron::proto::CurvePoint* g_y_;
  ::safeheron::proto::CurvePoint* b_;
  ::safeheron::proto::TwoDLNProof* psi_tilde_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2faux_5finfo_5fkey_5frefresh_2eproto;
};
// -------------------------------------------------------------------

class Round2P2PMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage) */ {
 public:
  inline Round2P2PMessage() : Round2P2PMessage(nullptr) {}
  ~Round2P2PMessage() override;
  explicit PROTOBUF_CONSTEXPR Round2P2PMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Round2P2PMessage(const Round2P2PMessage& from);
  Round2P2PMessage(Round2P2PMessage&& from) noexcept
    : Round2P2PMessage() {
    *this = ::std::move(from);
  }

  inline Round2P2PMessage& operator=(const Round2P2PMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round2P2PMessage& operator=(Round2P2PMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Round2P2PMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Round2P2PMessage* internal_default_instance() {
    return reinterpret_cast<const Round2P2PMessage*>(
               &_Round2P2PMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Round2P2PMessage& a, Round2P2PMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round2P2PMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round2P2PMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Round2P2PMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Round2P2PMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Round2P2PMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Round2P2PMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round2P2PMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage";
  }
  protected:
  explicit Round2P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kIndexFieldNumber = 2,
    kCFieldNumber = 6,
    kPsiFieldNumber = 3,
    kPhiIjFieldNumber = 4,
    kPiFieldNumber = 5,
    kPsiIjFieldNumber = 7,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssid();
  PROTOBUF_NODISCARD std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index();
  PROTOBUF_NODISCARD std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string C = 6;
  void clear_c();
  const std::string& c() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c();
  PROTOBUF_NODISCARD std::string* release_c();
  void set_allocated_c(std::string* c);
  private:
  const std::string& _internal_c() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c(const std::string& value);
  std::string* _internal_mutable_c();
  public:

  // .safeheron.proto.PailBlumModulusProof psi = 3;
  bool has_psi() const;
  private:
  bool _internal_has_psi() const;
  public:
  void clear_psi();
  const ::safeheron::proto::PailBlumModulusProof& psi() const;
  PROTOBUF_NODISCARD ::safeheron::proto::PailBlumModulusProof* release_psi();
  ::safeheron::proto::PailBlumModulusProof* mutable_psi();
  void set_allocated_psi(::safeheron::proto::PailBlumModulusProof* psi);
  private:
  const ::safeheron::proto::PailBlumModulusProof& _internal_psi() const;
  ::safeheron::proto::PailBlumModulusProof* _internal_mutable_psi();
  public:
  void unsafe_arena_set_allocated_psi(
      ::safeheron::proto::PailBlumModulusProof* psi);
  ::safeheron::proto::PailBlumModulusProof* unsafe_arena_release_psi();

  // .safeheron.proto.NoSmallFactorProof phi_ij = 4;
  bool has_phi_ij() const;
  private:
  bool _internal_has_phi_ij() const;
  public:
  void clear_phi_ij();
  const ::safeheron::proto::NoSmallFactorProof& phi_ij() const;
  PROTOBUF_NODISCARD ::safeheron::proto::NoSmallFactorProof* release_phi_ij();
  ::safeheron::proto::NoSmallFactorProof* mutable_phi_ij();
  void set_allocated_phi_ij(::safeheron::proto::NoSmallFactorProof* phi_ij);
  private:
  const ::safeheron::proto::NoSmallFactorProof& _internal_phi_ij() const;
  ::safeheron::proto::NoSmallFactorProof* _internal_mutable_phi_ij();
  public:
  void unsafe_arena_set_allocated_phi_ij(
      ::safeheron::proto::NoSmallFactorProof* phi_ij);
  ::safeheron::proto::NoSmallFactorProof* unsafe_arena_release_phi_ij();

  // .safeheron.proto.DLogProof_V2 pi = 5;
  bool has_pi() const;
  private:
  bool _internal_has_pi() const;
  public:
  void clear_pi();
  const ::safeheron::proto::DLogProof_V2& pi() const;
  PROTOBUF_NODISCARD ::safeheron::proto::DLogProof_V2* release_pi();
  ::safeheron::proto::DLogProof_V2* mutable_pi();
  void set_allocated_pi(::safeheron::proto::DLogProof_V2* pi);
  private:
  const ::safeheron::proto::DLogProof_V2& _internal_pi() const;
  ::safeheron::proto::DLogProof_V2* _internal_mutable_pi();
  public:
  void unsafe_arena_set_allocated_pi(
      ::safeheron::proto::DLogProof_V2* pi);
  ::safeheron::proto::DLogProof_V2* unsafe_arena_release_pi();

  // .safeheron.proto.DLogProof_V2 psi_ij = 7;
  bool has_psi_ij() const;
  private:
  bool _internal_has_psi_ij() const;
  public:
  void clear_psi_ij();
  const ::safeheron::proto::DLogProof_V2& psi_ij() const;
  PROTOBUF_NODISCARD ::safeheron::proto::DLogProof_V2* release_psi_ij();
  ::safeheron::proto::DLogProof_V2* mutable_psi_ij();
  void set_allocated_psi_ij(::safeheron::proto::DLogProof_V2* psi_ij);
  private:
  const ::safeheron::proto::DLogProof_V2& _internal_psi_ij() const;
  ::safeheron::proto::DLogProof_V2* _internal_mutable_psi_ij();
  public:
  void unsafe_arena_set_allocated_psi_ij(
      ::safeheron::proto::DLogProof_V2* psi_ij);
  ::safeheron::proto::DLogProof_V2* unsafe_arena_release_psi_ij();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_;
  ::safeheron::proto::PailBlumModulusProof* psi_;
  ::safeheron::proto::NoSmallFactorProof* phi_ij_;
  ::safeheron::proto::DLogProof_V2* pi_;
  ::safeheron::proto::DLogProof_V2* psi_ij_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2faux_5finfo_5fkey_5frefresh_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Round0BCMessage

// string ssid = 1;
inline void Round0BCMessage::clear_ssid() {
  ssid_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::ssid() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.ssid)
  return _internal_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round0BCMessage::set_ssid(ArgT0&& arg0, ArgT... args) {
 
 ssid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.ssid)
}
inline std::string* Round0BCMessage::mutable_ssid() {
  std::string* _s = _internal_mutable_ssid();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.ssid)
  return _s;
}
inline const std::string& Round0BCMessage::_internal_ssid() const {
  return ssid_.Get();
}
inline void Round0BCMessage::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(value, GetArenaForAllocation());
}
inline std::string* Round0BCMessage::_internal_mutable_ssid() {
  
  return ssid_.Mutable(GetArenaForAllocation());
}
inline std::string* Round0BCMessage::release_ssid() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.ssid)
  return ssid_.Release();
}
inline void Round0BCMessage::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(ssid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ssid_.IsDefault()) {
    ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.ssid)
}

// string index = 2;
inline void Round0BCMessage::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.index)
  return _internal_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round0BCMessage::set_index(ArgT0&& arg0, ArgT... args) {
 
 index_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.index)
}
inline std::string* Round0BCMessage::mutable_index() {
  std::string* _s = _internal_mutable_index();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.index)
  return _s;
}
inline const std::string& Round0BCMessage::_internal_index() const {
  return index_.Get();
}
inline void Round0BCMessage::_internal_set_index(const std::string& value) {
  
  index_.Set(value, GetArenaForAllocation());
}
inline std::string* Round0BCMessage::_internal_mutable_index() {
  
  return index_.Mutable(GetArenaForAllocation());
}
inline std::string* Round0BCMessage::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.index)
  return index_.Release();
}
inline void Round0BCMessage::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(index, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (index_.IsDefault()) {
    index_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.index)
}

// string V = 3;
inline void Round0BCMessage::clear_v() {
  v_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::v() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.V)
  return _internal_v();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round0BCMessage::set_v(ArgT0&& arg0, ArgT... args) {
 
 v_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.V)
}
inline std::string* Round0BCMessage::mutable_v() {
  std::string* _s = _internal_mutable_v();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.V)
  return _s;
}
inline const std::string& Round0BCMessage::_internal_v() const {
  return v_.Get();
}
inline void Round0BCMessage::_internal_set_v(const std::string& value) {
  
  v_.Set(value, GetArenaForAllocation());
}
inline std::string* Round0BCMessage::_internal_mutable_v() {
  
  return v_.Mutable(GetArenaForAllocation());
}
inline std::string* Round0BCMessage::release_v() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.V)
  return v_.Release();
}
inline void Round0BCMessage::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  v_.SetAllocated(v, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (v_.IsDefault()) {
    v_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round0BCMessage.V)
}

// -------------------------------------------------------------------

// Round1BCMessage

// string ssid = 1;
inline void Round1BCMessage::clear_ssid() {
  ssid_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::ssid() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.ssid)
  return _internal_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1BCMessage::set_ssid(ArgT0&& arg0, ArgT... args) {
 
 ssid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.ssid)
}
inline std::string* Round1BCMessage::mutable_ssid() {
  std::string* _s = _internal_mutable_ssid();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.ssid)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_ssid() const {
  return ssid_.Get();
}
inline void Round1BCMessage::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1BCMessage::_internal_mutable_ssid() {
  
  return ssid_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1BCMessage::release_ssid() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.ssid)
  return ssid_.Release();
}
inline void Round1BCMessage::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(ssid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ssid_.IsDefault()) {
    ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.ssid)
}

// string index = 2;
inline void Round1BCMessage::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.index)
  return _internal_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1BCMessage::set_index(ArgT0&& arg0, ArgT... args) {
 
 index_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.index)
}
inline std::string* Round1BCMessage::mutable_index() {
  std::string* _s = _internal_mutable_index();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.index)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_index() const {
  return index_.Get();
}
inline void Round1BCMessage::_internal_set_index(const std::string& value) {
  
  index_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1BCMessage::_internal_mutable_index() {
  
  return index_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1BCMessage::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.index)
  return index_.Release();
}
inline void Round1BCMessage::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(index, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (index_.IsDefault()) {
    index_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.index)
}

// repeated string party_id_arr_1 = 3;
inline int Round1BCMessage::_internal_party_id_arr_1_size() const {
  return party_id_arr_1_.size();
}
inline int Round1BCMessage::party_id_arr_1_size() const {
  return _internal_party_id_arr_1_size();
}
inline void Round1BCMessage::clear_party_id_arr_1() {
  party_id_arr_1_.Clear();
}
inline std::string* Round1BCMessage::add_party_id_arr_1() {
  std::string* _s = _internal_add_party_id_arr_1();
  // @@protoc_insertion_point(field_add_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_1)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_party_id_arr_1(int index) const {
  return party_id_arr_1_.Get(index);
}
inline const std::string& Round1BCMessage::party_id_arr_1(int index) const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_1)
  return _internal_party_id_arr_1(index);
}
inline std::string* Round1BCMessage::mutable_party_id_arr_1(int index) {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_1)
  return party_id_arr_1_.Mutable(index);
}
inline void Round1BCMessage::set_party_id_arr_1(int index, const std::string& value) {
  party_id_arr_1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_1)
}
inline void Round1BCMessage::set_party_id_arr_1(int index, std::string&& value) {
  party_id_arr_1_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_1)
}
inline void Round1BCMessage::set_party_id_arr_1(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  party_id_arr_1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_1)
}
inline void Round1BCMessage::set_party_id_arr_1(int index, const char* value, size_t size) {
  party_id_arr_1_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_1)
}
inline std::string* Round1BCMessage::_internal_add_party_id_arr_1() {
  return party_id_arr_1_.Add();
}
inline void Round1BCMessage::add_party_id_arr_1(const std::string& value) {
  party_id_arr_1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_1)
}
inline void Round1BCMessage::add_party_id_arr_1(std::string&& value) {
  party_id_arr_1_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_1)
}
inline void Round1BCMessage::add_party_id_arr_1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  party_id_arr_1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_1)
}
inline void Round1BCMessage::add_party_id_arr_1(const char* value, size_t size) {
  party_id_arr_1_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Round1BCMessage::party_id_arr_1() const {
  // @@protoc_insertion_point(field_list:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_1)
  return party_id_arr_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Round1BCMessage::mutable_party_id_arr_1() {
  // @@protoc_insertion_point(field_mutable_list:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_1)
  return &party_id_arr_1_;
}

// repeated .safeheron.proto.CurvePoint g_x_arr = 4;
inline int Round1BCMessage::_internal_g_x_arr_size() const {
  return g_x_arr_.size();
}
inline int Round1BCMessage::g_x_arr_size() const {
  return _internal_g_x_arr_size();
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_g_x_arr(int index) {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.g_x_arr)
  return g_x_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >*
Round1BCMessage::mutable_g_x_arr() {
  // @@protoc_insertion_point(field_mutable_list:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.g_x_arr)
  return &g_x_arr_;
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_g_x_arr(int index) const {
  return g_x_arr_.Get(index);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::g_x_arr(int index) const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.g_x_arr)
  return _internal_g_x_arr(index);
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_add_g_x_arr() {
  return g_x_arr_.Add();
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::add_g_x_arr() {
  ::safeheron::proto::CurvePoint* _add = _internal_add_g_x_arr();
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.g_x_arr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >&
Round1BCMessage::g_x_arr() const {
  // @@protoc_insertion_point(field_list:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.g_x_arr)
  return g_x_arr_;
}

// repeated .safeheron.proto.CurvePoint c = 5;
inline int Round1BCMessage::_internal_c_size() const {
  return c_.size();
}
inline int Round1BCMessage::c_size() const {
  return _internal_c_size();
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_c(int index) {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.c)
  return c_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >*
Round1BCMessage::mutable_c() {
  // @@protoc_insertion_point(field_mutable_list:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.c)
  return &c_;
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_c(int index) const {
  return c_.Get(index);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::c(int index) const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.c)
  return _internal_c(index);
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_add_c() {
  return c_.Add();
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::add_c() {
  ::safeheron::proto::CurvePoint* _add = _internal_add_c();
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.c)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >&
Round1BCMessage::c() const {
  // @@protoc_insertion_point(field_list:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.c)
  return c_;
}

// repeated string party_id_arr_2 = 6;
inline int Round1BCMessage::_internal_party_id_arr_2_size() const {
  return party_id_arr_2_.size();
}
inline int Round1BCMessage::party_id_arr_2_size() const {
  return _internal_party_id_arr_2_size();
}
inline void Round1BCMessage::clear_party_id_arr_2() {
  party_id_arr_2_.Clear();
}
inline std::string* Round1BCMessage::add_party_id_arr_2() {
  std::string* _s = _internal_add_party_id_arr_2();
  // @@protoc_insertion_point(field_add_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_2)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_party_id_arr_2(int index) const {
  return party_id_arr_2_.Get(index);
}
inline const std::string& Round1BCMessage::party_id_arr_2(int index) const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_2)
  return _internal_party_id_arr_2(index);
}
inline std::string* Round1BCMessage::mutable_party_id_arr_2(int index) {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_2)
  return party_id_arr_2_.Mutable(index);
}
inline void Round1BCMessage::set_party_id_arr_2(int index, const std::string& value) {
  party_id_arr_2_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_2)
}
inline void Round1BCMessage::set_party_id_arr_2(int index, std::string&& value) {
  party_id_arr_2_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_2)
}
inline void Round1BCMessage::set_party_id_arr_2(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  party_id_arr_2_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_2)
}
inline void Round1BCMessage::set_party_id_arr_2(int index, const char* value, size_t size) {
  party_id_arr_2_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_2)
}
inline std::string* Round1BCMessage::_internal_add_party_id_arr_2() {
  return party_id_arr_2_.Add();
}
inline void Round1BCMessage::add_party_id_arr_2(const std::string& value) {
  party_id_arr_2_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_2)
}
inline void Round1BCMessage::add_party_id_arr_2(std::string&& value) {
  party_id_arr_2_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_2)
}
inline void Round1BCMessage::add_party_id_arr_2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  party_id_arr_2_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_2)
}
inline void Round1BCMessage::add_party_id_arr_2(const char* value, size_t size) {
  party_id_arr_2_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Round1BCMessage::party_id_arr_2() const {
  // @@protoc_insertion_point(field_list:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_2)
  return party_id_arr_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Round1BCMessage::mutable_party_id_arr_2() {
  // @@protoc_insertion_point(field_mutable_list:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.party_id_arr_2)
  return &party_id_arr_2_;
}

// repeated .safeheron.proto.CurvePoint A_arr = 7;
inline int Round1BCMessage::_internal_a_arr_size() const {
  return a_arr_.size();
}
inline int Round1BCMessage::a_arr_size() const {
  return _internal_a_arr_size();
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_a_arr(int index) {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.A_arr)
  return a_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >*
Round1BCMessage::mutable_a_arr() {
  // @@protoc_insertion_point(field_mutable_list:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.A_arr)
  return &a_arr_;
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_a_arr(int index) const {
  return a_arr_.Get(index);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::a_arr(int index) const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.A_arr)
  return _internal_a_arr(index);
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_add_a_arr() {
  return a_arr_.Add();
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::add_a_arr() {
  ::safeheron::proto::CurvePoint* _add = _internal_add_a_arr();
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.A_arr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >&
Round1BCMessage::a_arr() const {
  // @@protoc_insertion_point(field_list:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.A_arr)
  return a_arr_;
}

// .safeheron.proto.CurvePoint g_y = 8;
inline bool Round1BCMessage::_internal_has_g_y() const {
  return this != internal_default_instance() && g_y_ != nullptr;
}
inline bool Round1BCMessage::has_g_y() const {
  return _internal_has_g_y();
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_g_y() const {
  const ::safeheron::proto::CurvePoint* p = g_y_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::g_y() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.g_y)
  return _internal_g_y();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_g_y(
    ::safeheron::proto::CurvePoint* g_y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_y_);
  }
  g_y_ = g_y;
  if (g_y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.g_y)
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::release_g_y() {
  
  ::safeheron::proto::CurvePoint* temp = g_y_;
  g_y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::unsafe_arena_release_g_y() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.g_y)
  
  ::safeheron::proto::CurvePoint* temp = g_y_;
  g_y_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_mutable_g_y() {
  
  if (g_y_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArenaForAllocation());
    g_y_ = p;
  }
  return g_y_;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_g_y() {
  ::safeheron::proto::CurvePoint* _msg = _internal_mutable_g_y();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.g_y)
  return _msg;
}
inline void Round1BCMessage::set_allocated_g_y(::safeheron::proto::CurvePoint* g_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_y_);
  }
  if (g_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_y));
    if (message_arena != submessage_arena) {
      g_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g_y, submessage_arena);
    }
    
  } else {
    
  }
  g_y_ = g_y;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.g_y)
}

// .safeheron.proto.CurvePoint B = 9;
inline bool Round1BCMessage::_internal_has_b() const {
  return this != internal_default_instance() && b_ != nullptr;
}
inline bool Round1BCMessage::has_b() const {
  return _internal_has_b();
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_b() const {
  const ::safeheron::proto::CurvePoint* p = b_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::b() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.B)
  return _internal_b();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_b(
    ::safeheron::proto::CurvePoint* b) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(b_);
  }
  b_ = b;
  if (b) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.B)
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::release_b() {
  
  ::safeheron::proto::CurvePoint* temp = b_;
  b_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::unsafe_arena_release_b() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.B)
  
  ::safeheron::proto::CurvePoint* temp = b_;
  b_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_mutable_b() {
  
  if (b_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArenaForAllocation());
    b_ = p;
  }
  return b_;
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_b() {
  ::safeheron::proto::CurvePoint* _msg = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.B)
  return _msg;
}
inline void Round1BCMessage::set_allocated_b(::safeheron::proto::CurvePoint* b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(b_);
  }
  if (b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(b));
    if (message_arena != submessage_arena) {
      b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    
  } else {
    
  }
  b_ = b;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.B)
}

// string N = 10;
inline void Round1BCMessage::clear_n() {
  n_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::n() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.N)
  return _internal_n();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1BCMessage::set_n(ArgT0&& arg0, ArgT... args) {
 
 n_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.N)
}
inline std::string* Round1BCMessage::mutable_n() {
  std::string* _s = _internal_mutable_n();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.N)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_n() const {
  return n_.Get();
}
inline void Round1BCMessage::_internal_set_n(const std::string& value) {
  
  n_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1BCMessage::_internal_mutable_n() {
  
  return n_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1BCMessage::release_n() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.N)
  return n_.Release();
}
inline void Round1BCMessage::set_allocated_n(std::string* n) {
  if (n != nullptr) {
    
  } else {
    
  }
  n_.SetAllocated(n, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (n_.IsDefault()) {
    n_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.N)
}

// string s = 11;
inline void Round1BCMessage::clear_s() {
  s_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::s() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.s)
  return _internal_s();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1BCMessage::set_s(ArgT0&& arg0, ArgT... args) {
 
 s_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.s)
}
inline std::string* Round1BCMessage::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.s)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_s() const {
  return s_.Get();
}
inline void Round1BCMessage::_internal_set_s(const std::string& value) {
  
  s_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1BCMessage::_internal_mutable_s() {
  
  return s_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1BCMessage::release_s() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.s)
  return s_.Release();
}
inline void Round1BCMessage::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocated(s, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (s_.IsDefault()) {
    s_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.s)
}

// string t = 12;
inline void Round1BCMessage::clear_t() {
  t_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::t() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.t)
  return _internal_t();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1BCMessage::set_t(ArgT0&& arg0, ArgT... args) {
 
 t_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.t)
}
inline std::string* Round1BCMessage::mutable_t() {
  std::string* _s = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.t)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_t() const {
  return t_.Get();
}
inline void Round1BCMessage::_internal_set_t(const std::string& value) {
  
  t_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1BCMessage::_internal_mutable_t() {
  
  return t_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1BCMessage::release_t() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.t)
  return t_.Release();
}
inline void Round1BCMessage::set_allocated_t(std::string* t) {
  if (t != nullptr) {
    
  } else {
    
  }
  t_.SetAllocated(t, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (t_.IsDefault()) {
    t_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.t)
}

// .safeheron.proto.TwoDLNProof psi_tilde = 13;
inline bool Round1BCMessage::_internal_has_psi_tilde() const {
  return this != internal_default_instance() && psi_tilde_ != nullptr;
}
inline bool Round1BCMessage::has_psi_tilde() const {
  return _internal_has_psi_tilde();
}
inline const ::safeheron::proto::TwoDLNProof& Round1BCMessage::_internal_psi_tilde() const {
  const ::safeheron::proto::TwoDLNProof* p = psi_tilde_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::TwoDLNProof&>(
      ::safeheron::proto::_TwoDLNProof_default_instance_);
}
inline const ::safeheron::proto::TwoDLNProof& Round1BCMessage::psi_tilde() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.psi_tilde)
  return _internal_psi_tilde();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_psi_tilde(
    ::safeheron::proto::TwoDLNProof* psi_tilde) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_tilde_);
  }
  psi_tilde_ = psi_tilde;
  if (psi_tilde) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.psi_tilde)
}
inline ::safeheron::proto::TwoDLNProof* Round1BCMessage::release_psi_tilde() {
  
  ::safeheron::proto::TwoDLNProof* temp = psi_tilde_;
  psi_tilde_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::TwoDLNProof* Round1BCMessage::unsafe_arena_release_psi_tilde() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.psi_tilde)
  
  ::safeheron::proto::TwoDLNProof* temp = psi_tilde_;
  psi_tilde_ = nullptr;
  return temp;
}
inline ::safeheron::proto::TwoDLNProof* Round1BCMessage::_internal_mutable_psi_tilde() {
  
  if (psi_tilde_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::TwoDLNProof>(GetArenaForAllocation());
    psi_tilde_ = p;
  }
  return psi_tilde_;
}
inline ::safeheron::proto::TwoDLNProof* Round1BCMessage::mutable_psi_tilde() {
  ::safeheron::proto::TwoDLNProof* _msg = _internal_mutable_psi_tilde();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.psi_tilde)
  return _msg;
}
inline void Round1BCMessage::set_allocated_psi_tilde(::safeheron::proto::TwoDLNProof* psi_tilde) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_tilde_);
  }
  if (psi_tilde) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_tilde));
    if (message_arena != submessage_arena) {
      psi_tilde = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psi_tilde, submessage_arena);
    }
    
  } else {
    
  }
  psi_tilde_ = psi_tilde;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.psi_tilde)
}

// string rho = 14;
inline void Round1BCMessage::clear_rho() {
  rho_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::rho() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.rho)
  return _internal_rho();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1BCMessage::set_rho(ArgT0&& arg0, ArgT... args) {
 
 rho_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.rho)
}
inline std::string* Round1BCMessage::mutable_rho() {
  std::string* _s = _internal_mutable_rho();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.rho)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_rho() const {
  return rho_.Get();
}
inline void Round1BCMessage::_internal_set_rho(const std::string& value) {
  
  rho_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1BCMessage::_internal_mutable_rho() {
  
  return rho_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1BCMessage::release_rho() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.rho)
  return rho_.Release();
}
inline void Round1BCMessage::set_allocated_rho(std::string* rho) {
  if (rho != nullptr) {
    
  } else {
    
  }
  rho_.SetAllocated(rho, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rho_.IsDefault()) {
    rho_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.rho)
}

// string u = 15;
inline void Round1BCMessage::clear_u() {
  u_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::u() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.u)
  return _internal_u();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1BCMessage::set_u(ArgT0&& arg0, ArgT... args) {
 
 u_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.u)
}
inline std::string* Round1BCMessage::mutable_u() {
  std::string* _s = _internal_mutable_u();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.u)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_u() const {
  return u_.Get();
}
inline void Round1BCMessage::_internal_set_u(const std::string& value) {
  
  u_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1BCMessage::_internal_mutable_u() {
  
  return u_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1BCMessage::release_u() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.u)
  return u_.Release();
}
inline void Round1BCMessage::set_allocated_u(std::string* u) {
  if (u != nullptr) {
    
  } else {
    
  }
  u_.SetAllocated(u, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (u_.IsDefault()) {
    u_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round1BCMessage.u)
}

// -------------------------------------------------------------------

// Round2P2PMessage

// string ssid = 1;
inline void Round2P2PMessage::clear_ssid() {
  ssid_.ClearToEmpty();
}
inline const std::string& Round2P2PMessage::ssid() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.ssid)
  return _internal_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round2P2PMessage::set_ssid(ArgT0&& arg0, ArgT... args) {
 
 ssid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.ssid)
}
inline std::string* Round2P2PMessage::mutable_ssid() {
  std::string* _s = _internal_mutable_ssid();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.ssid)
  return _s;
}
inline const std::string& Round2P2PMessage::_internal_ssid() const {
  return ssid_.Get();
}
inline void Round2P2PMessage::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(value, GetArenaForAllocation());
}
inline std::string* Round2P2PMessage::_internal_mutable_ssid() {
  
  return ssid_.Mutable(GetArenaForAllocation());
}
inline std::string* Round2P2PMessage::release_ssid() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.ssid)
  return ssid_.Release();
}
inline void Round2P2PMessage::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(ssid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ssid_.IsDefault()) {
    ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.ssid)
}

// string index = 2;
inline void Round2P2PMessage::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Round2P2PMessage::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.index)
  return _internal_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round2P2PMessage::set_index(ArgT0&& arg0, ArgT... args) {
 
 index_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.index)
}
inline std::string* Round2P2PMessage::mutable_index() {
  std::string* _s = _internal_mutable_index();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.index)
  return _s;
}
inline const std::string& Round2P2PMessage::_internal_index() const {
  return index_.Get();
}
inline void Round2P2PMessage::_internal_set_index(const std::string& value) {
  
  index_.Set(value, GetArenaForAllocation());
}
inline std::string* Round2P2PMessage::_internal_mutable_index() {
  
  return index_.Mutable(GetArenaForAllocation());
}
inline std::string* Round2P2PMessage::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.index)
  return index_.Release();
}
inline void Round2P2PMessage::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(index, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (index_.IsDefault()) {
    index_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.index)
}

// .safeheron.proto.PailBlumModulusProof psi = 3;
inline bool Round2P2PMessage::_internal_has_psi() const {
  return this != internal_default_instance() && psi_ != nullptr;
}
inline bool Round2P2PMessage::has_psi() const {
  return _internal_has_psi();
}
inline const ::safeheron::proto::PailBlumModulusProof& Round2P2PMessage::_internal_psi() const {
  const ::safeheron::proto::PailBlumModulusProof* p = psi_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::PailBlumModulusProof&>(
      ::safeheron::proto::_PailBlumModulusProof_default_instance_);
}
inline const ::safeheron::proto::PailBlumModulusProof& Round2P2PMessage::psi() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.psi)
  return _internal_psi();
}
inline void Round2P2PMessage::unsafe_arena_set_allocated_psi(
    ::safeheron::proto::PailBlumModulusProof* psi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_);
  }
  psi_ = psi;
  if (psi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.psi)
}
inline ::safeheron::proto::PailBlumModulusProof* Round2P2PMessage::release_psi() {
  
  ::safeheron::proto::PailBlumModulusProof* temp = psi_;
  psi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::PailBlumModulusProof* Round2P2PMessage::unsafe_arena_release_psi() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.psi)
  
  ::safeheron::proto::PailBlumModulusProof* temp = psi_;
  psi_ = nullptr;
  return temp;
}
inline ::safeheron::proto::PailBlumModulusProof* Round2P2PMessage::_internal_mutable_psi() {
  
  if (psi_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::PailBlumModulusProof>(GetArenaForAllocation());
    psi_ = p;
  }
  return psi_;
}
inline ::safeheron::proto::PailBlumModulusProof* Round2P2PMessage::mutable_psi() {
  ::safeheron::proto::PailBlumModulusProof* _msg = _internal_mutable_psi();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.psi)
  return _msg;
}
inline void Round2P2PMessage::set_allocated_psi(::safeheron::proto::PailBlumModulusProof* psi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_);
  }
  if (psi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi));
    if (message_arena != submessage_arena) {
      psi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psi, submessage_arena);
    }
    
  } else {
    
  }
  psi_ = psi;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.psi)
}

// .safeheron.proto.NoSmallFactorProof phi_ij = 4;
inline bool Round2P2PMessage::_internal_has_phi_ij() const {
  return this != internal_default_instance() && phi_ij_ != nullptr;
}
inline bool Round2P2PMessage::has_phi_ij() const {
  return _internal_has_phi_ij();
}
inline const ::safeheron::proto::NoSmallFactorProof& Round2P2PMessage::_internal_phi_ij() const {
  const ::safeheron::proto::NoSmallFactorProof* p = phi_ij_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::NoSmallFactorProof&>(
      ::safeheron::proto::_NoSmallFactorProof_default_instance_);
}
inline const ::safeheron::proto::NoSmallFactorProof& Round2P2PMessage::phi_ij() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.phi_ij)
  return _internal_phi_ij();
}
inline void Round2P2PMessage::unsafe_arena_set_allocated_phi_ij(
    ::safeheron::proto::NoSmallFactorProof* phi_ij) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phi_ij_);
  }
  phi_ij_ = phi_ij;
  if (phi_ij) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.phi_ij)
}
inline ::safeheron::proto::NoSmallFactorProof* Round2P2PMessage::release_phi_ij() {
  
  ::safeheron::proto::NoSmallFactorProof* temp = phi_ij_;
  phi_ij_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::NoSmallFactorProof* Round2P2PMessage::unsafe_arena_release_phi_ij() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.phi_ij)
  
  ::safeheron::proto::NoSmallFactorProof* temp = phi_ij_;
  phi_ij_ = nullptr;
  return temp;
}
inline ::safeheron::proto::NoSmallFactorProof* Round2P2PMessage::_internal_mutable_phi_ij() {
  
  if (phi_ij_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::NoSmallFactorProof>(GetArenaForAllocation());
    phi_ij_ = p;
  }
  return phi_ij_;
}
inline ::safeheron::proto::NoSmallFactorProof* Round2P2PMessage::mutable_phi_ij() {
  ::safeheron::proto::NoSmallFactorProof* _msg = _internal_mutable_phi_ij();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.phi_ij)
  return _msg;
}
inline void Round2P2PMessage::set_allocated_phi_ij(::safeheron::proto::NoSmallFactorProof* phi_ij) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(phi_ij_);
  }
  if (phi_ij) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phi_ij));
    if (message_arena != submessage_arena) {
      phi_ij = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phi_ij, submessage_arena);
    }
    
  } else {
    
  }
  phi_ij_ = phi_ij;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.phi_ij)
}

// .safeheron.proto.DLogProof_V2 pi = 5;
inline bool Round2P2PMessage::_internal_has_pi() const {
  return this != internal_default_instance() && pi_ != nullptr;
}
inline bool Round2P2PMessage::has_pi() const {
  return _internal_has_pi();
}
inline const ::safeheron::proto::DLogProof_V2& Round2P2PMessage::_internal_pi() const {
  const ::safeheron::proto::DLogProof_V2* p = pi_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::DLogProof_V2&>(
      ::safeheron::proto::_DLogProof_V2_default_instance_);
}
inline const ::safeheron::proto::DLogProof_V2& Round2P2PMessage::pi() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.pi)
  return _internal_pi();
}
inline void Round2P2PMessage::unsafe_arena_set_allocated_pi(
    ::safeheron::proto::DLogProof_V2* pi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pi_);
  }
  pi_ = pi;
  if (pi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.pi)
}
inline ::safeheron::proto::DLogProof_V2* Round2P2PMessage::release_pi() {
  
  ::safeheron::proto::DLogProof_V2* temp = pi_;
  pi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::DLogProof_V2* Round2P2PMessage::unsafe_arena_release_pi() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.pi)
  
  ::safeheron::proto::DLogProof_V2* temp = pi_;
  pi_ = nullptr;
  return temp;
}
inline ::safeheron::proto::DLogProof_V2* Round2P2PMessage::_internal_mutable_pi() {
  
  if (pi_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::DLogProof_V2>(GetArenaForAllocation());
    pi_ = p;
  }
  return pi_;
}
inline ::safeheron::proto::DLogProof_V2* Round2P2PMessage::mutable_pi() {
  ::safeheron::proto::DLogProof_V2* _msg = _internal_mutable_pi();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.pi)
  return _msg;
}
inline void Round2P2PMessage::set_allocated_pi(::safeheron::proto::DLogProof_V2* pi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pi_);
  }
  if (pi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pi));
    if (message_arena != submessage_arena) {
      pi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pi, submessage_arena);
    }
    
  } else {
    
  }
  pi_ = pi;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.pi)
}

// string C = 6;
inline void Round2P2PMessage::clear_c() {
  c_.ClearToEmpty();
}
inline const std::string& Round2P2PMessage::c() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.C)
  return _internal_c();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round2P2PMessage::set_c(ArgT0&& arg0, ArgT... args) {
 
 c_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.C)
}
inline std::string* Round2P2PMessage::mutable_c() {
  std::string* _s = _internal_mutable_c();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.C)
  return _s;
}
inline const std::string& Round2P2PMessage::_internal_c() const {
  return c_.Get();
}
inline void Round2P2PMessage::_internal_set_c(const std::string& value) {
  
  c_.Set(value, GetArenaForAllocation());
}
inline std::string* Round2P2PMessage::_internal_mutable_c() {
  
  return c_.Mutable(GetArenaForAllocation());
}
inline std::string* Round2P2PMessage::release_c() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.C)
  return c_.Release();
}
inline void Round2P2PMessage::set_allocated_c(std::string* c) {
  if (c != nullptr) {
    
  } else {
    
  }
  c_.SetAllocated(c, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (c_.IsDefault()) {
    c_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.C)
}

// .safeheron.proto.DLogProof_V2 psi_ij = 7;
inline bool Round2P2PMessage::_internal_has_psi_ij() const {
  return this != internal_default_instance() && psi_ij_ != nullptr;
}
inline bool Round2P2PMessage::has_psi_ij() const {
  return _internal_has_psi_ij();
}
inline const ::safeheron::proto::DLogProof_V2& Round2P2PMessage::_internal_psi_ij() const {
  const ::safeheron::proto::DLogProof_V2* p = psi_ij_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::DLogProof_V2&>(
      ::safeheron::proto::_DLogProof_V2_default_instance_);
}
inline const ::safeheron::proto::DLogProof_V2& Round2P2PMessage::psi_ij() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.psi_ij)
  return _internal_psi_ij();
}
inline void Round2P2PMessage::unsafe_arena_set_allocated_psi_ij(
    ::safeheron::proto::DLogProof_V2* psi_ij) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_ij_);
  }
  psi_ij_ = psi_ij;
  if (psi_ij) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.psi_ij)
}
inline ::safeheron::proto::DLogProof_V2* Round2P2PMessage::release_psi_ij() {
  
  ::safeheron::proto::DLogProof_V2* temp = psi_ij_;
  psi_ij_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::DLogProof_V2* Round2P2PMessage::unsafe_arena_release_psi_ij() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.psi_ij)
  
  ::safeheron::proto::DLogProof_V2* temp = psi_ij_;
  psi_ij_ = nullptr;
  return temp;
}
inline ::safeheron::proto::DLogProof_V2* Round2P2PMessage::_internal_mutable_psi_ij() {
  
  if (psi_ij_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::DLogProof_V2>(GetArenaForAllocation());
    psi_ij_ = p;
  }
  return psi_ij_;
}
inline ::safeheron::proto::DLogProof_V2* Round2P2PMessage::mutable_psi_ij() {
  ::safeheron::proto::DLogProof_V2* _msg = _internal_mutable_psi_ij();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.psi_ij)
  return _msg;
}
inline void Round2P2PMessage::set_allocated_psi_ij(::safeheron::proto::DLogProof_V2* psi_ij) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_ij_);
  }
  if (psi_ij) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_ij));
    if (message_arena != submessage_arena) {
      psi_ij = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psi_ij, submessage_arena);
    }
    
  } else {
    
  }
  psi_ij_ = psi_ij;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.aux_info_key_refresh.Round2P2PMessage.psi_ij)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aux_info_key_refresh
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cmp_2faux_5finfo_5fkey_5frefresh_2eproto
