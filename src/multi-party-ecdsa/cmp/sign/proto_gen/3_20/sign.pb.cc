// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmp/sign.proto

#include "sign.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace sign {
PROTOBUF_CONSTEXPR Round0BCMessage::Round0BCMessage(
    ::_pbi::ConstantInitialized)
  : ssid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , k_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , g_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Round0BCMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round0BCMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round0BCMessageDefaultTypeInternal() {}
  union {
    Round0BCMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round0BCMessageDefaultTypeInternal _Round0BCMessage_default_instance_;
PROTOBUF_CONSTEXPR Round0P2PMessage::Round0P2PMessage(
    ::_pbi::ConstantInitialized)
  : ssid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , psi_0_ij_(nullptr){}
struct Round0P2PMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round0P2PMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round0P2PMessageDefaultTypeInternal() {}
  union {
    Round0P2PMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round0P2PMessageDefaultTypeInternal _Round0P2PMessage_default_instance_;
PROTOBUF_CONSTEXPR Round1P2PMessage::Round1P2PMessage(
    ::_pbi::ConstantInitialized)
  : ssid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , d_ij_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , f_ij_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , d_hat_ij_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , f_hat_ij_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , g_gamma_(nullptr)
  , psi_ij_(nullptr)
  , psi_hat_ij_(nullptr)
  , psi_prime_ij_(nullptr){}
struct Round1P2PMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round1P2PMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round1P2PMessageDefaultTypeInternal() {}
  union {
    Round1P2PMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round1P2PMessageDefaultTypeInternal _Round1P2PMessage_default_instance_;
PROTOBUF_CONSTEXPR Round2P2PMessage::Round2P2PMessage(
    ::_pbi::ConstantInitialized)
  : ssid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , delta_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , var_delta_(nullptr)
  , psi_double_prime_ij_(nullptr){}
struct Round2P2PMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round2P2PMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round2P2PMessageDefaultTypeInternal() {}
  union {
    Round2P2PMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round2P2PMessageDefaultTypeInternal _Round2P2PMessage_default_instance_;
PROTOBUF_CONSTEXPR Round3P2PMessage::Round3P2PMessage(
    ::_pbi::ConstantInitialized)
  : ssid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sigma_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Round3P2PMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round3P2PMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round3P2PMessageDefaultTypeInternal() {}
  union {
    Round3P2PMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round3P2PMessageDefaultTypeInternal _Round3P2PMessage_default_instance_;
}  // namespace sign
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
static ::_pb::Metadata file_level_metadata_cmp_2fsign_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cmp_2fsign_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cmp_2fsign_2eproto = nullptr;

const uint32_t TableStruct_cmp_2fsign_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage, ssid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage, k_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage, g_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage, ssid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage, psi_0_ij_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, ssid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, g_gamma_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, d_ij_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, f_ij_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, d_hat_ij_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, f_hat_ij_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, psi_ij_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, psi_hat_ij_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, psi_prime_ij_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage, ssid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage, delta_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage, var_delta_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage, psi_double_prime_ij_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage, ssid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage, sigma_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage)},
  { 10, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage)},
  { 19, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage)},
  { 35, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage)},
  { 46, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round0BCMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round0P2PMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round1P2PMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round2P2PMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round3P2PMessage_default_instance_._instance,
};

const char descriptor_table_protodef_cmp_2fsign_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016cmp/sign.proto\022*safeheron.proto.multi_"
  "party_ecdsa.cmp.sign\032\021curve_point.proto\032"
  "\tzkp.proto\"D\n\017Round0BCMessage\022\014\n\004ssid\030\001 "
  "\001(\t\022\r\n\005index\030\002 \001(\t\022\t\n\001K\030\003 \001(\t\022\t\n\001G\030\004 \001(\t"
  "\"h\n\020Round0P2PMessage\022\014\n\004ssid\030\001 \001(\t\022\r\n\005in"
  "dex\030\002 \001(\t\0227\n\010psi_0_ij\030\005 \001(\0132%.safeheron."
  "proto.PailEncRangeProof_V2\"\341\002\n\020Round1P2P"
  "Message\022\014\n\004ssid\030\001 \001(\t\022\r\n\005index\030\002 \001(\t\022,\n\007"
  "g_gamma\030\003 \001(\0132\033.safeheron.proto.CurvePoi"
  "nt\022\014\n\004D_ij\030\004 \001(\t\022\014\n\004F_ij\030\005 \001(\t\022\020\n\010D_hat_"
  "ij\030\006 \001(\t\022\020\n\010F_hat_ij\030\007 \001(\t\022=\n\006psi_ij\030\010 \001"
  "(\0132-.safeheron.proto.PailAffGroupEleRang"
  "eProof_V2\022A\n\npsi_hat_ij\030\t \001(\0132-.safehero"
  "n.proto.PailAffGroupEleRangeProof_V2\022@\n\014"
  "psi_prime_ij\030\n \001(\0132*.safeheron.proto.Pai"
  "lEncGroupEleRangeProof\"\267\001\n\020Round2P2PMess"
  "age\022\014\n\004ssid\030\001 \001(\t\022\r\n\005index\030\002 \001(\t\022\r\n\005delt"
  "a\030\003 \001(\t\022.\n\tvar_delta\030\004 \001(\0132\033.safeheron.p"
  "roto.CurvePoint\022G\n\023psi_double_prime_ij\030\005"
  " \001(\0132*.safeheron.proto.PailEncGroupEleRa"
  "ngeProof\">\n\020Round3P2PMessage\022\014\n\004ssid\030\001 \001"
  "(\t\022\r\n\005index\030\002 \001(\t\022\r\n\005sigma\030\003 \001(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cmp_2fsign_2eproto_deps[2] = {
  &::descriptor_table_curve_5fpoint_2eproto,
  &::descriptor_table_zkp_2eproto,
};
static ::_pbi::once_flag descriptor_table_cmp_2fsign_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cmp_2fsign_2eproto = {
    false, false, 880, descriptor_table_protodef_cmp_2fsign_2eproto,
    "cmp/sign.proto",
    &descriptor_table_cmp_2fsign_2eproto_once, descriptor_table_cmp_2fsign_2eproto_deps, 2, 5,
    schemas, file_default_instances, TableStruct_cmp_2fsign_2eproto::offsets,
    file_level_metadata_cmp_2fsign_2eproto, file_level_enum_descriptors_cmp_2fsign_2eproto,
    file_level_service_descriptors_cmp_2fsign_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cmp_2fsign_2eproto_getter() {
  return &descriptor_table_cmp_2fsign_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cmp_2fsign_2eproto(&descriptor_table_cmp_2fsign_2eproto);
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace sign {

// ===================================================================

class Round0BCMessage::_Internal {
 public:
};

Round0BCMessage::Round0BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
}
Round0BCMessage::Round0BCMessage(const Round0BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ssid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ssid().empty()) {
    ssid_.Set(from._internal_ssid(), 
      GetArenaForAllocation());
  }
  index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    index_.Set(from._internal_index(), 
      GetArenaForAllocation());
  }
  k_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    k_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_k().empty()) {
    k_.Set(from._internal_k(), 
      GetArenaForAllocation());
  }
  g_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    g_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_g().empty()) {
    g_.Set(from._internal_g(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
}

inline void Round0BCMessage::SharedCtor() {
ssid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ssid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
k_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  k_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
g_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  g_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Round0BCMessage::~Round0BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round0BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ssid_.Destroy();
  index_.Destroy();
  k_.Destroy();
  g_.Destroy();
}

void Round0BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round0BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty();
  index_.ClearToEmpty();
  k_.ClearToEmpty();
  g_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round0BCMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.ssid"));
        } else
          goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.index"));
        } else
          goto handle_unusual;
        continue;
      // string K = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_k();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.K"));
        } else
          goto handle_unusual;
        continue;
      // string G = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_g();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.G"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round0BCMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (!this->_internal_ssid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // string K = 3;
  if (!this->_internal_k().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_k().data(), static_cast<int>(this->_internal_k().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.K");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_k(), target);
  }

  // string G = 4;
  if (!this->_internal_g().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_g().data(), static_cast<int>(this->_internal_g().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.G");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_g(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  return target;
}

size_t Round0BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (!this->_internal_ssid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string K = 3;
  if (!this->_internal_k().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_k());
  }

  // string G = 4;
  if (!this->_internal_g().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_g());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round0BCMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round0BCMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round0BCMessage::GetClassData() const { return &_class_data_; }

void Round0BCMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round0BCMessage *>(to)->MergeFrom(
      static_cast<const Round0BCMessage &>(from));
}


void Round0BCMessage::MergeFrom(const Round0BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ssid().empty()) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (!from._internal_index().empty()) {
    _internal_set_index(from._internal_index());
  }
  if (!from._internal_k().empty()) {
    _internal_set_k(from._internal_k());
  }
  if (!from._internal_g().empty()) {
    _internal_set_g(from._internal_g());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round0BCMessage::CopyFrom(const Round0BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round0BCMessage::IsInitialized() const {
  return true;
}

void Round0BCMessage::InternalSwap(Round0BCMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ssid_, lhs_arena,
      &other->ssid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &index_, lhs_arena,
      &other->index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &k_, lhs_arena,
      &other->k_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &g_, lhs_arena,
      &other->g_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Round0BCMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cmp_2fsign_2eproto_getter, &descriptor_table_cmp_2fsign_2eproto_once,
      file_level_metadata_cmp_2fsign_2eproto[0]);
}

// ===================================================================

class Round0P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::PailEncRangeProof_V2& psi_0_ij(const Round0P2PMessage* msg);
};

const ::safeheron::proto::PailEncRangeProof_V2&
Round0P2PMessage::_Internal::psi_0_ij(const Round0P2PMessage* msg) {
  return *msg->psi_0_ij_;
}
void Round0P2PMessage::clear_psi_0_ij() {
  if (GetArenaForAllocation() == nullptr && psi_0_ij_ != nullptr) {
    delete psi_0_ij_;
  }
  psi_0_ij_ = nullptr;
}
Round0P2PMessage::Round0P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
}
Round0P2PMessage::Round0P2PMessage(const Round0P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ssid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ssid().empty()) {
    ssid_.Set(from._internal_ssid(), 
      GetArenaForAllocation());
  }
  index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    index_.Set(from._internal_index(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_psi_0_ij()) {
    psi_0_ij_ = new ::safeheron::proto::PailEncRangeProof_V2(*from.psi_0_ij_);
  } else {
    psi_0_ij_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
}

inline void Round0P2PMessage::SharedCtor() {
ssid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ssid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
psi_0_ij_ = nullptr;
}

Round0P2PMessage::~Round0P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round0P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ssid_.Destroy();
  index_.Destroy();
  if (this != internal_default_instance()) delete psi_0_ij_;
}

void Round0P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round0P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty();
  index_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && psi_0_ij_ != nullptr) {
    delete psi_0_ij_;
  }
  psi_0_ij_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round0P2PMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.ssid"));
        } else
          goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.index"));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.PailEncRangeProof_V2 psi_0_ij = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_psi_0_ij(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round0P2PMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (!this->_internal_ssid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // .safeheron.proto.PailEncRangeProof_V2 psi_0_ij = 5;
  if (this->_internal_has_psi_0_ij()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::psi_0_ij(this),
        _Internal::psi_0_ij(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  return target;
}

size_t Round0P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (!this->_internal_ssid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // .safeheron.proto.PailEncRangeProof_V2 psi_0_ij = 5;
  if (this->_internal_has_psi_0_ij()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *psi_0_ij_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round0P2PMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round0P2PMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round0P2PMessage::GetClassData() const { return &_class_data_; }

void Round0P2PMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round0P2PMessage *>(to)->MergeFrom(
      static_cast<const Round0P2PMessage &>(from));
}


void Round0P2PMessage::MergeFrom(const Round0P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ssid().empty()) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (!from._internal_index().empty()) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_has_psi_0_ij()) {
    _internal_mutable_psi_0_ij()->::safeheron::proto::PailEncRangeProof_V2::MergeFrom(from._internal_psi_0_ij());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round0P2PMessage::CopyFrom(const Round0P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round0P2PMessage::IsInitialized() const {
  return true;
}

void Round0P2PMessage::InternalSwap(Round0P2PMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ssid_, lhs_arena,
      &other->ssid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &index_, lhs_arena,
      &other->index_, rhs_arena
  );
  swap(psi_0_ij_, other->psi_0_ij_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Round0P2PMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cmp_2fsign_2eproto_getter, &descriptor_table_cmp_2fsign_2eproto_once,
      file_level_metadata_cmp_2fsign_2eproto[1]);
}

// ===================================================================

class Round1P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& g_gamma(const Round1P2PMessage* msg);
  static const ::safeheron::proto::PailAffGroupEleRangeProof_V2& psi_ij(const Round1P2PMessage* msg);
  static const ::safeheron::proto::PailAffGroupEleRangeProof_V2& psi_hat_ij(const Round1P2PMessage* msg);
  static const ::safeheron::proto::PailEncGroupEleRangeProof& psi_prime_ij(const Round1P2PMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round1P2PMessage::_Internal::g_gamma(const Round1P2PMessage* msg) {
  return *msg->g_gamma_;
}
const ::safeheron::proto::PailAffGroupEleRangeProof_V2&
Round1P2PMessage::_Internal::psi_ij(const Round1P2PMessage* msg) {
  return *msg->psi_ij_;
}
const ::safeheron::proto::PailAffGroupEleRangeProof_V2&
Round1P2PMessage::_Internal::psi_hat_ij(const Round1P2PMessage* msg) {
  return *msg->psi_hat_ij_;
}
const ::safeheron::proto::PailEncGroupEleRangeProof&
Round1P2PMessage::_Internal::psi_prime_ij(const Round1P2PMessage* msg) {
  return *msg->psi_prime_ij_;
}
void Round1P2PMessage::clear_g_gamma() {
  if (GetArenaForAllocation() == nullptr && g_gamma_ != nullptr) {
    delete g_gamma_;
  }
  g_gamma_ = nullptr;
}
void Round1P2PMessage::clear_psi_ij() {
  if (GetArenaForAllocation() == nullptr && psi_ij_ != nullptr) {
    delete psi_ij_;
  }
  psi_ij_ = nullptr;
}
void Round1P2PMessage::clear_psi_hat_ij() {
  if (GetArenaForAllocation() == nullptr && psi_hat_ij_ != nullptr) {
    delete psi_hat_ij_;
  }
  psi_hat_ij_ = nullptr;
}
void Round1P2PMessage::clear_psi_prime_ij() {
  if (GetArenaForAllocation() == nullptr && psi_prime_ij_ != nullptr) {
    delete psi_prime_ij_;
  }
  psi_prime_ij_ = nullptr;
}
Round1P2PMessage::Round1P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
}
Round1P2PMessage::Round1P2PMessage(const Round1P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ssid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ssid().empty()) {
    ssid_.Set(from._internal_ssid(), 
      GetArenaForAllocation());
  }
  index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    index_.Set(from._internal_index(), 
      GetArenaForAllocation());
  }
  d_ij_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    d_ij_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_d_ij().empty()) {
    d_ij_.Set(from._internal_d_ij(), 
      GetArenaForAllocation());
  }
  f_ij_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    f_ij_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_f_ij().empty()) {
    f_ij_.Set(from._internal_f_ij(), 
      GetArenaForAllocation());
  }
  d_hat_ij_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    d_hat_ij_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_d_hat_ij().empty()) {
    d_hat_ij_.Set(from._internal_d_hat_ij(), 
      GetArenaForAllocation());
  }
  f_hat_ij_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    f_hat_ij_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_f_hat_ij().empty()) {
    f_hat_ij_.Set(from._internal_f_hat_ij(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_g_gamma()) {
    g_gamma_ = new ::safeheron::proto::CurvePoint(*from.g_gamma_);
  } else {
    g_gamma_ = nullptr;
  }
  if (from._internal_has_psi_ij()) {
    psi_ij_ = new ::safeheron::proto::PailAffGroupEleRangeProof_V2(*from.psi_ij_);
  } else {
    psi_ij_ = nullptr;
  }
  if (from._internal_has_psi_hat_ij()) {
    psi_hat_ij_ = new ::safeheron::proto::PailAffGroupEleRangeProof_V2(*from.psi_hat_ij_);
  } else {
    psi_hat_ij_ = nullptr;
  }
  if (from._internal_has_psi_prime_ij()) {
    psi_prime_ij_ = new ::safeheron::proto::PailEncGroupEleRangeProof(*from.psi_prime_ij_);
  } else {
    psi_prime_ij_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
}

inline void Round1P2PMessage::SharedCtor() {
ssid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ssid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
d_ij_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  d_ij_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
f_ij_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  f_ij_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
d_hat_ij_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  d_hat_ij_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
f_hat_ij_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  f_hat_ij_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&g_gamma_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&psi_prime_ij_) -
    reinterpret_cast<char*>(&g_gamma_)) + sizeof(psi_prime_ij_));
}

Round1P2PMessage::~Round1P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round1P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ssid_.Destroy();
  index_.Destroy();
  d_ij_.Destroy();
  f_ij_.Destroy();
  d_hat_ij_.Destroy();
  f_hat_ij_.Destroy();
  if (this != internal_default_instance()) delete g_gamma_;
  if (this != internal_default_instance()) delete psi_ij_;
  if (this != internal_default_instance()) delete psi_hat_ij_;
  if (this != internal_default_instance()) delete psi_prime_ij_;
}

void Round1P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round1P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty();
  index_.ClearToEmpty();
  d_ij_.ClearToEmpty();
  f_ij_.ClearToEmpty();
  d_hat_ij_.ClearToEmpty();
  f_hat_ij_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && g_gamma_ != nullptr) {
    delete g_gamma_;
  }
  g_gamma_ = nullptr;
  if (GetArenaForAllocation() == nullptr && psi_ij_ != nullptr) {
    delete psi_ij_;
  }
  psi_ij_ = nullptr;
  if (GetArenaForAllocation() == nullptr && psi_hat_ij_ != nullptr) {
    delete psi_hat_ij_;
  }
  psi_hat_ij_ = nullptr;
  if (GetArenaForAllocation() == nullptr && psi_prime_ij_ != nullptr) {
    delete psi_prime_ij_;
  }
  psi_prime_ij_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round1P2PMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.ssid"));
        } else
          goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.index"));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint g_gamma = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_gamma(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string D_ij = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_d_ij();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_ij"));
        } else
          goto handle_unusual;
        continue;
      // string F_ij = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_f_ij();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_ij"));
        } else
          goto handle_unusual;
        continue;
      // string D_hat_ij = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_d_hat_ij();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_hat_ij"));
        } else
          goto handle_unusual;
        continue;
      // string F_hat_ij = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_f_hat_ij();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_hat_ij"));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_ij = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_psi_ij(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_hat_ij = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_psi_hat_ij(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.PailEncGroupEleRangeProof psi_prime_ij = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_psi_prime_ij(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round1P2PMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (!this->_internal_ssid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // .safeheron.proto.CurvePoint g_gamma = 3;
  if (this->_internal_has_g_gamma()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::g_gamma(this),
        _Internal::g_gamma(this).GetCachedSize(), target, stream);
  }

  // string D_ij = 4;
  if (!this->_internal_d_ij().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_d_ij().data(), static_cast<int>(this->_internal_d_ij().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_ij");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_d_ij(), target);
  }

  // string F_ij = 5;
  if (!this->_internal_f_ij().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_f_ij().data(), static_cast<int>(this->_internal_f_ij().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_ij");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_f_ij(), target);
  }

  // string D_hat_ij = 6;
  if (!this->_internal_d_hat_ij().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_d_hat_ij().data(), static_cast<int>(this->_internal_d_hat_ij().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_hat_ij");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_d_hat_ij(), target);
  }

  // string F_hat_ij = 7;
  if (!this->_internal_f_hat_ij().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_f_hat_ij().data(), static_cast<int>(this->_internal_f_hat_ij().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_hat_ij");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_f_hat_ij(), target);
  }

  // .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_ij = 8;
  if (this->_internal_has_psi_ij()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::psi_ij(this),
        _Internal::psi_ij(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_hat_ij = 9;
  if (this->_internal_has_psi_hat_ij()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::psi_hat_ij(this),
        _Internal::psi_hat_ij(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.PailEncGroupEleRangeProof psi_prime_ij = 10;
  if (this->_internal_has_psi_prime_ij()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::psi_prime_ij(this),
        _Internal::psi_prime_ij(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  return target;
}

size_t Round1P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (!this->_internal_ssid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string D_ij = 4;
  if (!this->_internal_d_ij().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_d_ij());
  }

  // string F_ij = 5;
  if (!this->_internal_f_ij().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f_ij());
  }

  // string D_hat_ij = 6;
  if (!this->_internal_d_hat_ij().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_d_hat_ij());
  }

  // string F_hat_ij = 7;
  if (!this->_internal_f_hat_ij().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f_hat_ij());
  }

  // .safeheron.proto.CurvePoint g_gamma = 3;
  if (this->_internal_has_g_gamma()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_gamma_);
  }

  // .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_ij = 8;
  if (this->_internal_has_psi_ij()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *psi_ij_);
  }

  // .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_hat_ij = 9;
  if (this->_internal_has_psi_hat_ij()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *psi_hat_ij_);
  }

  // .safeheron.proto.PailEncGroupEleRangeProof psi_prime_ij = 10;
  if (this->_internal_has_psi_prime_ij()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *psi_prime_ij_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round1P2PMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round1P2PMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round1P2PMessage::GetClassData() const { return &_class_data_; }

void Round1P2PMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round1P2PMessage *>(to)->MergeFrom(
      static_cast<const Round1P2PMessage &>(from));
}


void Round1P2PMessage::MergeFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ssid().empty()) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (!from._internal_index().empty()) {
    _internal_set_index(from._internal_index());
  }
  if (!from._internal_d_ij().empty()) {
    _internal_set_d_ij(from._internal_d_ij());
  }
  if (!from._internal_f_ij().empty()) {
    _internal_set_f_ij(from._internal_f_ij());
  }
  if (!from._internal_d_hat_ij().empty()) {
    _internal_set_d_hat_ij(from._internal_d_hat_ij());
  }
  if (!from._internal_f_hat_ij().empty()) {
    _internal_set_f_hat_ij(from._internal_f_hat_ij());
  }
  if (from._internal_has_g_gamma()) {
    _internal_mutable_g_gamma()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_g_gamma());
  }
  if (from._internal_has_psi_ij()) {
    _internal_mutable_psi_ij()->::safeheron::proto::PailAffGroupEleRangeProof_V2::MergeFrom(from._internal_psi_ij());
  }
  if (from._internal_has_psi_hat_ij()) {
    _internal_mutable_psi_hat_ij()->::safeheron::proto::PailAffGroupEleRangeProof_V2::MergeFrom(from._internal_psi_hat_ij());
  }
  if (from._internal_has_psi_prime_ij()) {
    _internal_mutable_psi_prime_ij()->::safeheron::proto::PailEncGroupEleRangeProof::MergeFrom(from._internal_psi_prime_ij());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round1P2PMessage::CopyFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round1P2PMessage::IsInitialized() const {
  return true;
}

void Round1P2PMessage::InternalSwap(Round1P2PMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ssid_, lhs_arena,
      &other->ssid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &index_, lhs_arena,
      &other->index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &d_ij_, lhs_arena,
      &other->d_ij_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &f_ij_, lhs_arena,
      &other->f_ij_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &d_hat_ij_, lhs_arena,
      &other->d_hat_ij_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &f_hat_ij_, lhs_arena,
      &other->f_hat_ij_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round1P2PMessage, psi_prime_ij_)
      + sizeof(Round1P2PMessage::psi_prime_ij_)
      - PROTOBUF_FIELD_OFFSET(Round1P2PMessage, g_gamma_)>(
          reinterpret_cast<char*>(&g_gamma_),
          reinterpret_cast<char*>(&other->g_gamma_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round1P2PMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cmp_2fsign_2eproto_getter, &descriptor_table_cmp_2fsign_2eproto_once,
      file_level_metadata_cmp_2fsign_2eproto[2]);
}

// ===================================================================

class Round2P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& var_delta(const Round2P2PMessage* msg);
  static const ::safeheron::proto::PailEncGroupEleRangeProof& psi_double_prime_ij(const Round2P2PMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round2P2PMessage::_Internal::var_delta(const Round2P2PMessage* msg) {
  return *msg->var_delta_;
}
const ::safeheron::proto::PailEncGroupEleRangeProof&
Round2P2PMessage::_Internal::psi_double_prime_ij(const Round2P2PMessage* msg) {
  return *msg->psi_double_prime_ij_;
}
void Round2P2PMessage::clear_var_delta() {
  if (GetArenaForAllocation() == nullptr && var_delta_ != nullptr) {
    delete var_delta_;
  }
  var_delta_ = nullptr;
}
void Round2P2PMessage::clear_psi_double_prime_ij() {
  if (GetArenaForAllocation() == nullptr && psi_double_prime_ij_ != nullptr) {
    delete psi_double_prime_ij_;
  }
  psi_double_prime_ij_ = nullptr;
}
Round2P2PMessage::Round2P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
}
Round2P2PMessage::Round2P2PMessage(const Round2P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ssid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ssid().empty()) {
    ssid_.Set(from._internal_ssid(), 
      GetArenaForAllocation());
  }
  index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    index_.Set(from._internal_index(), 
      GetArenaForAllocation());
  }
  delta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    delta_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delta().empty()) {
    delta_.Set(from._internal_delta(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_var_delta()) {
    var_delta_ = new ::safeheron::proto::CurvePoint(*from.var_delta_);
  } else {
    var_delta_ = nullptr;
  }
  if (from._internal_has_psi_double_prime_ij()) {
    psi_double_prime_ij_ = new ::safeheron::proto::PailEncGroupEleRangeProof(*from.psi_double_prime_ij_);
  } else {
    psi_double_prime_ij_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
}

inline void Round2P2PMessage::SharedCtor() {
ssid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ssid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
delta_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  delta_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&var_delta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&psi_double_prime_ij_) -
    reinterpret_cast<char*>(&var_delta_)) + sizeof(psi_double_prime_ij_));
}

Round2P2PMessage::~Round2P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round2P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ssid_.Destroy();
  index_.Destroy();
  delta_.Destroy();
  if (this != internal_default_instance()) delete var_delta_;
  if (this != internal_default_instance()) delete psi_double_prime_ij_;
}

void Round2P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round2P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty();
  index_.ClearToEmpty();
  delta_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && var_delta_ != nullptr) {
    delete var_delta_;
  }
  var_delta_ = nullptr;
  if (GetArenaForAllocation() == nullptr && psi_double_prime_ij_ != nullptr) {
    delete psi_double_prime_ij_;
  }
  psi_double_prime_ij_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round2P2PMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.ssid"));
        } else
          goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.index"));
        } else
          goto handle_unusual;
        continue;
      // string delta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_delta();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.delta"));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint var_delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_var_delta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.PailEncGroupEleRangeProof psi_double_prime_ij = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_psi_double_prime_ij(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round2P2PMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (!this->_internal_ssid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // string delta = 3;
  if (!this->_internal_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delta().data(), static_cast<int>(this->_internal_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.delta");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_delta(), target);
  }

  // .safeheron.proto.CurvePoint var_delta = 4;
  if (this->_internal_has_var_delta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::var_delta(this),
        _Internal::var_delta(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.PailEncGroupEleRangeProof psi_double_prime_ij = 5;
  if (this->_internal_has_psi_double_prime_ij()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::psi_double_prime_ij(this),
        _Internal::psi_double_prime_ij(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  return target;
}

size_t Round2P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (!this->_internal_ssid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string delta = 3;
  if (!this->_internal_delta().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delta());
  }

  // .safeheron.proto.CurvePoint var_delta = 4;
  if (this->_internal_has_var_delta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *var_delta_);
  }

  // .safeheron.proto.PailEncGroupEleRangeProof psi_double_prime_ij = 5;
  if (this->_internal_has_psi_double_prime_ij()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *psi_double_prime_ij_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round2P2PMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round2P2PMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round2P2PMessage::GetClassData() const { return &_class_data_; }

void Round2P2PMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round2P2PMessage *>(to)->MergeFrom(
      static_cast<const Round2P2PMessage &>(from));
}


void Round2P2PMessage::MergeFrom(const Round2P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ssid().empty()) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (!from._internal_index().empty()) {
    _internal_set_index(from._internal_index());
  }
  if (!from._internal_delta().empty()) {
    _internal_set_delta(from._internal_delta());
  }
  if (from._internal_has_var_delta()) {
    _internal_mutable_var_delta()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_var_delta());
  }
  if (from._internal_has_psi_double_prime_ij()) {
    _internal_mutable_psi_double_prime_ij()->::safeheron::proto::PailEncGroupEleRangeProof::MergeFrom(from._internal_psi_double_prime_ij());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round2P2PMessage::CopyFrom(const Round2P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round2P2PMessage::IsInitialized() const {
  return true;
}

void Round2P2PMessage::InternalSwap(Round2P2PMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ssid_, lhs_arena,
      &other->ssid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &index_, lhs_arena,
      &other->index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &delta_, lhs_arena,
      &other->delta_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round2P2PMessage, psi_double_prime_ij_)
      + sizeof(Round2P2PMessage::psi_double_prime_ij_)
      - PROTOBUF_FIELD_OFFSET(Round2P2PMessage, var_delta_)>(
          reinterpret_cast<char*>(&var_delta_),
          reinterpret_cast<char*>(&other->var_delta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round2P2PMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cmp_2fsign_2eproto_getter, &descriptor_table_cmp_2fsign_2eproto_once,
      file_level_metadata_cmp_2fsign_2eproto[3]);
}

// ===================================================================

class Round3P2PMessage::_Internal {
 public:
};

Round3P2PMessage::Round3P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
}
Round3P2PMessage::Round3P2PMessage(const Round3P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ssid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ssid().empty()) {
    ssid_.Set(from._internal_ssid(), 
      GetArenaForAllocation());
  }
  index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    index_.Set(from._internal_index(), 
      GetArenaForAllocation());
  }
  sigma_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sigma_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sigma().empty()) {
    sigma_.Set(from._internal_sigma(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
}

inline void Round3P2PMessage::SharedCtor() {
ssid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ssid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sigma_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sigma_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Round3P2PMessage::~Round3P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round3P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ssid_.Destroy();
  index_.Destroy();
  sigma_.Destroy();
}

void Round3P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round3P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty();
  index_.ClearToEmpty();
  sigma_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round3P2PMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.ssid"));
        } else
          goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.index"));
        } else
          goto handle_unusual;
        continue;
      // string sigma = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sigma();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.sigma"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round3P2PMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (!this->_internal_ssid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // string sigma = 3;
  if (!this->_internal_sigma().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sigma().data(), static_cast<int>(this->_internal_sigma().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.sigma");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sigma(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  return target;
}

size_t Round3P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (!this->_internal_ssid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string index = 2;
  if (!this->_internal_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string sigma = 3;
  if (!this->_internal_sigma().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sigma());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round3P2PMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round3P2PMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round3P2PMessage::GetClassData() const { return &_class_data_; }

void Round3P2PMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round3P2PMessage *>(to)->MergeFrom(
      static_cast<const Round3P2PMessage &>(from));
}


void Round3P2PMessage::MergeFrom(const Round3P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ssid().empty()) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (!from._internal_index().empty()) {
    _internal_set_index(from._internal_index());
  }
  if (!from._internal_sigma().empty()) {
    _internal_set_sigma(from._internal_sigma());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round3P2PMessage::CopyFrom(const Round3P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round3P2PMessage::IsInitialized() const {
  return true;
}

void Round3P2PMessage::InternalSwap(Round3P2PMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ssid_, lhs_arena,
      &other->ssid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &index_, lhs_arena,
      &other->index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sigma_, lhs_arena,
      &other->sigma_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Round3P2PMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cmp_2fsign_2eproto_getter, &descriptor_table_cmp_2fsign_2eproto_once,
      file_level_metadata_cmp_2fsign_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sign
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
