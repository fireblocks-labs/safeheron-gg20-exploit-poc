// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmp/sign.proto

#include "sign.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_curve_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurvePoint_curve_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PailAffGroupEleRangeProof_V2_zkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PailEncGroupEleRangeProof_zkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PailEncRangeProof_V2_zkp_2eproto;
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace sign {
class Round0BCMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round0BCMessage> _instance;
} _Round0BCMessage_default_instance_;
class Round0P2PMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round0P2PMessage> _instance;
} _Round0P2PMessage_default_instance_;
class Round1P2PMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round1P2PMessage> _instance;
} _Round1P2PMessage_default_instance_;
class Round2P2PMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round2P2PMessage> _instance;
} _Round2P2PMessage_default_instance_;
class Round3P2PMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round3P2PMessage> _instance;
} _Round3P2PMessage_default_instance_;
}  // namespace sign
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
static void InitDefaultsscc_info_Round0BCMessage_cmp_2fsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round0BCMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Round0BCMessage_cmp_2fsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Round0BCMessage_cmp_2fsign_2eproto}, {}};

static void InitDefaultsscc_info_Round0P2PMessage_cmp_2fsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round0P2PMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Round0P2PMessage_cmp_2fsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Round0P2PMessage_cmp_2fsign_2eproto}, {
      &scc_info_PailEncRangeProof_V2_zkp_2eproto.base,}};

static void InitDefaultsscc_info_Round1P2PMessage_cmp_2fsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round1P2PMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Round1P2PMessage_cmp_2fsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Round1P2PMessage_cmp_2fsign_2eproto}, {
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,
      &scc_info_PailAffGroupEleRangeProof_V2_zkp_2eproto.base,
      &scc_info_PailEncGroupEleRangeProof_zkp_2eproto.base,}};

static void InitDefaultsscc_info_Round2P2PMessage_cmp_2fsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round2P2PMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Round2P2PMessage_cmp_2fsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Round2P2PMessage_cmp_2fsign_2eproto}, {
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,
      &scc_info_PailEncGroupEleRangeProof_zkp_2eproto.base,}};

static void InitDefaultsscc_info_Round3P2PMessage_cmp_2fsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round3P2PMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Round3P2PMessage_cmp_2fsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Round3P2PMessage_cmp_2fsign_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cmp_2fsign_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cmp_2fsign_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cmp_2fsign_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cmp_2fsign_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage, ssid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage, k_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage, g_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage, ssid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage, psi_0_ij_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, ssid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, g_gamma_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, d_ij_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, f_ij_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, d_hat_ij_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, f_hat_ij_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, psi_ij_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, psi_hat_ij_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage, psi_prime_ij_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage, ssid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage, delta_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage, var_delta_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage, psi_double_prime_ij_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage, ssid_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage, sigma_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage)},
  { 9, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage)},
  { 17, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage)},
  { 32, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage)},
  { 42, -1, sizeof(::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round0BCMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round0P2PMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round1P2PMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round2P2PMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::cmp::sign::_Round3P2PMessage_default_instance_),
};

const char descriptor_table_protodef_cmp_2fsign_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016cmp/sign.proto\022*safeheron.proto.multi_"
  "party_ecdsa.cmp.sign\032\021curve_point.proto\032"
  "\tzkp.proto\"D\n\017Round0BCMessage\022\014\n\004ssid\030\001 "
  "\001(\t\022\r\n\005index\030\002 \001(\t\022\t\n\001K\030\003 \001(\t\022\t\n\001G\030\004 \001(\t"
  "\"h\n\020Round0P2PMessage\022\014\n\004ssid\030\001 \001(\t\022\r\n\005in"
  "dex\030\002 \001(\t\0227\n\010psi_0_ij\030\005 \001(\0132%.safeheron."
  "proto.PailEncRangeProof_V2\"\341\002\n\020Round1P2P"
  "Message\022\014\n\004ssid\030\001 \001(\t\022\r\n\005index\030\002 \001(\t\022,\n\007"
  "g_gamma\030\003 \001(\0132\033.safeheron.proto.CurvePoi"
  "nt\022\014\n\004D_ij\030\004 \001(\t\022\014\n\004F_ij\030\005 \001(\t\022\020\n\010D_hat_"
  "ij\030\006 \001(\t\022\020\n\010F_hat_ij\030\007 \001(\t\022=\n\006psi_ij\030\010 \001"
  "(\0132-.safeheron.proto.PailAffGroupEleRang"
  "eProof_V2\022A\n\npsi_hat_ij\030\t \001(\0132-.safehero"
  "n.proto.PailAffGroupEleRangeProof_V2\022@\n\014"
  "psi_prime_ij\030\n \001(\0132*.safeheron.proto.Pai"
  "lEncGroupEleRangeProof\"\267\001\n\020Round2P2PMess"
  "age\022\014\n\004ssid\030\001 \001(\t\022\r\n\005index\030\002 \001(\t\022\r\n\005delt"
  "a\030\003 \001(\t\022.\n\tvar_delta\030\004 \001(\0132\033.safeheron.p"
  "roto.CurvePoint\022G\n\023psi_double_prime_ij\030\005"
  " \001(\0132*.safeheron.proto.PailEncGroupEleRa"
  "ngeProof\">\n\020Round3P2PMessage\022\014\n\004ssid\030\001 \001"
  "(\t\022\r\n\005index\030\002 \001(\t\022\r\n\005sigma\030\003 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cmp_2fsign_2eproto_deps[2] = {
  &::descriptor_table_curve_5fpoint_2eproto,
  &::descriptor_table_zkp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cmp_2fsign_2eproto_sccs[5] = {
  &scc_info_Round0BCMessage_cmp_2fsign_2eproto.base,
  &scc_info_Round0P2PMessage_cmp_2fsign_2eproto.base,
  &scc_info_Round1P2PMessage_cmp_2fsign_2eproto.base,
  &scc_info_Round2P2PMessage_cmp_2fsign_2eproto.base,
  &scc_info_Round3P2PMessage_cmp_2fsign_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cmp_2fsign_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cmp_2fsign_2eproto = {
  false, false, descriptor_table_protodef_cmp_2fsign_2eproto, "cmp/sign.proto", 880,
  &descriptor_table_cmp_2fsign_2eproto_once, descriptor_table_cmp_2fsign_2eproto_sccs, descriptor_table_cmp_2fsign_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_cmp_2fsign_2eproto::offsets,
  file_level_metadata_cmp_2fsign_2eproto, 5, file_level_enum_descriptors_cmp_2fsign_2eproto, file_level_service_descriptors_cmp_2fsign_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cmp_2fsign_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cmp_2fsign_2eproto)), true);
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace sign {

// ===================================================================

class Round0BCMessage::_Internal {
 public:
};

Round0BCMessage::Round0BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
}
Round0BCMessage::Round0BCMessage(const Round0BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ssid(), 
      GetArena());
  }
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index().empty()) {
    index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index(), 
      GetArena());
  }
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_k().empty()) {
    k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_k(), 
      GetArena());
  }
  g_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_g().empty()) {
    g_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_g(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
}

void Round0BCMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round0BCMessage_cmp_2fsign_2eproto.base);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  g_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Round0BCMessage::~Round0BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round0BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  g_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Round0BCMessage::ArenaDtor(void* object) {
  Round0BCMessage* _this = reinterpret_cast< Round0BCMessage* >(object);
  (void)_this;
}
void Round0BCMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round0BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round0BCMessage& Round0BCMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round0BCMessage_cmp_2fsign_2eproto.base);
  return *internal_default_instance();
}


void Round0BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty();
  index_.ClearToEmpty();
  k_.ClearToEmpty();
  g_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round0BCMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string K = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_k();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.K"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string G = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_g();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.G"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round0BCMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string index = 2;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // string K = 3;
  if (this->k().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_k().data(), static_cast<int>(this->_internal_k().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.K");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_k(), target);
  }

  // string G = 4;
  if (this->g().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_g().data(), static_cast<int>(this->_internal_g().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.G");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_g(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  return target;
}

size_t Round0BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string index = 2;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string K = 3;
  if (this->k().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_k());
  }

  // string G = 4;
  if (this->g().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_g());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round0BCMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round0BCMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round0BCMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
    MergeFrom(*source);
  }
}

void Round0BCMessage::MergeFrom(const Round0BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (from.index().size() > 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.k().size() > 0) {
    _internal_set_k(from._internal_k());
  }
  if (from.g().size() > 0) {
    _internal_set_g(from._internal_g());
  }
}

void Round0BCMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round0BCMessage::CopyFrom(const Round0BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round0BCMessage::IsInitialized() const {
  return true;
}

void Round0BCMessage::InternalSwap(Round0BCMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  k_.Swap(&other->k_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  g_.Swap(&other->g_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Round0BCMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round0P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::PailEncRangeProof_V2& psi_0_ij(const Round0P2PMessage* msg);
};

const ::safeheron::proto::PailEncRangeProof_V2&
Round0P2PMessage::_Internal::psi_0_ij(const Round0P2PMessage* msg) {
  return *msg->psi_0_ij_;
}
void Round0P2PMessage::clear_psi_0_ij() {
  if (GetArena() == nullptr && psi_0_ij_ != nullptr) {
    delete psi_0_ij_;
  }
  psi_0_ij_ = nullptr;
}
Round0P2PMessage::Round0P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
}
Round0P2PMessage::Round0P2PMessage(const Round0P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ssid(), 
      GetArena());
  }
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index().empty()) {
    index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index(), 
      GetArena());
  }
  if (from._internal_has_psi_0_ij()) {
    psi_0_ij_ = new ::safeheron::proto::PailEncRangeProof_V2(*from.psi_0_ij_);
  } else {
    psi_0_ij_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
}

void Round0P2PMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round0P2PMessage_cmp_2fsign_2eproto.base);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psi_0_ij_ = nullptr;
}

Round0P2PMessage::~Round0P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round0P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete psi_0_ij_;
}

void Round0P2PMessage::ArenaDtor(void* object) {
  Round0P2PMessage* _this = reinterpret_cast< Round0P2PMessage* >(object);
  (void)_this;
}
void Round0P2PMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round0P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round0P2PMessage& Round0P2PMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round0P2PMessage_cmp_2fsign_2eproto.base);
  return *internal_default_instance();
}


void Round0P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty();
  index_.ClearToEmpty();
  if (GetArena() == nullptr && psi_0_ij_ != nullptr) {
    delete psi_0_ij_;
  }
  psi_0_ij_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round0P2PMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.PailEncRangeProof_V2 psi_0_ij = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_psi_0_ij(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round0P2PMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string index = 2;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // .safeheron.proto.PailEncRangeProof_V2 psi_0_ij = 5;
  if (this->has_psi_0_ij()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::psi_0_ij(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  return target;
}

size_t Round0P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string index = 2;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // .safeheron.proto.PailEncRangeProof_V2 psi_0_ij = 5;
  if (this->has_psi_0_ij()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *psi_0_ij_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round0P2PMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round0P2PMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round0P2PMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
    MergeFrom(*source);
  }
}

void Round0P2PMessage::MergeFrom(const Round0P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (from.index().size() > 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.has_psi_0_ij()) {
    _internal_mutable_psi_0_ij()->::safeheron::proto::PailEncRangeProof_V2::MergeFrom(from._internal_psi_0_ij());
  }
}

void Round0P2PMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round0P2PMessage::CopyFrom(const Round0P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round0P2PMessage::IsInitialized() const {
  return true;
}

void Round0P2PMessage::InternalSwap(Round0P2PMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(psi_0_ij_, other->psi_0_ij_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Round0P2PMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round1P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& g_gamma(const Round1P2PMessage* msg);
  static const ::safeheron::proto::PailAffGroupEleRangeProof_V2& psi_ij(const Round1P2PMessage* msg);
  static const ::safeheron::proto::PailAffGroupEleRangeProof_V2& psi_hat_ij(const Round1P2PMessage* msg);
  static const ::safeheron::proto::PailEncGroupEleRangeProof& psi_prime_ij(const Round1P2PMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round1P2PMessage::_Internal::g_gamma(const Round1P2PMessage* msg) {
  return *msg->g_gamma_;
}
const ::safeheron::proto::PailAffGroupEleRangeProof_V2&
Round1P2PMessage::_Internal::psi_ij(const Round1P2PMessage* msg) {
  return *msg->psi_ij_;
}
const ::safeheron::proto::PailAffGroupEleRangeProof_V2&
Round1P2PMessage::_Internal::psi_hat_ij(const Round1P2PMessage* msg) {
  return *msg->psi_hat_ij_;
}
const ::safeheron::proto::PailEncGroupEleRangeProof&
Round1P2PMessage::_Internal::psi_prime_ij(const Round1P2PMessage* msg) {
  return *msg->psi_prime_ij_;
}
void Round1P2PMessage::clear_g_gamma() {
  if (GetArena() == nullptr && g_gamma_ != nullptr) {
    delete g_gamma_;
  }
  g_gamma_ = nullptr;
}
void Round1P2PMessage::clear_psi_ij() {
  if (GetArena() == nullptr && psi_ij_ != nullptr) {
    delete psi_ij_;
  }
  psi_ij_ = nullptr;
}
void Round1P2PMessage::clear_psi_hat_ij() {
  if (GetArena() == nullptr && psi_hat_ij_ != nullptr) {
    delete psi_hat_ij_;
  }
  psi_hat_ij_ = nullptr;
}
void Round1P2PMessage::clear_psi_prime_ij() {
  if (GetArena() == nullptr && psi_prime_ij_ != nullptr) {
    delete psi_prime_ij_;
  }
  psi_prime_ij_ = nullptr;
}
Round1P2PMessage::Round1P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
}
Round1P2PMessage::Round1P2PMessage(const Round1P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ssid(), 
      GetArena());
  }
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index().empty()) {
    index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index(), 
      GetArena());
  }
  d_ij_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_d_ij().empty()) {
    d_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_d_ij(), 
      GetArena());
  }
  f_ij_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_f_ij().empty()) {
    f_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_f_ij(), 
      GetArena());
  }
  d_hat_ij_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_d_hat_ij().empty()) {
    d_hat_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_d_hat_ij(), 
      GetArena());
  }
  f_hat_ij_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_f_hat_ij().empty()) {
    f_hat_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_f_hat_ij(), 
      GetArena());
  }
  if (from._internal_has_g_gamma()) {
    g_gamma_ = new ::safeheron::proto::CurvePoint(*from.g_gamma_);
  } else {
    g_gamma_ = nullptr;
  }
  if (from._internal_has_psi_ij()) {
    psi_ij_ = new ::safeheron::proto::PailAffGroupEleRangeProof_V2(*from.psi_ij_);
  } else {
    psi_ij_ = nullptr;
  }
  if (from._internal_has_psi_hat_ij()) {
    psi_hat_ij_ = new ::safeheron::proto::PailAffGroupEleRangeProof_V2(*from.psi_hat_ij_);
  } else {
    psi_hat_ij_ = nullptr;
  }
  if (from._internal_has_psi_prime_ij()) {
    psi_prime_ij_ = new ::safeheron::proto::PailEncGroupEleRangeProof(*from.psi_prime_ij_);
  } else {
    psi_prime_ij_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
}

void Round1P2PMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round1P2PMessage_cmp_2fsign_2eproto.base);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  d_ij_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f_ij_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  d_hat_ij_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f_hat_ij_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&g_gamma_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&psi_prime_ij_) -
      reinterpret_cast<char*>(&g_gamma_)) + sizeof(psi_prime_ij_));
}

Round1P2PMessage::~Round1P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round1P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  d_ij_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f_ij_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  d_hat_ij_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f_hat_ij_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete g_gamma_;
  if (this != internal_default_instance()) delete psi_ij_;
  if (this != internal_default_instance()) delete psi_hat_ij_;
  if (this != internal_default_instance()) delete psi_prime_ij_;
}

void Round1P2PMessage::ArenaDtor(void* object) {
  Round1P2PMessage* _this = reinterpret_cast< Round1P2PMessage* >(object);
  (void)_this;
}
void Round1P2PMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round1P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round1P2PMessage& Round1P2PMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round1P2PMessage_cmp_2fsign_2eproto.base);
  return *internal_default_instance();
}


void Round1P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty();
  index_.ClearToEmpty();
  d_ij_.ClearToEmpty();
  f_ij_.ClearToEmpty();
  d_hat_ij_.ClearToEmpty();
  f_hat_ij_.ClearToEmpty();
  if (GetArena() == nullptr && g_gamma_ != nullptr) {
    delete g_gamma_;
  }
  g_gamma_ = nullptr;
  if (GetArena() == nullptr && psi_ij_ != nullptr) {
    delete psi_ij_;
  }
  psi_ij_ = nullptr;
  if (GetArena() == nullptr && psi_hat_ij_ != nullptr) {
    delete psi_hat_ij_;
  }
  psi_hat_ij_ = nullptr;
  if (GetArena() == nullptr && psi_prime_ij_ != nullptr) {
    delete psi_prime_ij_;
  }
  psi_prime_ij_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round1P2PMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint g_gamma = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_gamma(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string D_ij = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_d_ij();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_ij"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string F_ij = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_f_ij();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_ij"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string D_hat_ij = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_d_hat_ij();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_hat_ij"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string F_hat_ij = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_f_hat_ij();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_hat_ij"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_ij = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_psi_ij(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_hat_ij = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_psi_hat_ij(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.PailEncGroupEleRangeProof psi_prime_ij = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_psi_prime_ij(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round1P2PMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string index = 2;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // .safeheron.proto.CurvePoint g_gamma = 3;
  if (this->has_g_gamma()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::g_gamma(this), target, stream);
  }

  // string D_ij = 4;
  if (this->d_ij().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_d_ij().data(), static_cast<int>(this->_internal_d_ij().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_ij");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_d_ij(), target);
  }

  // string F_ij = 5;
  if (this->f_ij().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_f_ij().data(), static_cast<int>(this->_internal_f_ij().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_ij");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_f_ij(), target);
  }

  // string D_hat_ij = 6;
  if (this->d_hat_ij().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_d_hat_ij().data(), static_cast<int>(this->_internal_d_hat_ij().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_hat_ij");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_d_hat_ij(), target);
  }

  // string F_hat_ij = 7;
  if (this->f_hat_ij().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_f_hat_ij().data(), static_cast<int>(this->_internal_f_hat_ij().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_hat_ij");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_f_hat_ij(), target);
  }

  // .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_ij = 8;
  if (this->has_psi_ij()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::psi_ij(this), target, stream);
  }

  // .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_hat_ij = 9;
  if (this->has_psi_hat_ij()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::psi_hat_ij(this), target, stream);
  }

  // .safeheron.proto.PailEncGroupEleRangeProof psi_prime_ij = 10;
  if (this->has_psi_prime_ij()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::psi_prime_ij(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  return target;
}

size_t Round1P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string index = 2;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string D_ij = 4;
  if (this->d_ij().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_d_ij());
  }

  // string F_ij = 5;
  if (this->f_ij().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f_ij());
  }

  // string D_hat_ij = 6;
  if (this->d_hat_ij().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_d_hat_ij());
  }

  // string F_hat_ij = 7;
  if (this->f_hat_ij().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f_hat_ij());
  }

  // .safeheron.proto.CurvePoint g_gamma = 3;
  if (this->has_g_gamma()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_gamma_);
  }

  // .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_ij = 8;
  if (this->has_psi_ij()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *psi_ij_);
  }

  // .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_hat_ij = 9;
  if (this->has_psi_hat_ij()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *psi_hat_ij_);
  }

  // .safeheron.proto.PailEncGroupEleRangeProof psi_prime_ij = 10;
  if (this->has_psi_prime_ij()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *psi_prime_ij_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round1P2PMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round1P2PMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round1P2PMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
    MergeFrom(*source);
  }
}

void Round1P2PMessage::MergeFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (from.index().size() > 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.d_ij().size() > 0) {
    _internal_set_d_ij(from._internal_d_ij());
  }
  if (from.f_ij().size() > 0) {
    _internal_set_f_ij(from._internal_f_ij());
  }
  if (from.d_hat_ij().size() > 0) {
    _internal_set_d_hat_ij(from._internal_d_hat_ij());
  }
  if (from.f_hat_ij().size() > 0) {
    _internal_set_f_hat_ij(from._internal_f_hat_ij());
  }
  if (from.has_g_gamma()) {
    _internal_mutable_g_gamma()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_g_gamma());
  }
  if (from.has_psi_ij()) {
    _internal_mutable_psi_ij()->::safeheron::proto::PailAffGroupEleRangeProof_V2::MergeFrom(from._internal_psi_ij());
  }
  if (from.has_psi_hat_ij()) {
    _internal_mutable_psi_hat_ij()->::safeheron::proto::PailAffGroupEleRangeProof_V2::MergeFrom(from._internal_psi_hat_ij());
  }
  if (from.has_psi_prime_ij()) {
    _internal_mutable_psi_prime_ij()->::safeheron::proto::PailEncGroupEleRangeProof::MergeFrom(from._internal_psi_prime_ij());
  }
}

void Round1P2PMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round1P2PMessage::CopyFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round1P2PMessage::IsInitialized() const {
  return true;
}

void Round1P2PMessage::InternalSwap(Round1P2PMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  d_ij_.Swap(&other->d_ij_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  f_ij_.Swap(&other->f_ij_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  d_hat_ij_.Swap(&other->d_hat_ij_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  f_hat_ij_.Swap(&other->f_hat_ij_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round1P2PMessage, psi_prime_ij_)
      + sizeof(Round1P2PMessage::psi_prime_ij_)
      - PROTOBUF_FIELD_OFFSET(Round1P2PMessage, g_gamma_)>(
          reinterpret_cast<char*>(&g_gamma_),
          reinterpret_cast<char*>(&other->g_gamma_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round1P2PMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round2P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& var_delta(const Round2P2PMessage* msg);
  static const ::safeheron::proto::PailEncGroupEleRangeProof& psi_double_prime_ij(const Round2P2PMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round2P2PMessage::_Internal::var_delta(const Round2P2PMessage* msg) {
  return *msg->var_delta_;
}
const ::safeheron::proto::PailEncGroupEleRangeProof&
Round2P2PMessage::_Internal::psi_double_prime_ij(const Round2P2PMessage* msg) {
  return *msg->psi_double_prime_ij_;
}
void Round2P2PMessage::clear_var_delta() {
  if (GetArena() == nullptr && var_delta_ != nullptr) {
    delete var_delta_;
  }
  var_delta_ = nullptr;
}
void Round2P2PMessage::clear_psi_double_prime_ij() {
  if (GetArena() == nullptr && psi_double_prime_ij_ != nullptr) {
    delete psi_double_prime_ij_;
  }
  psi_double_prime_ij_ = nullptr;
}
Round2P2PMessage::Round2P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
}
Round2P2PMessage::Round2P2PMessage(const Round2P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ssid(), 
      GetArena());
  }
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index().empty()) {
    index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index(), 
      GetArena());
  }
  delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delta().empty()) {
    delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delta(), 
      GetArena());
  }
  if (from._internal_has_var_delta()) {
    var_delta_ = new ::safeheron::proto::CurvePoint(*from.var_delta_);
  } else {
    var_delta_ = nullptr;
  }
  if (from._internal_has_psi_double_prime_ij()) {
    psi_double_prime_ij_ = new ::safeheron::proto::PailEncGroupEleRangeProof(*from.psi_double_prime_ij_);
  } else {
    psi_double_prime_ij_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
}

void Round2P2PMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round2P2PMessage_cmp_2fsign_2eproto.base);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&var_delta_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&psi_double_prime_ij_) -
      reinterpret_cast<char*>(&var_delta_)) + sizeof(psi_double_prime_ij_));
}

Round2P2PMessage::~Round2P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round2P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete var_delta_;
  if (this != internal_default_instance()) delete psi_double_prime_ij_;
}

void Round2P2PMessage::ArenaDtor(void* object) {
  Round2P2PMessage* _this = reinterpret_cast< Round2P2PMessage* >(object);
  (void)_this;
}
void Round2P2PMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round2P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round2P2PMessage& Round2P2PMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round2P2PMessage_cmp_2fsign_2eproto.base);
  return *internal_default_instance();
}


void Round2P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty();
  index_.ClearToEmpty();
  delta_.ClearToEmpty();
  if (GetArena() == nullptr && var_delta_ != nullptr) {
    delete var_delta_;
  }
  var_delta_ = nullptr;
  if (GetArena() == nullptr && psi_double_prime_ij_ != nullptr) {
    delete psi_double_prime_ij_;
  }
  psi_double_prime_ij_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round2P2PMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string delta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint var_delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_var_delta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.PailEncGroupEleRangeProof psi_double_prime_ij = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_psi_double_prime_ij(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round2P2PMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string index = 2;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // string delta = 3;
  if (this->delta().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delta().data(), static_cast<int>(this->_internal_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.delta");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_delta(), target);
  }

  // .safeheron.proto.CurvePoint var_delta = 4;
  if (this->has_var_delta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::var_delta(this), target, stream);
  }

  // .safeheron.proto.PailEncGroupEleRangeProof psi_double_prime_ij = 5;
  if (this->has_psi_double_prime_ij()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::psi_double_prime_ij(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  return target;
}

size_t Round2P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string index = 2;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string delta = 3;
  if (this->delta().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delta());
  }

  // .safeheron.proto.CurvePoint var_delta = 4;
  if (this->has_var_delta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *var_delta_);
  }

  // .safeheron.proto.PailEncGroupEleRangeProof psi_double_prime_ij = 5;
  if (this->has_psi_double_prime_ij()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *psi_double_prime_ij_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round2P2PMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round2P2PMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round2P2PMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
    MergeFrom(*source);
  }
}

void Round2P2PMessage::MergeFrom(const Round2P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (from.index().size() > 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.delta().size() > 0) {
    _internal_set_delta(from._internal_delta());
  }
  if (from.has_var_delta()) {
    _internal_mutable_var_delta()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_var_delta());
  }
  if (from.has_psi_double_prime_ij()) {
    _internal_mutable_psi_double_prime_ij()->::safeheron::proto::PailEncGroupEleRangeProof::MergeFrom(from._internal_psi_double_prime_ij());
  }
}

void Round2P2PMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round2P2PMessage::CopyFrom(const Round2P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round2P2PMessage::IsInitialized() const {
  return true;
}

void Round2P2PMessage::InternalSwap(Round2P2PMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  delta_.Swap(&other->delta_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round2P2PMessage, psi_double_prime_ij_)
      + sizeof(Round2P2PMessage::psi_double_prime_ij_)
      - PROTOBUF_FIELD_OFFSET(Round2P2PMessage, var_delta_)>(
          reinterpret_cast<char*>(&var_delta_),
          reinterpret_cast<char*>(&other->var_delta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round2P2PMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round3P2PMessage::_Internal {
 public:
};

Round3P2PMessage::Round3P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
}
Round3P2PMessage::Round3P2PMessage(const Round3P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ssid(), 
      GetArena());
  }
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index().empty()) {
    index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index(), 
      GetArena());
  }
  sigma_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sigma().empty()) {
    sigma_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sigma(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
}

void Round3P2PMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round3P2PMessage_cmp_2fsign_2eproto.base);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sigma_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Round3P2PMessage::~Round3P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round3P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sigma_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Round3P2PMessage::ArenaDtor(void* object) {
  Round3P2PMessage* _this = reinterpret_cast< Round3P2PMessage* >(object);
  (void)_this;
}
void Round3P2PMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round3P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round3P2PMessage& Round3P2PMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round3P2PMessage_cmp_2fsign_2eproto.base);
  return *internal_default_instance();
}


void Round3P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty();
  index_.ClearToEmpty();
  sigma_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round3P2PMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sigma = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sigma();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.sigma"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round3P2PMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string index = 2;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index(), target);
  }

  // string sigma = 3;
  if (this->sigma().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sigma().data(), static_cast<int>(this->_internal_sigma().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.sigma");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sigma(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  return target;
}

size_t Round3P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string index = 2;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string sigma = 3;
  if (this->sigma().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sigma());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round3P2PMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round3P2PMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round3P2PMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
    MergeFrom(*source);
  }
}

void Round3P2PMessage::MergeFrom(const Round3P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (from.index().size() > 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.sigma().size() > 0) {
    _internal_set_sigma(from._internal_sigma());
  }
}

void Round3P2PMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round3P2PMessage::CopyFrom(const Round3P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round3P2PMessage::IsInitialized() const {
  return true;
}

void Round3P2PMessage::InternalSwap(Round3P2PMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sigma_.Swap(&other->sigma_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Round3P2PMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sign
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
