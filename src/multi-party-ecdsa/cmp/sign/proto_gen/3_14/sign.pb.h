// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmp/sign.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cmp_2fsign_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cmp_2fsign_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "crypto-curve/proto_gen/curve_point.pb.switch.h"
#include "crypto-zkp/proto_gen/zkp.pb.switch.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cmp_2fsign_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cmp_2fsign_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cmp_2fsign_2eproto;
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace sign {
class Round0BCMessage;
class Round0BCMessageDefaultTypeInternal;
extern Round0BCMessageDefaultTypeInternal _Round0BCMessage_default_instance_;
class Round0P2PMessage;
class Round0P2PMessageDefaultTypeInternal;
extern Round0P2PMessageDefaultTypeInternal _Round0P2PMessage_default_instance_;
class Round1P2PMessage;
class Round1P2PMessageDefaultTypeInternal;
extern Round1P2PMessageDefaultTypeInternal _Round1P2PMessage_default_instance_;
class Round2P2PMessage;
class Round2P2PMessageDefaultTypeInternal;
extern Round2P2PMessageDefaultTypeInternal _Round2P2PMessage_default_instance_;
class Round3P2PMessage;
class Round3P2PMessageDefaultTypeInternal;
extern Round3P2PMessageDefaultTypeInternal _Round3P2PMessage_default_instance_;
}  // namespace sign
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0BCMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::sign::Round0P2PMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::sign::Round1P2PMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::sign::Round2P2PMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::cmp::sign::Round3P2PMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace cmp {
namespace sign {

// ===================================================================

class Round0BCMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage) */ {
 public:
  inline Round0BCMessage() : Round0BCMessage(nullptr) {}
  virtual ~Round0BCMessage();

  Round0BCMessage(const Round0BCMessage& from);
  Round0BCMessage(Round0BCMessage&& from) noexcept
    : Round0BCMessage() {
    *this = ::std::move(from);
  }

  inline Round0BCMessage& operator=(const Round0BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round0BCMessage& operator=(Round0BCMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round0BCMessage& default_instance();

  static inline const Round0BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round0BCMessage*>(
               &_Round0BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Round0BCMessage& a, Round0BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round0BCMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round0BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round0BCMessage* New() const final {
    return CreateMaybeMessage<Round0BCMessage>(nullptr);
  }

  Round0BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round0BCMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round0BCMessage& from);
  void MergeFrom(const Round0BCMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round0BCMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage";
  }
  protected:
  explicit Round0BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmp_2fsign_2eproto);
    return ::descriptor_table_cmp_2fsign_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kIndexFieldNumber = 2,
    kKFieldNumber = 3,
    kGFieldNumber = 4,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string K = 3;
  void clear_k();
  const std::string& k() const;
  void set_k(const std::string& value);
  void set_k(std::string&& value);
  void set_k(const char* value);
  void set_k(const char* value, size_t size);
  std::string* mutable_k();
  std::string* release_k();
  void set_allocated_k(std::string* k);
  private:
  const std::string& _internal_k() const;
  void _internal_set_k(const std::string& value);
  std::string* _internal_mutable_k();
  public:

  // string G = 4;
  void clear_g();
  const std::string& g() const;
  void set_g(const std::string& value);
  void set_g(std::string&& value);
  void set_g(const char* value);
  void set_g(const char* value, size_t size);
  std::string* mutable_g();
  std::string* release_g();
  void set_allocated_g(std::string* g);
  private:
  const std::string& _internal_g() const;
  void _internal_set_g(const std::string& value);
  std::string* _internal_mutable_g();
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr g_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fsign_2eproto;
};
// -------------------------------------------------------------------

class Round0P2PMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage) */ {
 public:
  inline Round0P2PMessage() : Round0P2PMessage(nullptr) {}
  virtual ~Round0P2PMessage();

  Round0P2PMessage(const Round0P2PMessage& from);
  Round0P2PMessage(Round0P2PMessage&& from) noexcept
    : Round0P2PMessage() {
    *this = ::std::move(from);
  }

  inline Round0P2PMessage& operator=(const Round0P2PMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round0P2PMessage& operator=(Round0P2PMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round0P2PMessage& default_instance();

  static inline const Round0P2PMessage* internal_default_instance() {
    return reinterpret_cast<const Round0P2PMessage*>(
               &_Round0P2PMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Round0P2PMessage& a, Round0P2PMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round0P2PMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round0P2PMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round0P2PMessage* New() const final {
    return CreateMaybeMessage<Round0P2PMessage>(nullptr);
  }

  Round0P2PMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round0P2PMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round0P2PMessage& from);
  void MergeFrom(const Round0P2PMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round0P2PMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage";
  }
  protected:
  explicit Round0P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmp_2fsign_2eproto);
    return ::descriptor_table_cmp_2fsign_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kIndexFieldNumber = 2,
    kPsi0IjFieldNumber = 5,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // .safeheron.proto.PailEncRangeProof_V2 psi_0_ij = 5;
  bool has_psi_0_ij() const;
  private:
  bool _internal_has_psi_0_ij() const;
  public:
  void clear_psi_0_ij();
  const ::safeheron::proto::PailEncRangeProof_V2& psi_0_ij() const;
  ::safeheron::proto::PailEncRangeProof_V2* release_psi_0_ij();
  ::safeheron::proto::PailEncRangeProof_V2* mutable_psi_0_ij();
  void set_allocated_psi_0_ij(::safeheron::proto::PailEncRangeProof_V2* psi_0_ij);
  private:
  const ::safeheron::proto::PailEncRangeProof_V2& _internal_psi_0_ij() const;
  ::safeheron::proto::PailEncRangeProof_V2* _internal_mutable_psi_0_ij();
  public:
  void unsafe_arena_set_allocated_psi_0_ij(
      ::safeheron::proto::PailEncRangeProof_V2* psi_0_ij);
  ::safeheron::proto::PailEncRangeProof_V2* unsafe_arena_release_psi_0_ij();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::safeheron::proto::PailEncRangeProof_V2* psi_0_ij_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fsign_2eproto;
};
// -------------------------------------------------------------------

class Round1P2PMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage) */ {
 public:
  inline Round1P2PMessage() : Round1P2PMessage(nullptr) {}
  virtual ~Round1P2PMessage();

  Round1P2PMessage(const Round1P2PMessage& from);
  Round1P2PMessage(Round1P2PMessage&& from) noexcept
    : Round1P2PMessage() {
    *this = ::std::move(from);
  }

  inline Round1P2PMessage& operator=(const Round1P2PMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round1P2PMessage& operator=(Round1P2PMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round1P2PMessage& default_instance();

  static inline const Round1P2PMessage* internal_default_instance() {
    return reinterpret_cast<const Round1P2PMessage*>(
               &_Round1P2PMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Round1P2PMessage& a, Round1P2PMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round1P2PMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round1P2PMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round1P2PMessage* New() const final {
    return CreateMaybeMessage<Round1P2PMessage>(nullptr);
  }

  Round1P2PMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round1P2PMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round1P2PMessage& from);
  void MergeFrom(const Round1P2PMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round1P2PMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage";
  }
  protected:
  explicit Round1P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmp_2fsign_2eproto);
    return ::descriptor_table_cmp_2fsign_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kIndexFieldNumber = 2,
    kDIjFieldNumber = 4,
    kFIjFieldNumber = 5,
    kDHatIjFieldNumber = 6,
    kFHatIjFieldNumber = 7,
    kGGammaFieldNumber = 3,
    kPsiIjFieldNumber = 8,
    kPsiHatIjFieldNumber = 9,
    kPsiPrimeIjFieldNumber = 10,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string D_ij = 4;
  void clear_d_ij();
  const std::string& d_ij() const;
  void set_d_ij(const std::string& value);
  void set_d_ij(std::string&& value);
  void set_d_ij(const char* value);
  void set_d_ij(const char* value, size_t size);
  std::string* mutable_d_ij();
  std::string* release_d_ij();
  void set_allocated_d_ij(std::string* d_ij);
  private:
  const std::string& _internal_d_ij() const;
  void _internal_set_d_ij(const std::string& value);
  std::string* _internal_mutable_d_ij();
  public:

  // string F_ij = 5;
  void clear_f_ij();
  const std::string& f_ij() const;
  void set_f_ij(const std::string& value);
  void set_f_ij(std::string&& value);
  void set_f_ij(const char* value);
  void set_f_ij(const char* value, size_t size);
  std::string* mutable_f_ij();
  std::string* release_f_ij();
  void set_allocated_f_ij(std::string* f_ij);
  private:
  const std::string& _internal_f_ij() const;
  void _internal_set_f_ij(const std::string& value);
  std::string* _internal_mutable_f_ij();
  public:

  // string D_hat_ij = 6;
  void clear_d_hat_ij();
  const std::string& d_hat_ij() const;
  void set_d_hat_ij(const std::string& value);
  void set_d_hat_ij(std::string&& value);
  void set_d_hat_ij(const char* value);
  void set_d_hat_ij(const char* value, size_t size);
  std::string* mutable_d_hat_ij();
  std::string* release_d_hat_ij();
  void set_allocated_d_hat_ij(std::string* d_hat_ij);
  private:
  const std::string& _internal_d_hat_ij() const;
  void _internal_set_d_hat_ij(const std::string& value);
  std::string* _internal_mutable_d_hat_ij();
  public:

  // string F_hat_ij = 7;
  void clear_f_hat_ij();
  const std::string& f_hat_ij() const;
  void set_f_hat_ij(const std::string& value);
  void set_f_hat_ij(std::string&& value);
  void set_f_hat_ij(const char* value);
  void set_f_hat_ij(const char* value, size_t size);
  std::string* mutable_f_hat_ij();
  std::string* release_f_hat_ij();
  void set_allocated_f_hat_ij(std::string* f_hat_ij);
  private:
  const std::string& _internal_f_hat_ij() const;
  void _internal_set_f_hat_ij(const std::string& value);
  std::string* _internal_mutable_f_hat_ij();
  public:

  // .safeheron.proto.CurvePoint g_gamma = 3;
  bool has_g_gamma() const;
  private:
  bool _internal_has_g_gamma() const;
  public:
  void clear_g_gamma();
  const ::safeheron::proto::CurvePoint& g_gamma() const;
  ::safeheron::proto::CurvePoint* release_g_gamma();
  ::safeheron::proto::CurvePoint* mutable_g_gamma();
  void set_allocated_g_gamma(::safeheron::proto::CurvePoint* g_gamma);
  private:
  const ::safeheron::proto::CurvePoint& _internal_g_gamma() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_g_gamma();
  public:
  void unsafe_arena_set_allocated_g_gamma(
      ::safeheron::proto::CurvePoint* g_gamma);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_g_gamma();

  // .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_ij = 8;
  bool has_psi_ij() const;
  private:
  bool _internal_has_psi_ij() const;
  public:
  void clear_psi_ij();
  const ::safeheron::proto::PailAffGroupEleRangeProof_V2& psi_ij() const;
  ::safeheron::proto::PailAffGroupEleRangeProof_V2* release_psi_ij();
  ::safeheron::proto::PailAffGroupEleRangeProof_V2* mutable_psi_ij();
  void set_allocated_psi_ij(::safeheron::proto::PailAffGroupEleRangeProof_V2* psi_ij);
  private:
  const ::safeheron::proto::PailAffGroupEleRangeProof_V2& _internal_psi_ij() const;
  ::safeheron::proto::PailAffGroupEleRangeProof_V2* _internal_mutable_psi_ij();
  public:
  void unsafe_arena_set_allocated_psi_ij(
      ::safeheron::proto::PailAffGroupEleRangeProof_V2* psi_ij);
  ::safeheron::proto::PailAffGroupEleRangeProof_V2* unsafe_arena_release_psi_ij();

  // .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_hat_ij = 9;
  bool has_psi_hat_ij() const;
  private:
  bool _internal_has_psi_hat_ij() const;
  public:
  void clear_psi_hat_ij();
  const ::safeheron::proto::PailAffGroupEleRangeProof_V2& psi_hat_ij() const;
  ::safeheron::proto::PailAffGroupEleRangeProof_V2* release_psi_hat_ij();
  ::safeheron::proto::PailAffGroupEleRangeProof_V2* mutable_psi_hat_ij();
  void set_allocated_psi_hat_ij(::safeheron::proto::PailAffGroupEleRangeProof_V2* psi_hat_ij);
  private:
  const ::safeheron::proto::PailAffGroupEleRangeProof_V2& _internal_psi_hat_ij() const;
  ::safeheron::proto::PailAffGroupEleRangeProof_V2* _internal_mutable_psi_hat_ij();
  public:
  void unsafe_arena_set_allocated_psi_hat_ij(
      ::safeheron::proto::PailAffGroupEleRangeProof_V2* psi_hat_ij);
  ::safeheron::proto::PailAffGroupEleRangeProof_V2* unsafe_arena_release_psi_hat_ij();

  // .safeheron.proto.PailEncGroupEleRangeProof psi_prime_ij = 10;
  bool has_psi_prime_ij() const;
  private:
  bool _internal_has_psi_prime_ij() const;
  public:
  void clear_psi_prime_ij();
  const ::safeheron::proto::PailEncGroupEleRangeProof& psi_prime_ij() const;
  ::safeheron::proto::PailEncGroupEleRangeProof* release_psi_prime_ij();
  ::safeheron::proto::PailEncGroupEleRangeProof* mutable_psi_prime_ij();
  void set_allocated_psi_prime_ij(::safeheron::proto::PailEncGroupEleRangeProof* psi_prime_ij);
  private:
  const ::safeheron::proto::PailEncGroupEleRangeProof& _internal_psi_prime_ij() const;
  ::safeheron::proto::PailEncGroupEleRangeProof* _internal_mutable_psi_prime_ij();
  public:
  void unsafe_arena_set_allocated_psi_prime_ij(
      ::safeheron::proto::PailEncGroupEleRangeProof* psi_prime_ij);
  ::safeheron::proto::PailEncGroupEleRangeProof* unsafe_arena_release_psi_prime_ij();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_ij_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f_ij_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_hat_ij_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f_hat_ij_;
  ::safeheron::proto::CurvePoint* g_gamma_;
  ::safeheron::proto::PailAffGroupEleRangeProof_V2* psi_ij_;
  ::safeheron::proto::PailAffGroupEleRangeProof_V2* psi_hat_ij_;
  ::safeheron::proto::PailEncGroupEleRangeProof* psi_prime_ij_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fsign_2eproto;
};
// -------------------------------------------------------------------

class Round2P2PMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage) */ {
 public:
  inline Round2P2PMessage() : Round2P2PMessage(nullptr) {}
  virtual ~Round2P2PMessage();

  Round2P2PMessage(const Round2P2PMessage& from);
  Round2P2PMessage(Round2P2PMessage&& from) noexcept
    : Round2P2PMessage() {
    *this = ::std::move(from);
  }

  inline Round2P2PMessage& operator=(const Round2P2PMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round2P2PMessage& operator=(Round2P2PMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round2P2PMessage& default_instance();

  static inline const Round2P2PMessage* internal_default_instance() {
    return reinterpret_cast<const Round2P2PMessage*>(
               &_Round2P2PMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Round2P2PMessage& a, Round2P2PMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round2P2PMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round2P2PMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round2P2PMessage* New() const final {
    return CreateMaybeMessage<Round2P2PMessage>(nullptr);
  }

  Round2P2PMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round2P2PMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round2P2PMessage& from);
  void MergeFrom(const Round2P2PMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round2P2PMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage";
  }
  protected:
  explicit Round2P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmp_2fsign_2eproto);
    return ::descriptor_table_cmp_2fsign_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kIndexFieldNumber = 2,
    kDeltaFieldNumber = 3,
    kVarDeltaFieldNumber = 4,
    kPsiDoublePrimeIjFieldNumber = 5,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string delta = 3;
  void clear_delta();
  const std::string& delta() const;
  void set_delta(const std::string& value);
  void set_delta(std::string&& value);
  void set_delta(const char* value);
  void set_delta(const char* value, size_t size);
  std::string* mutable_delta();
  std::string* release_delta();
  void set_allocated_delta(std::string* delta);
  private:
  const std::string& _internal_delta() const;
  void _internal_set_delta(const std::string& value);
  std::string* _internal_mutable_delta();
  public:

  // .safeheron.proto.CurvePoint var_delta = 4;
  bool has_var_delta() const;
  private:
  bool _internal_has_var_delta() const;
  public:
  void clear_var_delta();
  const ::safeheron::proto::CurvePoint& var_delta() const;
  ::safeheron::proto::CurvePoint* release_var_delta();
  ::safeheron::proto::CurvePoint* mutable_var_delta();
  void set_allocated_var_delta(::safeheron::proto::CurvePoint* var_delta);
  private:
  const ::safeheron::proto::CurvePoint& _internal_var_delta() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_var_delta();
  public:
  void unsafe_arena_set_allocated_var_delta(
      ::safeheron::proto::CurvePoint* var_delta);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_var_delta();

  // .safeheron.proto.PailEncGroupEleRangeProof psi_double_prime_ij = 5;
  bool has_psi_double_prime_ij() const;
  private:
  bool _internal_has_psi_double_prime_ij() const;
  public:
  void clear_psi_double_prime_ij();
  const ::safeheron::proto::PailEncGroupEleRangeProof& psi_double_prime_ij() const;
  ::safeheron::proto::PailEncGroupEleRangeProof* release_psi_double_prime_ij();
  ::safeheron::proto::PailEncGroupEleRangeProof* mutable_psi_double_prime_ij();
  void set_allocated_psi_double_prime_ij(::safeheron::proto::PailEncGroupEleRangeProof* psi_double_prime_ij);
  private:
  const ::safeheron::proto::PailEncGroupEleRangeProof& _internal_psi_double_prime_ij() const;
  ::safeheron::proto::PailEncGroupEleRangeProof* _internal_mutable_psi_double_prime_ij();
  public:
  void unsafe_arena_set_allocated_psi_double_prime_ij(
      ::safeheron::proto::PailEncGroupEleRangeProof* psi_double_prime_ij);
  ::safeheron::proto::PailEncGroupEleRangeProof* unsafe_arena_release_psi_double_prime_ij();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delta_;
  ::safeheron::proto::CurvePoint* var_delta_;
  ::safeheron::proto::PailEncGroupEleRangeProof* psi_double_prime_ij_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fsign_2eproto;
};
// -------------------------------------------------------------------

class Round3P2PMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage) */ {
 public:
  inline Round3P2PMessage() : Round3P2PMessage(nullptr) {}
  virtual ~Round3P2PMessage();

  Round3P2PMessage(const Round3P2PMessage& from);
  Round3P2PMessage(Round3P2PMessage&& from) noexcept
    : Round3P2PMessage() {
    *this = ::std::move(from);
  }

  inline Round3P2PMessage& operator=(const Round3P2PMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round3P2PMessage& operator=(Round3P2PMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round3P2PMessage& default_instance();

  static inline const Round3P2PMessage* internal_default_instance() {
    return reinterpret_cast<const Round3P2PMessage*>(
               &_Round3P2PMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Round3P2PMessage& a, Round3P2PMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round3P2PMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round3P2PMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round3P2PMessage* New() const final {
    return CreateMaybeMessage<Round3P2PMessage>(nullptr);
  }

  Round3P2PMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round3P2PMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round3P2PMessage& from);
  void MergeFrom(const Round3P2PMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round3P2PMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage";
  }
  protected:
  explicit Round3P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmp_2fsign_2eproto);
    return ::descriptor_table_cmp_2fsign_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kIndexFieldNumber = 2,
    kSigmaFieldNumber = 3,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string sigma = 3;
  void clear_sigma();
  const std::string& sigma() const;
  void set_sigma(const std::string& value);
  void set_sigma(std::string&& value);
  void set_sigma(const char* value);
  void set_sigma(const char* value, size_t size);
  std::string* mutable_sigma();
  std::string* release_sigma();
  void set_allocated_sigma(std::string* sigma);
  private:
  const std::string& _internal_sigma() const;
  void _internal_set_sigma(const std::string& value);
  std::string* _internal_mutable_sigma();
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sigma_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmp_2fsign_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Round0BCMessage

// string ssid = 1;
inline void Round0BCMessage::clear_ssid() {
  ssid_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::ssid() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.ssid)
  return _internal_ssid();
}
inline void Round0BCMessage::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.ssid)
}
inline std::string* Round0BCMessage::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& Round0BCMessage::_internal_ssid() const {
  return ssid_.Get();
}
inline void Round0BCMessage::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0BCMessage::set_ssid(std::string&& value) {
  
  ssid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.ssid)
}
inline void Round0BCMessage::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.ssid)
}
inline void Round0BCMessage::set_ssid(const char* value,
    size_t size) {
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.ssid)
}
inline std::string* Round0BCMessage::_internal_mutable_ssid() {
  
  return ssid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0BCMessage::release_ssid() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.ssid)
  return ssid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0BCMessage::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.ssid)
}

// string index = 2;
inline void Round0BCMessage::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.index)
  return _internal_index();
}
inline void Round0BCMessage::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.index)
}
inline std::string* Round0BCMessage::mutable_index() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.index)
  return _internal_mutable_index();
}
inline const std::string& Round0BCMessage::_internal_index() const {
  return index_.Get();
}
inline void Round0BCMessage::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0BCMessage::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.index)
}
inline void Round0BCMessage::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.index)
}
inline void Round0BCMessage::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.index)
}
inline std::string* Round0BCMessage::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0BCMessage::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0BCMessage::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.index)
}

// string K = 3;
inline void Round0BCMessage::clear_k() {
  k_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::k() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.K)
  return _internal_k();
}
inline void Round0BCMessage::set_k(const std::string& value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.K)
}
inline std::string* Round0BCMessage::mutable_k() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.K)
  return _internal_mutable_k();
}
inline const std::string& Round0BCMessage::_internal_k() const {
  return k_.Get();
}
inline void Round0BCMessage::_internal_set_k(const std::string& value) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0BCMessage::set_k(std::string&& value) {
  
  k_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.K)
}
inline void Round0BCMessage::set_k(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.K)
}
inline void Round0BCMessage::set_k(const char* value,
    size_t size) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.K)
}
inline std::string* Round0BCMessage::_internal_mutable_k() {
  
  return k_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0BCMessage::release_k() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.K)
  return k_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0BCMessage::set_allocated_k(std::string* k) {
  if (k != nullptr) {
    
  } else {
    
  }
  k_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.K)
}

// string G = 4;
inline void Round0BCMessage::clear_g() {
  g_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::g() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.G)
  return _internal_g();
}
inline void Round0BCMessage::set_g(const std::string& value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.G)
}
inline std::string* Round0BCMessage::mutable_g() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.G)
  return _internal_mutable_g();
}
inline const std::string& Round0BCMessage::_internal_g() const {
  return g_.Get();
}
inline void Round0BCMessage::_internal_set_g(const std::string& value) {
  
  g_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0BCMessage::set_g(std::string&& value) {
  
  g_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.G)
}
inline void Round0BCMessage::set_g(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  g_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.G)
}
inline void Round0BCMessage::set_g(const char* value,
    size_t size) {
  
  g_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.G)
}
inline std::string* Round0BCMessage::_internal_mutable_g() {
  
  return g_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0BCMessage::release_g() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.G)
  return g_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0BCMessage::set_allocated_g(std::string* g) {
  if (g != nullptr) {
    
  } else {
    
  }
  g_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), g,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0BCMessage.G)
}

// -------------------------------------------------------------------

// Round0P2PMessage

// string ssid = 1;
inline void Round0P2PMessage::clear_ssid() {
  ssid_.ClearToEmpty();
}
inline const std::string& Round0P2PMessage::ssid() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.ssid)
  return _internal_ssid();
}
inline void Round0P2PMessage::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.ssid)
}
inline std::string* Round0P2PMessage::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& Round0P2PMessage::_internal_ssid() const {
  return ssid_.Get();
}
inline void Round0P2PMessage::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0P2PMessage::set_ssid(std::string&& value) {
  
  ssid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.ssid)
}
inline void Round0P2PMessage::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.ssid)
}
inline void Round0P2PMessage::set_ssid(const char* value,
    size_t size) {
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.ssid)
}
inline std::string* Round0P2PMessage::_internal_mutable_ssid() {
  
  return ssid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0P2PMessage::release_ssid() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.ssid)
  return ssid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0P2PMessage::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.ssid)
}

// string index = 2;
inline void Round0P2PMessage::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Round0P2PMessage::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.index)
  return _internal_index();
}
inline void Round0P2PMessage::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.index)
}
inline std::string* Round0P2PMessage::mutable_index() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.index)
  return _internal_mutable_index();
}
inline const std::string& Round0P2PMessage::_internal_index() const {
  return index_.Get();
}
inline void Round0P2PMessage::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0P2PMessage::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.index)
}
inline void Round0P2PMessage::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.index)
}
inline void Round0P2PMessage::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.index)
}
inline std::string* Round0P2PMessage::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0P2PMessage::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0P2PMessage::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.index)
}

// .safeheron.proto.PailEncRangeProof_V2 psi_0_ij = 5;
inline bool Round0P2PMessage::_internal_has_psi_0_ij() const {
  return this != internal_default_instance() && psi_0_ij_ != nullptr;
}
inline bool Round0P2PMessage::has_psi_0_ij() const {
  return _internal_has_psi_0_ij();
}
inline const ::safeheron::proto::PailEncRangeProof_V2& Round0P2PMessage::_internal_psi_0_ij() const {
  const ::safeheron::proto::PailEncRangeProof_V2* p = psi_0_ij_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::PailEncRangeProof_V2&>(
      ::safeheron::proto::_PailEncRangeProof_V2_default_instance_);
}
inline const ::safeheron::proto::PailEncRangeProof_V2& Round0P2PMessage::psi_0_ij() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.psi_0_ij)
  return _internal_psi_0_ij();
}
inline void Round0P2PMessage::unsafe_arena_set_allocated_psi_0_ij(
    ::safeheron::proto::PailEncRangeProof_V2* psi_0_ij) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_0_ij_);
  }
  psi_0_ij_ = psi_0_ij;
  if (psi_0_ij) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.psi_0_ij)
}
inline ::safeheron::proto::PailEncRangeProof_V2* Round0P2PMessage::release_psi_0_ij() {
  
  ::safeheron::proto::PailEncRangeProof_V2* temp = psi_0_ij_;
  psi_0_ij_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::PailEncRangeProof_V2* Round0P2PMessage::unsafe_arena_release_psi_0_ij() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.psi_0_ij)
  
  ::safeheron::proto::PailEncRangeProof_V2* temp = psi_0_ij_;
  psi_0_ij_ = nullptr;
  return temp;
}
inline ::safeheron::proto::PailEncRangeProof_V2* Round0P2PMessage::_internal_mutable_psi_0_ij() {
  
  if (psi_0_ij_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::PailEncRangeProof_V2>(GetArena());
    psi_0_ij_ = p;
  }
  return psi_0_ij_;
}
inline ::safeheron::proto::PailEncRangeProof_V2* Round0P2PMessage::mutable_psi_0_ij() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.psi_0_ij)
  return _internal_mutable_psi_0_ij();
}
inline void Round0P2PMessage::set_allocated_psi_0_ij(::safeheron::proto::PailEncRangeProof_V2* psi_0_ij) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_0_ij_);
  }
  if (psi_0_ij) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_0_ij)->GetArena();
    if (message_arena != submessage_arena) {
      psi_0_ij = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psi_0_ij, submessage_arena);
    }
    
  } else {
    
  }
  psi_0_ij_ = psi_0_ij;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round0P2PMessage.psi_0_ij)
}

// -------------------------------------------------------------------

// Round1P2PMessage

// string ssid = 1;
inline void Round1P2PMessage::clear_ssid() {
  ssid_.ClearToEmpty();
}
inline const std::string& Round1P2PMessage::ssid() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.ssid)
  return _internal_ssid();
}
inline void Round1P2PMessage::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.ssid)
}
inline std::string* Round1P2PMessage::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& Round1P2PMessage::_internal_ssid() const {
  return ssid_.Get();
}
inline void Round1P2PMessage::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1P2PMessage::set_ssid(std::string&& value) {
  
  ssid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.ssid)
}
inline void Round1P2PMessage::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.ssid)
}
inline void Round1P2PMessage::set_ssid(const char* value,
    size_t size) {
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.ssid)
}
inline std::string* Round1P2PMessage::_internal_mutable_ssid() {
  
  return ssid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1P2PMessage::release_ssid() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.ssid)
  return ssid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1P2PMessage::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.ssid)
}

// string index = 2;
inline void Round1P2PMessage::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Round1P2PMessage::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.index)
  return _internal_index();
}
inline void Round1P2PMessage::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.index)
}
inline std::string* Round1P2PMessage::mutable_index() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.index)
  return _internal_mutable_index();
}
inline const std::string& Round1P2PMessage::_internal_index() const {
  return index_.Get();
}
inline void Round1P2PMessage::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1P2PMessage::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.index)
}
inline void Round1P2PMessage::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.index)
}
inline void Round1P2PMessage::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.index)
}
inline std::string* Round1P2PMessage::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1P2PMessage::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1P2PMessage::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.index)
}

// .safeheron.proto.CurvePoint g_gamma = 3;
inline bool Round1P2PMessage::_internal_has_g_gamma() const {
  return this != internal_default_instance() && g_gamma_ != nullptr;
}
inline bool Round1P2PMessage::has_g_gamma() const {
  return _internal_has_g_gamma();
}
inline const ::safeheron::proto::CurvePoint& Round1P2PMessage::_internal_g_gamma() const {
  const ::safeheron::proto::CurvePoint* p = g_gamma_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round1P2PMessage::g_gamma() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.g_gamma)
  return _internal_g_gamma();
}
inline void Round1P2PMessage::unsafe_arena_set_allocated_g_gamma(
    ::safeheron::proto::CurvePoint* g_gamma) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_gamma_);
  }
  g_gamma_ = g_gamma;
  if (g_gamma) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.g_gamma)
}
inline ::safeheron::proto::CurvePoint* Round1P2PMessage::release_g_gamma() {
  
  ::safeheron::proto::CurvePoint* temp = g_gamma_;
  g_gamma_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1P2PMessage::unsafe_arena_release_g_gamma() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.g_gamma)
  
  ::safeheron::proto::CurvePoint* temp = g_gamma_;
  g_gamma_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round1P2PMessage::_internal_mutable_g_gamma() {
  
  if (g_gamma_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArena());
    g_gamma_ = p;
  }
  return g_gamma_;
}
inline ::safeheron::proto::CurvePoint* Round1P2PMessage::mutable_g_gamma() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.g_gamma)
  return _internal_mutable_g_gamma();
}
inline void Round1P2PMessage::set_allocated_g_gamma(::safeheron::proto::CurvePoint* g_gamma) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_gamma_);
  }
  if (g_gamma) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_gamma)->GetArena();
    if (message_arena != submessage_arena) {
      g_gamma = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g_gamma, submessage_arena);
    }
    
  } else {
    
  }
  g_gamma_ = g_gamma;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.g_gamma)
}

// string D_ij = 4;
inline void Round1P2PMessage::clear_d_ij() {
  d_ij_.ClearToEmpty();
}
inline const std::string& Round1P2PMessage::d_ij() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_ij)
  return _internal_d_ij();
}
inline void Round1P2PMessage::set_d_ij(const std::string& value) {
  _internal_set_d_ij(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_ij)
}
inline std::string* Round1P2PMessage::mutable_d_ij() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_ij)
  return _internal_mutable_d_ij();
}
inline const std::string& Round1P2PMessage::_internal_d_ij() const {
  return d_ij_.Get();
}
inline void Round1P2PMessage::_internal_set_d_ij(const std::string& value) {
  
  d_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1P2PMessage::set_d_ij(std::string&& value) {
  
  d_ij_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_ij)
}
inline void Round1P2PMessage::set_d_ij(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  d_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_ij)
}
inline void Round1P2PMessage::set_d_ij(const char* value,
    size_t size) {
  
  d_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_ij)
}
inline std::string* Round1P2PMessage::_internal_mutable_d_ij() {
  
  return d_ij_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1P2PMessage::release_d_ij() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_ij)
  return d_ij_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1P2PMessage::set_allocated_d_ij(std::string* d_ij) {
  if (d_ij != nullptr) {
    
  } else {
    
  }
  d_ij_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d_ij,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_ij)
}

// string F_ij = 5;
inline void Round1P2PMessage::clear_f_ij() {
  f_ij_.ClearToEmpty();
}
inline const std::string& Round1P2PMessage::f_ij() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_ij)
  return _internal_f_ij();
}
inline void Round1P2PMessage::set_f_ij(const std::string& value) {
  _internal_set_f_ij(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_ij)
}
inline std::string* Round1P2PMessage::mutable_f_ij() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_ij)
  return _internal_mutable_f_ij();
}
inline const std::string& Round1P2PMessage::_internal_f_ij() const {
  return f_ij_.Get();
}
inline void Round1P2PMessage::_internal_set_f_ij(const std::string& value) {
  
  f_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1P2PMessage::set_f_ij(std::string&& value) {
  
  f_ij_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_ij)
}
inline void Round1P2PMessage::set_f_ij(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  f_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_ij)
}
inline void Round1P2PMessage::set_f_ij(const char* value,
    size_t size) {
  
  f_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_ij)
}
inline std::string* Round1P2PMessage::_internal_mutable_f_ij() {
  
  return f_ij_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1P2PMessage::release_f_ij() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_ij)
  return f_ij_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1P2PMessage::set_allocated_f_ij(std::string* f_ij) {
  if (f_ij != nullptr) {
    
  } else {
    
  }
  f_ij_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f_ij,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_ij)
}

// string D_hat_ij = 6;
inline void Round1P2PMessage::clear_d_hat_ij() {
  d_hat_ij_.ClearToEmpty();
}
inline const std::string& Round1P2PMessage::d_hat_ij() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_hat_ij)
  return _internal_d_hat_ij();
}
inline void Round1P2PMessage::set_d_hat_ij(const std::string& value) {
  _internal_set_d_hat_ij(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_hat_ij)
}
inline std::string* Round1P2PMessage::mutable_d_hat_ij() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_hat_ij)
  return _internal_mutable_d_hat_ij();
}
inline const std::string& Round1P2PMessage::_internal_d_hat_ij() const {
  return d_hat_ij_.Get();
}
inline void Round1P2PMessage::_internal_set_d_hat_ij(const std::string& value) {
  
  d_hat_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1P2PMessage::set_d_hat_ij(std::string&& value) {
  
  d_hat_ij_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_hat_ij)
}
inline void Round1P2PMessage::set_d_hat_ij(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  d_hat_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_hat_ij)
}
inline void Round1P2PMessage::set_d_hat_ij(const char* value,
    size_t size) {
  
  d_hat_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_hat_ij)
}
inline std::string* Round1P2PMessage::_internal_mutable_d_hat_ij() {
  
  return d_hat_ij_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1P2PMessage::release_d_hat_ij() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_hat_ij)
  return d_hat_ij_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1P2PMessage::set_allocated_d_hat_ij(std::string* d_hat_ij) {
  if (d_hat_ij != nullptr) {
    
  } else {
    
  }
  d_hat_ij_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d_hat_ij,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.D_hat_ij)
}

// string F_hat_ij = 7;
inline void Round1P2PMessage::clear_f_hat_ij() {
  f_hat_ij_.ClearToEmpty();
}
inline const std::string& Round1P2PMessage::f_hat_ij() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_hat_ij)
  return _internal_f_hat_ij();
}
inline void Round1P2PMessage::set_f_hat_ij(const std::string& value) {
  _internal_set_f_hat_ij(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_hat_ij)
}
inline std::string* Round1P2PMessage::mutable_f_hat_ij() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_hat_ij)
  return _internal_mutable_f_hat_ij();
}
inline const std::string& Round1P2PMessage::_internal_f_hat_ij() const {
  return f_hat_ij_.Get();
}
inline void Round1P2PMessage::_internal_set_f_hat_ij(const std::string& value) {
  
  f_hat_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1P2PMessage::set_f_hat_ij(std::string&& value) {
  
  f_hat_ij_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_hat_ij)
}
inline void Round1P2PMessage::set_f_hat_ij(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  f_hat_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_hat_ij)
}
inline void Round1P2PMessage::set_f_hat_ij(const char* value,
    size_t size) {
  
  f_hat_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_hat_ij)
}
inline std::string* Round1P2PMessage::_internal_mutable_f_hat_ij() {
  
  return f_hat_ij_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1P2PMessage::release_f_hat_ij() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_hat_ij)
  return f_hat_ij_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1P2PMessage::set_allocated_f_hat_ij(std::string* f_hat_ij) {
  if (f_hat_ij != nullptr) {
    
  } else {
    
  }
  f_hat_ij_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f_hat_ij,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.F_hat_ij)
}

// .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_ij = 8;
inline bool Round1P2PMessage::_internal_has_psi_ij() const {
  return this != internal_default_instance() && psi_ij_ != nullptr;
}
inline bool Round1P2PMessage::has_psi_ij() const {
  return _internal_has_psi_ij();
}
inline const ::safeheron::proto::PailAffGroupEleRangeProof_V2& Round1P2PMessage::_internal_psi_ij() const {
  const ::safeheron::proto::PailAffGroupEleRangeProof_V2* p = psi_ij_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::PailAffGroupEleRangeProof_V2&>(
      ::safeheron::proto::_PailAffGroupEleRangeProof_V2_default_instance_);
}
inline const ::safeheron::proto::PailAffGroupEleRangeProof_V2& Round1P2PMessage::psi_ij() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_ij)
  return _internal_psi_ij();
}
inline void Round1P2PMessage::unsafe_arena_set_allocated_psi_ij(
    ::safeheron::proto::PailAffGroupEleRangeProof_V2* psi_ij) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_ij_);
  }
  psi_ij_ = psi_ij;
  if (psi_ij) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_ij)
}
inline ::safeheron::proto::PailAffGroupEleRangeProof_V2* Round1P2PMessage::release_psi_ij() {
  
  ::safeheron::proto::PailAffGroupEleRangeProof_V2* temp = psi_ij_;
  psi_ij_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::PailAffGroupEleRangeProof_V2* Round1P2PMessage::unsafe_arena_release_psi_ij() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_ij)
  
  ::safeheron::proto::PailAffGroupEleRangeProof_V2* temp = psi_ij_;
  psi_ij_ = nullptr;
  return temp;
}
inline ::safeheron::proto::PailAffGroupEleRangeProof_V2* Round1P2PMessage::_internal_mutable_psi_ij() {
  
  if (psi_ij_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::PailAffGroupEleRangeProof_V2>(GetArena());
    psi_ij_ = p;
  }
  return psi_ij_;
}
inline ::safeheron::proto::PailAffGroupEleRangeProof_V2* Round1P2PMessage::mutable_psi_ij() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_ij)
  return _internal_mutable_psi_ij();
}
inline void Round1P2PMessage::set_allocated_psi_ij(::safeheron::proto::PailAffGroupEleRangeProof_V2* psi_ij) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_ij_);
  }
  if (psi_ij) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_ij)->GetArena();
    if (message_arena != submessage_arena) {
      psi_ij = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psi_ij, submessage_arena);
    }
    
  } else {
    
  }
  psi_ij_ = psi_ij;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_ij)
}

// .safeheron.proto.PailAffGroupEleRangeProof_V2 psi_hat_ij = 9;
inline bool Round1P2PMessage::_internal_has_psi_hat_ij() const {
  return this != internal_default_instance() && psi_hat_ij_ != nullptr;
}
inline bool Round1P2PMessage::has_psi_hat_ij() const {
  return _internal_has_psi_hat_ij();
}
inline const ::safeheron::proto::PailAffGroupEleRangeProof_V2& Round1P2PMessage::_internal_psi_hat_ij() const {
  const ::safeheron::proto::PailAffGroupEleRangeProof_V2* p = psi_hat_ij_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::PailAffGroupEleRangeProof_V2&>(
      ::safeheron::proto::_PailAffGroupEleRangeProof_V2_default_instance_);
}
inline const ::safeheron::proto::PailAffGroupEleRangeProof_V2& Round1P2PMessage::psi_hat_ij() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_hat_ij)
  return _internal_psi_hat_ij();
}
inline void Round1P2PMessage::unsafe_arena_set_allocated_psi_hat_ij(
    ::safeheron::proto::PailAffGroupEleRangeProof_V2* psi_hat_ij) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_hat_ij_);
  }
  psi_hat_ij_ = psi_hat_ij;
  if (psi_hat_ij) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_hat_ij)
}
inline ::safeheron::proto::PailAffGroupEleRangeProof_V2* Round1P2PMessage::release_psi_hat_ij() {
  
  ::safeheron::proto::PailAffGroupEleRangeProof_V2* temp = psi_hat_ij_;
  psi_hat_ij_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::PailAffGroupEleRangeProof_V2* Round1P2PMessage::unsafe_arena_release_psi_hat_ij() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_hat_ij)
  
  ::safeheron::proto::PailAffGroupEleRangeProof_V2* temp = psi_hat_ij_;
  psi_hat_ij_ = nullptr;
  return temp;
}
inline ::safeheron::proto::PailAffGroupEleRangeProof_V2* Round1P2PMessage::_internal_mutable_psi_hat_ij() {
  
  if (psi_hat_ij_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::PailAffGroupEleRangeProof_V2>(GetArena());
    psi_hat_ij_ = p;
  }
  return psi_hat_ij_;
}
inline ::safeheron::proto::PailAffGroupEleRangeProof_V2* Round1P2PMessage::mutable_psi_hat_ij() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_hat_ij)
  return _internal_mutable_psi_hat_ij();
}
inline void Round1P2PMessage::set_allocated_psi_hat_ij(::safeheron::proto::PailAffGroupEleRangeProof_V2* psi_hat_ij) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_hat_ij_);
  }
  if (psi_hat_ij) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_hat_ij)->GetArena();
    if (message_arena != submessage_arena) {
      psi_hat_ij = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psi_hat_ij, submessage_arena);
    }
    
  } else {
    
  }
  psi_hat_ij_ = psi_hat_ij;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_hat_ij)
}

// .safeheron.proto.PailEncGroupEleRangeProof psi_prime_ij = 10;
inline bool Round1P2PMessage::_internal_has_psi_prime_ij() const {
  return this != internal_default_instance() && psi_prime_ij_ != nullptr;
}
inline bool Round1P2PMessage::has_psi_prime_ij() const {
  return _internal_has_psi_prime_ij();
}
inline const ::safeheron::proto::PailEncGroupEleRangeProof& Round1P2PMessage::_internal_psi_prime_ij() const {
  const ::safeheron::proto::PailEncGroupEleRangeProof* p = psi_prime_ij_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::PailEncGroupEleRangeProof&>(
      ::safeheron::proto::_PailEncGroupEleRangeProof_default_instance_);
}
inline const ::safeheron::proto::PailEncGroupEleRangeProof& Round1P2PMessage::psi_prime_ij() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_prime_ij)
  return _internal_psi_prime_ij();
}
inline void Round1P2PMessage::unsafe_arena_set_allocated_psi_prime_ij(
    ::safeheron::proto::PailEncGroupEleRangeProof* psi_prime_ij) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_prime_ij_);
  }
  psi_prime_ij_ = psi_prime_ij;
  if (psi_prime_ij) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_prime_ij)
}
inline ::safeheron::proto::PailEncGroupEleRangeProof* Round1P2PMessage::release_psi_prime_ij() {
  
  ::safeheron::proto::PailEncGroupEleRangeProof* temp = psi_prime_ij_;
  psi_prime_ij_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::PailEncGroupEleRangeProof* Round1P2PMessage::unsafe_arena_release_psi_prime_ij() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_prime_ij)
  
  ::safeheron::proto::PailEncGroupEleRangeProof* temp = psi_prime_ij_;
  psi_prime_ij_ = nullptr;
  return temp;
}
inline ::safeheron::proto::PailEncGroupEleRangeProof* Round1P2PMessage::_internal_mutable_psi_prime_ij() {
  
  if (psi_prime_ij_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::PailEncGroupEleRangeProof>(GetArena());
    psi_prime_ij_ = p;
  }
  return psi_prime_ij_;
}
inline ::safeheron::proto::PailEncGroupEleRangeProof* Round1P2PMessage::mutable_psi_prime_ij() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_prime_ij)
  return _internal_mutable_psi_prime_ij();
}
inline void Round1P2PMessage::set_allocated_psi_prime_ij(::safeheron::proto::PailEncGroupEleRangeProof* psi_prime_ij) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_prime_ij_);
  }
  if (psi_prime_ij) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_prime_ij)->GetArena();
    if (message_arena != submessage_arena) {
      psi_prime_ij = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psi_prime_ij, submessage_arena);
    }
    
  } else {
    
  }
  psi_prime_ij_ = psi_prime_ij;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round1P2PMessage.psi_prime_ij)
}

// -------------------------------------------------------------------

// Round2P2PMessage

// string ssid = 1;
inline void Round2P2PMessage::clear_ssid() {
  ssid_.ClearToEmpty();
}
inline const std::string& Round2P2PMessage::ssid() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.ssid)
  return _internal_ssid();
}
inline void Round2P2PMessage::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.ssid)
}
inline std::string* Round2P2PMessage::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& Round2P2PMessage::_internal_ssid() const {
  return ssid_.Get();
}
inline void Round2P2PMessage::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round2P2PMessage::set_ssid(std::string&& value) {
  
  ssid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.ssid)
}
inline void Round2P2PMessage::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.ssid)
}
inline void Round2P2PMessage::set_ssid(const char* value,
    size_t size) {
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.ssid)
}
inline std::string* Round2P2PMessage::_internal_mutable_ssid() {
  
  return ssid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round2P2PMessage::release_ssid() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.ssid)
  return ssid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round2P2PMessage::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.ssid)
}

// string index = 2;
inline void Round2P2PMessage::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Round2P2PMessage::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.index)
  return _internal_index();
}
inline void Round2P2PMessage::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.index)
}
inline std::string* Round2P2PMessage::mutable_index() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.index)
  return _internal_mutable_index();
}
inline const std::string& Round2P2PMessage::_internal_index() const {
  return index_.Get();
}
inline void Round2P2PMessage::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round2P2PMessage::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.index)
}
inline void Round2P2PMessage::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.index)
}
inline void Round2P2PMessage::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.index)
}
inline std::string* Round2P2PMessage::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round2P2PMessage::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round2P2PMessage::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.index)
}

// string delta = 3;
inline void Round2P2PMessage::clear_delta() {
  delta_.ClearToEmpty();
}
inline const std::string& Round2P2PMessage::delta() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.delta)
  return _internal_delta();
}
inline void Round2P2PMessage::set_delta(const std::string& value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.delta)
}
inline std::string* Round2P2PMessage::mutable_delta() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.delta)
  return _internal_mutable_delta();
}
inline const std::string& Round2P2PMessage::_internal_delta() const {
  return delta_.Get();
}
inline void Round2P2PMessage::_internal_set_delta(const std::string& value) {
  
  delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round2P2PMessage::set_delta(std::string&& value) {
  
  delta_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.delta)
}
inline void Round2P2PMessage::set_delta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.delta)
}
inline void Round2P2PMessage::set_delta(const char* value,
    size_t size) {
  
  delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.delta)
}
inline std::string* Round2P2PMessage::_internal_mutable_delta() {
  
  return delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round2P2PMessage::release_delta() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.delta)
  return delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round2P2PMessage::set_allocated_delta(std::string* delta) {
  if (delta != nullptr) {
    
  } else {
    
  }
  delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delta,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.delta)
}

// .safeheron.proto.CurvePoint var_delta = 4;
inline bool Round2P2PMessage::_internal_has_var_delta() const {
  return this != internal_default_instance() && var_delta_ != nullptr;
}
inline bool Round2P2PMessage::has_var_delta() const {
  return _internal_has_var_delta();
}
inline const ::safeheron::proto::CurvePoint& Round2P2PMessage::_internal_var_delta() const {
  const ::safeheron::proto::CurvePoint* p = var_delta_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round2P2PMessage::var_delta() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.var_delta)
  return _internal_var_delta();
}
inline void Round2P2PMessage::unsafe_arena_set_allocated_var_delta(
    ::safeheron::proto::CurvePoint* var_delta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(var_delta_);
  }
  var_delta_ = var_delta;
  if (var_delta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.var_delta)
}
inline ::safeheron::proto::CurvePoint* Round2P2PMessage::release_var_delta() {
  
  ::safeheron::proto::CurvePoint* temp = var_delta_;
  var_delta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round2P2PMessage::unsafe_arena_release_var_delta() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.var_delta)
  
  ::safeheron::proto::CurvePoint* temp = var_delta_;
  var_delta_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round2P2PMessage::_internal_mutable_var_delta() {
  
  if (var_delta_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArena());
    var_delta_ = p;
  }
  return var_delta_;
}
inline ::safeheron::proto::CurvePoint* Round2P2PMessage::mutable_var_delta() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.var_delta)
  return _internal_mutable_var_delta();
}
inline void Round2P2PMessage::set_allocated_var_delta(::safeheron::proto::CurvePoint* var_delta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(var_delta_);
  }
  if (var_delta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(var_delta)->GetArena();
    if (message_arena != submessage_arena) {
      var_delta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_delta, submessage_arena);
    }
    
  } else {
    
  }
  var_delta_ = var_delta;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.var_delta)
}

// .safeheron.proto.PailEncGroupEleRangeProof psi_double_prime_ij = 5;
inline bool Round2P2PMessage::_internal_has_psi_double_prime_ij() const {
  return this != internal_default_instance() && psi_double_prime_ij_ != nullptr;
}
inline bool Round2P2PMessage::has_psi_double_prime_ij() const {
  return _internal_has_psi_double_prime_ij();
}
inline const ::safeheron::proto::PailEncGroupEleRangeProof& Round2P2PMessage::_internal_psi_double_prime_ij() const {
  const ::safeheron::proto::PailEncGroupEleRangeProof* p = psi_double_prime_ij_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::PailEncGroupEleRangeProof&>(
      ::safeheron::proto::_PailEncGroupEleRangeProof_default_instance_);
}
inline const ::safeheron::proto::PailEncGroupEleRangeProof& Round2P2PMessage::psi_double_prime_ij() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.psi_double_prime_ij)
  return _internal_psi_double_prime_ij();
}
inline void Round2P2PMessage::unsafe_arena_set_allocated_psi_double_prime_ij(
    ::safeheron::proto::PailEncGroupEleRangeProof* psi_double_prime_ij) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_double_prime_ij_);
  }
  psi_double_prime_ij_ = psi_double_prime_ij;
  if (psi_double_prime_ij) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.psi_double_prime_ij)
}
inline ::safeheron::proto::PailEncGroupEleRangeProof* Round2P2PMessage::release_psi_double_prime_ij() {
  
  ::safeheron::proto::PailEncGroupEleRangeProof* temp = psi_double_prime_ij_;
  psi_double_prime_ij_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::PailEncGroupEleRangeProof* Round2P2PMessage::unsafe_arena_release_psi_double_prime_ij() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.psi_double_prime_ij)
  
  ::safeheron::proto::PailEncGroupEleRangeProof* temp = psi_double_prime_ij_;
  psi_double_prime_ij_ = nullptr;
  return temp;
}
inline ::safeheron::proto::PailEncGroupEleRangeProof* Round2P2PMessage::_internal_mutable_psi_double_prime_ij() {
  
  if (psi_double_prime_ij_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::PailEncGroupEleRangeProof>(GetArena());
    psi_double_prime_ij_ = p;
  }
  return psi_double_prime_ij_;
}
inline ::safeheron::proto::PailEncGroupEleRangeProof* Round2P2PMessage::mutable_psi_double_prime_ij() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.psi_double_prime_ij)
  return _internal_mutable_psi_double_prime_ij();
}
inline void Round2P2PMessage::set_allocated_psi_double_prime_ij(::safeheron::proto::PailEncGroupEleRangeProof* psi_double_prime_ij) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_double_prime_ij_);
  }
  if (psi_double_prime_ij) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_double_prime_ij)->GetArena();
    if (message_arena != submessage_arena) {
      psi_double_prime_ij = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psi_double_prime_ij, submessage_arena);
    }
    
  } else {
    
  }
  psi_double_prime_ij_ = psi_double_prime_ij;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round2P2PMessage.psi_double_prime_ij)
}

// -------------------------------------------------------------------

// Round3P2PMessage

// string ssid = 1;
inline void Round3P2PMessage::clear_ssid() {
  ssid_.ClearToEmpty();
}
inline const std::string& Round3P2PMessage::ssid() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.ssid)
  return _internal_ssid();
}
inline void Round3P2PMessage::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.ssid)
}
inline std::string* Round3P2PMessage::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& Round3P2PMessage::_internal_ssid() const {
  return ssid_.Get();
}
inline void Round3P2PMessage::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round3P2PMessage::set_ssid(std::string&& value) {
  
  ssid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.ssid)
}
inline void Round3P2PMessage::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.ssid)
}
inline void Round3P2PMessage::set_ssid(const char* value,
    size_t size) {
  
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.ssid)
}
inline std::string* Round3P2PMessage::_internal_mutable_ssid() {
  
  return ssid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round3P2PMessage::release_ssid() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.ssid)
  return ssid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round3P2PMessage::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.ssid)
}

// string index = 2;
inline void Round3P2PMessage::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Round3P2PMessage::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.index)
  return _internal_index();
}
inline void Round3P2PMessage::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.index)
}
inline std::string* Round3P2PMessage::mutable_index() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.index)
  return _internal_mutable_index();
}
inline const std::string& Round3P2PMessage::_internal_index() const {
  return index_.Get();
}
inline void Round3P2PMessage::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round3P2PMessage::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.index)
}
inline void Round3P2PMessage::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.index)
}
inline void Round3P2PMessage::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.index)
}
inline std::string* Round3P2PMessage::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round3P2PMessage::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round3P2PMessage::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.index)
}

// string sigma = 3;
inline void Round3P2PMessage::clear_sigma() {
  sigma_.ClearToEmpty();
}
inline const std::string& Round3P2PMessage::sigma() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.sigma)
  return _internal_sigma();
}
inline void Round3P2PMessage::set_sigma(const std::string& value) {
  _internal_set_sigma(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.sigma)
}
inline std::string* Round3P2PMessage::mutable_sigma() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.sigma)
  return _internal_mutable_sigma();
}
inline const std::string& Round3P2PMessage::_internal_sigma() const {
  return sigma_.Get();
}
inline void Round3P2PMessage::_internal_set_sigma(const std::string& value) {
  
  sigma_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round3P2PMessage::set_sigma(std::string&& value) {
  
  sigma_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.sigma)
}
inline void Round3P2PMessage::set_sigma(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sigma_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.sigma)
}
inline void Round3P2PMessage::set_sigma(const char* value,
    size_t size) {
  
  sigma_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.sigma)
}
inline std::string* Round3P2PMessage::_internal_mutable_sigma() {
  
  return sigma_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round3P2PMessage::release_sigma() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.sigma)
  return sigma_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round3P2PMessage::set_allocated_sigma(std::string* sigma) {
  if (sigma != nullptr) {
    
  } else {
    
  }
  sigma_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sigma,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.cmp.sign.Round3P2PMessage.sigma)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sign
}  // namespace cmp
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cmp_2fsign_2eproto
